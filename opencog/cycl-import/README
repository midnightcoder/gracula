
                     CycL Import Design
                     ------------------

The actual implmention of the CycL import code is in the 
lillybot package. Download it. Compile it. It works, as 
of February 2008.

Lillybot is a prototype opencyc-chatbot; it can answer simple
questions posed on IRC, by performing simple inferencing on the
OpenCyc dataset. It is no longer under active development.
Lillybot source code is available at
http://lillybot.wiki.sourceforge.net/

Below follows a proposed mapping from CycL to OpenCog.
Working notes.

Basic Nodes and Links
----------------------
Two common relations in CycL are #$isa and #$genls:

(#$genls #$Vodka #$ColorlessThing)
(#$genls #$Gin #$ColorlessThing)

(#$genls #$Air #$GaseousTangibleThing)
(#$genls #$Air #$NaturalTangibleStuff)

(#$isa #$ColorlessThing #$Collection)

(#$genls #$Copper #$Mineral)
(#$genls #$Mineral #$InorganicMaterial)
(#$genls #$InorganicMaterial #$InanimateObject)

(#$isa #$Copper #$CommodityProduct)
(#$genls #$CommodityProduct #$ExistingStuffType)

(#$genls #$Copper #$PartiallyTangible)

From the point of view of reasoning in OpenCog, the #$isa and #$genls
relations are among the most interesting. They are also by far the
most common in the OpenCyc KB.

In CycL, every string that begins with the characters #$ is called a
constant. In OpenCog, constants may correspond to Nodes, or to Links;
however, there is no a-priori indication of which is which. Fortunately,
relations involving links are rare.

Some stats:

Relations:
OpenCyc has 182 different relation types, the top twenty or so are:

593072  #$isa
409745  #$prettyString
263343  #$prettyString-Canonical
99104   #$genls
57305   #$comment
54793   #$quotedIsa
26062   #$genlMt
13916   #$synonymousExternalConcept
7389    #$genlPreds
6090    #$disjointWith
4406    #$sharedNotes
3460    #$not
2143    #$quotedArgument
1864    #$typeGenls
1794    #$afterAdding
1471    #$afterRemoving
1469    #$strictlyFunctionalInArgs
1427    #$functionalInArgs
1317    #$superTaxons
1027    #$genlInverse
1007    #$rewriteOf
990     #$negationInverse
915     #$typedGenlPreds

All but 1070 of the #$isa's and all but 15 of the #$genls are 
simple relations, of the form (#$isa #$A #$B) or (#$genls #$A #$B)

Although the constant names themeselves already hint at the 
semantic meaning of the constant: e.g. #$Copper or #$CommodityProduct,
the correct semantic meaning is explicitly given by the 
#$prettyString-Canonical; so, for example:

(#$prettyString-Canonical #$Copper "copper")
(#$prettyString-Canonical #$CommodityProduct "commodity")

Thus, the translation of the vast majority of the cases is
straightforward, although a few details need to be paid 
attention to: the truth value, the strength, the inferencing
direction, and the microtheory.

Truth Values
------------
Possible truth values are TRUE, FALSE, and UNKNOWN.  All OpenCyc
#$isa, #$genls and #$prettyString are marked TRUE. In fact, the
only assertions marked false are virtually all of the #$not
assertions! Of the 3460 #$not assertions, 63 are marked TRUE and
3397 are marked false.  The vast majority of these appear to be
inversions of simple relations, i.e. taking the form 
(#$not (#$isa #$A #$B))  Thus, these seem to have no particular 
role, except that they seem to be some sort of artifacts of the 
data entry system.

There are 23 relations marked as have "unknown truth value". 
All 23 are #$TermOfUnit, which is used to define anonymous 
constants, taking the form 
   (#$TermOfUnit #$<(#$Some #$Expr)> (#$Some #$Expr))

That 23  of these are marked as being of "unknown truth value"
seems like a data entry error. 

Strength
--------
Two possible values: DEFAULT and MONOTONIC

Of the 593072 #$isa assertions, 374257 are marked "DEFAULT"
and the rest are "MONOTONIC". Of the 99104 #$genls relations,
44754 are "DEFAULT" and the rest "MONOTONIC".

Direction
---------
Three possible values: BACKWARD, FORWARD, CODE

Only 150 assertions are marked as having direction "CODE". 
Only 2419 assertions (out of 1.8 million) are marked "BACKWARD"
The remaining 1.8 milllion are makred "FORWARD".
Of the 0.6million #$isa assertions, 580 are marked "BACKWARD"
About 1/3 of the #$not expressions are marked "BACKWARD", and this is
forms the bulk of all expressions marked "BACKWARD".

Microtheories
-------------
In OpenCyc, microtheories are collections of assertions that are
taken to be true within thier own specific domain, but might 
otherwise be false in other domains, and possibly inconsistent
with other domains.

OpenCyc has 1221 "Microtheories". These map to the OpenCog idea
of a "context". The most heavily populated microtheories are:

673202  #$EnglishMt
602089  #$UniversalVocabularyMt
276554  #$BaseKB
32550   #$ComputerSoftwareDataMt
14193   #$WorldGeographyMt
13933   #$NameLexicalMt
12497   #$WordNetWorkflowDataStatusMt
12137   #$WorldPoliticalGeographyDataVocabularyMt
11611   #$BookkeepingMt
11347   #$WordNetMappingMt
9082    #$GAFGatheringLogMt
8205    #$UnitedStatesGeographyMt
7050    #$PeopleDataMt
5641    #$GKEFormulaTemplatesMt
5474    #$TopicMt
4643    #$MassMediaDataMt
4116    #$GeographicalRegionGMt
3906    #$OrganizationDataMt
3885    #$GeneralLexiconMt
3506    #$NasdaqKSMt
3456    #$Starseeker-ActorsKSMt
3299    #$SENSUSMappingMt

===================================================================
Predicates

The OpenCyc KB has approximatelly 16K predicates, most with just two
arguments, some with three:

16416   #$arity
16748   #$arg1Isa
14112   #$arg2Isa
 3484   #$arg3Isa
  957   #$arg4Isa
  236   #$arg5Isa
   50   #$arg6Isa
    5   #$arg7Isa

(#$comment #$sizeOfBed "(#$sizeOfBed BED BEDSIZE) holds just in
                         case BED is an instance of BEDSIZE.")

(#$isa #$sizeOfBed #$FunctionalPredicate)
(#$isa #$sizeOfBed #$BinaryPredicate)
(#$prettyString-Canonical #$sizeOfBed "Size Of Bed")

(#$arity #$sizeOfBed 2)
(#$arg1Isa #$sizeOfBed #$Bed-PieceOfFurniture)
(#$arg2Isa #$sizeOfBed #$BedTypeBySize)
(#$arg2Genl #$sizeOfBed #$Bed-PieceOfFurniture)

(#$genlPreds #$sizeOfBed #$isa)
(#$typedGenlPreds #$sizeOfBed #$isa)

(#$strictlyFunctionalInArgs #$sizeOfBed 2)
(#$afterAdding #$sizeOfBed (#$SubLQuoteFn PROPAGATE-TO-ISA))

------------------------------

(#$comment #$MoviesDirectedByFn "#$MoviesDirectedByFn takes as argument
any instances of #$Director-Movie and returns the collection of all
instances of #$SpecifiedMovieType (Movies by title) directed by that
director.  For example,  (#$MoviesDirectedByFn #$OrsonWelles) would
return the collection of #$SpecifiedMovieTypes directed by Orson
Welles.")

(#$arity #$MoviesDirectedByFn 1)
(#$resultGenl #$MoviesDirectedByFn #$Movie-CW)
(#$resultIsa #$MoviesDirectedByFn #$ObjectType)

(#$arg1Isa #$MoviesDirectedByFn #$Director-Movie)

(#$isa #$MoviesDirectedByFn #$CollectionDenotingFunction)
(#$isa #$MoviesDirectedByFn #$SubTopicFunction)

(#$prettyString-Canonical #$MoviesDirectedByFn "movie by the same director")
(#$prettyString #$MoviesDirectedByFn "movies by  the same director")
(#$prettyString #$MoviesDirectedByFn "movie by  the same director")

