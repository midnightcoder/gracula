
                     Semantic Triples Part Two
                     -------------------------
                      Linas Vepstas Fall 2009

Continue with examination of specific sentence and question types, and
an alaysis of the kinds of pattern-matchig challenges they present.

Using triples for question-answering
------------------------------------
Basic question-answering based on dependency-parse patten matching is 
described in nlp/question/README.  The short-falls of this style of
question-answering is documented there.  Triples provide a more robust
way of normalizing statements and questions, and enable pattern-matching
to occur at a more abstract level.

For example: "The color of the book is red." has the parse:

    _predadj (color, red)
    of (color, book) 

The semantic-triple rules convert this to "color_of(book,red)"

The question "what is the color of the book?" parses as

    _subj (be, _$qVar)
    _obj (be, color)
    of (color, book) 
    QUERY-TYPE (_$qVar, what)
    COPULA-QUESTION-FLAG (color, T)

and so syntax pattern matching on the dependency structure will fail. By 
contrast, the triples code generates "color_of(book,what)" which can be
pattern-matched.  Thus, for this case, question-answering by such 
normalized "semantic triples" should work just fine.

The related question, "what color is the book?" becomes

    _obj (be, book)
    _subj (be, color)
    QUERY-TYPE (_$qVar, what)
    QUERY-FLAG (color, T)

and the manner in which this should be converted into a "color_of"
question is unclear -- some higher-order reasoning about copulas are
needed.

Some more examples:

    [The cat sat on the mat.]
    on(sit, mat)
    _subj(sit, cat)

gets the triple "sit_on(mat,cat)". The corresponding question

	[What did the cat sit on?]
   _obj(sit_on, _$qVar)
   _subj(sit_on, cat)
   QUERY-TYPE(_$qVar, what)

gets: "sit_on(what,cat)". Unlike that color-of example above, this
triple has the query var in the first, not the second location.
Basic triple pattern matching can solve this.


IsA Sentences
-------------
Copulas, and "is-a" sentences in general, pose difficulties to naive
approaches of extracting is-a relations from text.  This section
examines some of these difficulties, and possible solutions.

Consider, for example: "Berlin is a city"
   _subj(be, Berlin)
   _obj(be, city)

Which suggests the deduction: _isa(city, Berlin) which can be produced by

# IF _subj(be, $var1) ^ _obj(be, $var2) THEN ^3_isa($var2, $var1)

However, the sentence: "The captial of Germany is Berlin.", when parsed,
has the subject and object in reverse order, and so, when this rule is
applied, returns a backwards IsA relation ('capital is a berlin'). The
preposition "of" signals the subect-object inversion; but also, the 
determiners clash for an is-a ('the capital is the berlin') -- we expect
the sentence patterns "x is a y" or "x is the y of ..." but not a naked
"x is the y".

   "Berlin is a city"
      DEFINITE-FLAG(Berlin, T)
      noun_number(Berlin, singular)
      noun_number(city, singular)
      _subj(be, Berlin)
      _obj(be, city)

   "The capital of Germany is Berlin."

      DEFINITE-FLAG(Germany, T)
      noun_number(Germany, singular)
      of(capital, Germany)
      DEFINITE-FLAG(capital, T)
      noun_number(capital, singular)
      DEFINITE-FLAG(Berlin, T)
      noun_number(Berlin, singular)
      _subj(be, capital)
      _obj(be, Berlin)

Ignoring the prepositional parts, we get:

      DEFINITE-FLAG(capital, T)
      noun_number(capital, singular)
      DEFINITE-FLAG(Berlin, T)
      noun_number(Berlin, singular)
      _subj(be, capital)
      _obj(be, Berlin)

This suggests that the correct rule for is-a relations is:

   # IF _subj(be, $var1) ^ _obj(be, $var2) 
       ^ !DEFINITE-FLAG($var2)
       THEN ^3_isa($var2, $var1)

The ! in front of DEFINITE-FLAG means "not" or "invert"; the 
DEFINITE-FLAG must be absent, or, if present, must be false.
Note that all top-level clauses (subj, obj, etc.) must have truth
values set so that they're true. This is because the truth value
is examined to compute the effect of !. The default truth value
in Opencog is (false, unconfident), so it must be over-ridden
to state (true, confident).

Hypothetical rejection in IsA statements
----------------------------------------
Another case where we must be careful is with hypothetical statements
or questions that superficially resemble statements. For example, the 
question: "Is Berlin a capital?" parses out to:

   _subj (be, Berlin) 
   _obj (be, capital) 
   TRUTH-QUERY-FLAG (capital, T)
   TRUTH-QUERY-FLAG (be, T)
   HYP (be, T)

If the truth-query and hyp flags are ignored, then this parse can be
mistaken for a statement, not a question.  This suggests that the rules
should include a !HYP term in them.  Hypothetical-rejection is 
implemented in "triple-rule-6" in "rules.scm".

Very short sentences
--------------------
Consider now: "Men are mortal."
   _predadj(men, mortal)

which suggests the rule:

 # IF _predadj($var1, $var2) THEN ^3_isa($var2, $var1)

However, prepositions again confound word order:
Input sentence: "The color of the sky is blue."
   of(color, sky)
   _predadj(color, blue)

By ignoring the preposition, the sentence becomes: "color is blue", 
i.e. that 'colors' are a kind-of blue, which is inverted from the 
intended sense. The next-most naive rule is then:

  # IF _predadj($var1, $var2) ^ 
       ! $prep($var1,$var3)
       THEN ^3_isa($var2, $var1)

and also the inverted word-order case: xxx ???? xxxx

  # IF _predadj($var1, $var2) ^ 
       $prep($var1,$var3)
       THEN ^3_isa($var1, $var2)

However, this doesn't quite work because  $prep($var2,$var3) is so broad
that it can match to _predadj itself, and so is self-defeating. There
are two possible solutions: 
1) change output so that preps don't use DefinedLinguisticRelationshipNode
2) enhance pattern matching to allow exclusive groundings of variables.


Other ....
---------

Other problems: Consider the sentences:
"A hospital is a place where you go when you are sick."

One may deduce that "A hospital is a place", but one must be careful
in making use of such knowledge....


Yes-No Questions
----------------
Question:
    Is Berlin a capital?

Parse:
   _subj (be, Berlin) 
   _obj (be, capital) 
   TRUTH-QUERY-FLAG (capital, T)
   TRUTH-QUERY-FLAG (be, T)
   HYP (be, T)



Yes/No questions, Question Comprehension
----------------------------------------
"Did John throw a rock?"

    _subj(throw, John)
    _obj(throw, rock)
    HYP (throw, T)
    TRUTH-QUERY-FLAG (throw, T)
    TRUTH-QUERY-FLAG (rock, T)

Suggests a pattern-based approach:
  # IF _subj($vrb, $sb) ^
       _obj ($vrb, $ob) ^
       HYP($vrb)
    THEN answer "yes" if match ... 

More generally, this suggests a program of "question comprehension",
wherein a set of pattern-matching proedicates, such as the above,
attempt to identify the type of question being asked, and determine
what it is that the question is asking for. Only after "comprehending"
the question, should a search for the answer be undertaken.

Some extrememly preliminary work has been done. The file 
"nlp/triples/question-tags.txt" contains a single rule that attempts
to identify "hypotheitcal copula" questions: "Is X a Y?"

Some other question forms needing identification:
 "Does X verb Y?"       e.g. "Did John throw a rock?"
 "Is X prep_phrase Y?"  e.g. "Is Berlin in Germany?"
                             "Is Berlin the captial of Germany?"


Also: "What color is the book?" needs to be recognized as being
"What is the color of the book?" 


Rhetorical Questions
--------------------
How to distinguish rhetorical questions from queries that should be
answered?  A block of input text may contain rhetorical questions, 
which should be ignored.



ToDo:
-----
* "What color is the book?" per above.
* "Men are mortal" per above.
