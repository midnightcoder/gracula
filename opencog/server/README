
                       Overview
                       --------
                     November 2009

The CogServer provides a simple network shell server interface to the 
various functions in the opencog system.

To access the shell server, build everything and execute 
bin/opencog/server/cogserver.  From another terminal, run 
"telnet localhost 17001"; this will connect to the shell.
Alternately, "netcat localhost 17001" can be used. Long or
complex sequences of commands may be loaded by saying
"cat somefile | telnet localhost 17001". An editable command-line
history can be obtained with "rlwrap telnet localhost 17001".

The main command dispatcher is implemented in CommandRequestProcessor.cc
This command dispatcher understands various commands, such as loading
data from XML files, loading and saving to SQL.  Type "help" at the
shell prompt to get a listing of the commands.

The server also includes a full scheme (guile) interpreter, 
allowing generic scripting to be done. See the README in the
src/guile directory for more info, and src/scm for various 
scriptlets.

Creating Loadable Modules
-------------------------
Loadable modules are shared libraries that implement some function. The
"loadmodule" command will load a module.

Modules can be automatically loaded on server startup by modifying the 
lib/opencog.conf file, and adding the module name to the list therein.

Loadable modules will typically need to expose new commands. There are
three ways of doing this: by using DECLARE_CMD_REQUEST (to define a small
handful of commands), by using the GenericShell class (to build a custom
shell command evaluator), or by defined scheme functions that call C++
object methods (using SchemePrimitive.h), thus allowing the new functions
to be invoked from the scheme shell.  

The last option is the easiest to use, and provides the most powerful
interface.  This is because a scheme function, once defined, can be used
both interactively, at the scheme shell prompt, and also within preloaded 
scheme scripts, to perform various actions on server startup or during
server operation. An example of defining new scheme primitives can be 
found in "opencog/guile/PrimitiveExample.cc".

In certain rare cases, a module my wish to expose an extrenely large
number of functions, or an alternative scripting system (e.g. python
or lua, or other language). In this case, the GenericShell provides
at least some basic support.  The GenericShell bypasses OpenCog's command
processor, and passes input data over to a generic "eval()" method, which
is then free to interprete the input in any way.

ToDo/Bugs:
----------
* There is curently no job scheduling whatsoever, and no standardized
  input-queue polling. Thus, all routines that look for input need to
  poll, yet they also must minimize cpu overhead, to avoid blocking 
  the command-line processor.   Heavy cpu use must be done in its
  own threads.

* Need to document how module loading actually works.

* Put together a list of all known MindAgents in default config file, so that
  MindAgents can be loaded directly (and the CogServer will load the
  appropriate module(s) first).


