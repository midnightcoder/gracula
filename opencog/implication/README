
                      Implication
                      -----------
                Linas Vepstas September 2009

OpenCog performs much of its reasoning by representing logical
constructs with ImplicationLinks. Roughly speaking, these resemble
the "rules" of popular "rule engines", but differ in significant ways.
A long-term goal is to have a system that is able to learn these 
automatically.  However, in the short term, many of these "rules" are
written by hand, in order to acheive specific goals.  When writing them
by hand, they prove to be rather verbose.  The goal of the code in this
directory is to provide a more "human-freindly" way to write
ImplicationLinks for many common usage scenarios.

Right now, this is JUST A BUNCH OF IDEAS. Nothing works yet.


;; Domains superficially resemble prolog domains,
;; except that they can also define "typed namespaces"
;;
domains
	;; Here, rlx is a "typed namespace".
	;; Whenever something like r(a,b) is seen, it will be replaced by
	;; the stuff in the curly braces. In that sense, r(a,b) is kind-of
	;; like a "macro", in that this is essentially a macro substitution. 
	rlx : r(a,b)  = {      
		(EvaluationLink
			(DefinedLinguisticRelationshipNode r)
			(ListLink
				(WordInstanceNode a)
				(WordInstanceNode b)
			)
		)
	}

	;; As above, but now $b is understood to be a variable.
	rlx : r(a,$b)  = {      
		(EvaluationLink
			(DefinedLinguisticRelationshipNode r)
			(ListLink
				(WordInstanceNode a)
				(VariableNode $b)
			)
		)
	}

	;; Another example: the "pos" namespace
	;; Note that the "p" is not used.
	pos : p(a,b)  = {
		(PartOfSpeechLink (stv 1 1)
			(WordInstanceNode a)
			(DefinedLinguisticConceptNode b)
		)
	}

	;; No namespace, this is globally defined.
	IF P THEN Q  = {
		(ImplicationLink
			P
			Q
		)
	}

;; The above are now used to build up expressions
expressions
	IF rlx : _subj(be, $var0)
	THEN $var0




