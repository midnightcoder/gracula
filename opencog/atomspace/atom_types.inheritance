/* File automatically generated. Do not edit */
opencog::ATOM = addType(opencog::ATOM, "Atom");
opencog::NODE = addType(opencog::ATOM, "Node");
opencog::LINK = addType(opencog::ATOM, "Link");
opencog::CONCEPT_NODE = addType(opencog::NODE, "ConceptNode");
opencog::NUMBER_NODE = addType(opencog::NODE, "NumberNode");
opencog::ORDERED_LINK = addType(opencog::LINK, "OrderedLink");
opencog::UNORDERED_LINK = addType(opencog::LINK, "UnorderedLink");
opencog::SET_LINK = addType(opencog::UNORDERED_LINK, "SetLink");
opencog::SUBSET_LINK = addType(opencog::ORDERED_LINK, "SubsetLink");
opencog::LIST_LINK = addType(opencog::ORDERED_LINK, "ListLink");
opencog::MEMBER_LINK = addType(opencog::ORDERED_LINK, "MemberLink");
opencog::AND_LINK = addType(opencog::ORDERED_LINK, "AndLink");
opencog::OR_LINK = addType(opencog::UNORDERED_LINK, "OrLink");
opencog::NOT_LINK = addType(opencog::UNORDERED_LINK, "NotLink");
opencog::FALSE_LINK = addType(opencog::ORDERED_LINK, "FalseLink");
opencog::TRUE_LINK = addType(opencog::ORDERED_LINK, "TrueLink");
opencog::CONTEXT_LINK = addType(opencog::ORDERED_LINK, "ContextLink");
opencog::VARIABLE_NODE = addType(opencog::NODE, "VariableNode");
opencog::VARIABLE_TYPE_NODE = addType(opencog::NODE, "VariableTypeNode");
opencog::TYPED_VARIABLE_LINK = addType(opencog::ORDERED_LINK, "TypedVariableLink");
opencog::VARIABLE_SCOPE_LINK = addType(opencog::ORDERED_LINK, "VariableScopeLink");
opencog::FORALL_LINK = addType(opencog::VARIABLE_SCOPE_LINK , "ForAllLink");
opencog::EXIST_LINK = addType(opencog::VARIABLE_SCOPE_LINK, "ExistLink");
opencog::SCHOLEM_LINK = addType(opencog::ORDERED_LINK, "ScholemLink");
opencog::IMPLICATION_LINK = addType(opencog::ORDERED_LINK, "ImplicationLink");
opencog::EVALUATION_LINK = addType(opencog::ORDERED_LINK, "EvaluationLink");
opencog::ASSOCIATIVE_LINK = addType(opencog::ORDERED_LINK, "AssociativeLink");
opencog::INHERITANCE_LINK = addType(opencog::ORDERED_LINK, "InheritanceLink");
opencog::SIMILARITY_LINK = addType(opencog::UNORDERED_LINK, "SimilarityLink");
opencog::EXTENSIONAL_INHERITANCE_LINK = addType(opencog::ORDERED_LINK, "ExtensionalInheritanceLink");
opencog::EXTENSIONAL_SIMILARITY_LINK = addType(opencog::ORDERED_LINK, "ExtensionalSimilarityLink");
opencog::INTENSIONAL_INHERITANCE_LINK = addType(opencog::ORDERED_LINK, "IntensionalInheritanceLink");
opencog::INTENSIONAL_SIMILARITY_LINK = addType(opencog::ORDERED_LINK, "IntensionalSimilarityLink");
opencog::PROCEDURE_NODE = addType(opencog::NODE, "ProcedureNode");
opencog::GROUNDED_PROCEDURE_NODE = addType(opencog::PROCEDURE_NODE, "GroundedProcedureNode");
opencog::SCHEMA_NODE = addType(opencog::PROCEDURE_NODE, "SchemaNode");
opencog::GROUNDED_SCHEMA_NODE = addType(opencog::SCHEMA_NODE, "GroundedSchemaNode");
opencog::GROUNDED_SCHEMA_NODE = addType(opencog::GROUNDED_PROCEDURE_NODE, "GroundedSchemaNode");
opencog::PREDICATE_NODE = addType(opencog::SCHEMA_NODE, "PredicateNode");
opencog::GROUNDED_PREDICATE_NODE = addType(opencog::PREDICATE_NODE, "GroundedPredicateNode");
opencog::GROUNDED_PREDICATE_NODE = addType(opencog::GROUNDED_PROCEDURE_NODE, "GroundedPredicateNode");
opencog::SATISFYING_SET_LINK = addType(opencog::ORDERED_LINK, "SatisfyingSetLink");
opencog::SCHEMA_EXECUTION_LINK = addType(opencog::INHERITANCE_LINK, "SchemaExecutionLink");
opencog::SCHEMA_EVALUATION_LINK = addType(opencog::SCHEMA_EXECUTION_LINK, "SchemaEvaluationLink");
opencog::EXECUTION_LINK = addType(opencog::ORDERED_LINK, "ExecutionLink");
opencog::EXECUTION_OUTPUT_LINK = addType(opencog::ORDERED_LINK, "ExecutionOutputLink");
opencog::PREDICTIVE_IMPLICATION = addType(opencog::ORDERED_LINK, "PredictiveImplication");
opencog::TAIL_PREDICTIVE_IMPLICATION = addType(opencog::ORDERED_LINK, "TailPredictiveImplication");
opencog::SEQUENTIAL_AND_LINK = addType(opencog::AND_LINK, "SequentialAndLink");
opencog::SIMULTANEOUS_AND_LINK = addType(opencog::AND_LINK, "SimultaneousAndLink");
opencog::EVENTUAL_SEQUENTIAL_AND_LINK = addType(opencog::ORDERED_LINK , "EventualSequentialAND");
opencog::EVENTUAL_PREDICTIVE_IMPLICATION_LINK = addType(opencog::ORDERED_LINK , "EventualSequentialImplication");
opencog::HYPOTHETICAL_LINK = addType(opencog::ORDERED_LINK, "HypotheticalLink");
opencog::MIXED_IMPLICATION_LINK = addType(opencog::ORDERED_LINK, "MixedImplicationLink");
opencog::EXTENSIONAL_IMPLICATION_LINK = addType(opencog::ORDERED_LINK, "ExtensionalImplicationLink");
opencog::EQUIVALENCE_LINK = addType(opencog::UNORDERED_LINK, "EquivalenceLink");
opencog::EXTENSIONAL_EQUIVALENCE_LINK = addType(opencog::UNORDERED_LINK, "ExtensionalEquivalenceLink");
opencog::ANCHOR_NODE = addType(opencog::NODE, "AnchorNode");
opencog::COUNT_LINK = addType(opencog::ORDERED_LINK, "CountLink");
opencog::WORD_NODE = addType(opencog::NODE, "WordNode");
opencog::REFERENCE_LINK = addType(opencog::ASSOCIATIVE_LINK, "ReferenceLink");
opencog::DOCUMENT_NODE = addType(opencog::CONCEPT_NODE, "DocumentNode");
opencog::SENTENCE_NODE = addType(opencog::CONCEPT_NODE, "SentenceNode");
opencog::PARSE_NODE = addType(opencog::CONCEPT_NODE, "ParseNode");
opencog::PARSE_LINK = addType(opencog::ASSOCIATIVE_LINK, "ParseLink");
opencog::WORD_INSTANCE_NODE = addType(opencog::CONCEPT_NODE, "WordInstanceNode");
opencog::WORD_INSTANCE_LINK = addType(opencog::ASSOCIATIVE_LINK, "WordInstanceLink");
opencog::FEATURE_NODE = addType(opencog::CONCEPT_NODE, "FeatureNode");
opencog::FEATURE_LINK = addType(opencog::ORDERED_LINK, "FeatureLink");
opencog::LINK_GRAMMAR_RELATIONSHIP_NODE = addType(opencog::PREDICATE_NODE   , "LinkGrammarRelationshipNode");
opencog::LINK_GRAMMAR_DISJUNCT_NODE = addType(opencog::PREDICATE_NODE       , "LinkGrammarDisjunctNode");
opencog::DEFINED_LINGUISTIC_CONCEPT_NODE = addType(opencog::FEATURE_NODE, "DefinedLinguisticConceptNode");
opencog::DEFINED_LINGUISTIC_RELATIONSHIP_NODE = addType(opencog::PREDICATE_NODE , "DefinedLinguisticRelationshipNode");
opencog::PREPOSITIONAL_RELATIONSHIP_NODE = addType(opencog::PREDICATE_NODE  , "PrepositionalRelationshipNode");
opencog::DEFINED_FRAME_NODE = addType(opencog::CONCEPT_NODE, "DefinedFrameNode");
opencog::DEFINED_FRAME_ELEMENT_NODE = addType(opencog::PREDICATE_NODE, "DefinedFrameElementNode");
opencog::FRAME_ELEMENT_LINK = addType(opencog::ORDERED_LINK, "FrameElementLink");
opencog::WORD_SENSE_NODE = addType(opencog::CONCEPT_NODE, "WordSenseNode");
opencog::WORD_SENSE_LINK = addType(opencog::ASSOCIATIVE_LINK, "WordSenseLink");
opencog::PART_OF_SPEECH_NODE = addType(opencog::FEATURE_NODE, "PartOfSpeechNode");
opencog::PART_OF_SPEECH_LINK = addType(opencog::FEATURE_LINK, "PartOfSpeechLink");
opencog::LEMMA_NODE = addType(opencog::CONCEPT_NODE, "LemmaNode");
opencog::LEMMA_LINK = addType(opencog::ORDERED_LINK, "LemmaLink");
opencog::HOLONYM_LINK = addType(opencog::INHERITANCE_LINK, "HolonymLink");
opencog::COSENSE_LINK = addType(opencog::UNORDERED_LINK, "CosenseLink");
opencog::SEME_NODE = addType(opencog::CONCEPT_NODE, "SemeNode");
opencog::SEMANTIC_RELATION_NODE = addType(opencog::SEME_NODE, "SemanticRelationNode");
opencog::CONTEXT_NODE = addType(opencog::CONCEPT_NODE, "ContextNode");
opencog::AGISIM_SOUND_NODE = addType(opencog::NODE , "AGISIMSoundNode");
opencog::AGISIM_TASTE_NODE = addType(opencog::NODE , "AGISIMTasteNode");
opencog::AGISIM_SMELL_NODE = addType(opencog::NODE , "AGISIMSmellNode");
opencog::AGISIM_SELF_NODE = addType(opencog::NODE , "AGISIMSelfNode");
opencog::AGISIM_PERCEPT_NODE = addType(opencog::NODE , "AGISIMPerceptNode");
opencog::AGISIM_VISUAL_PERCEPT_NODE = addType(opencog::NODE , "AGIMSIMVisualPerceptNode");
opencog::AGISIM_PIXEL_PERCEPT_NODE = addType(opencog::NODE , "AGISIMPixelPerceptNode");
opencog::AGISIM_POLYGON_PERCEPT_NODE = addType(opencog::NODE , "AGISIMPolygonPerceptNode");
opencog::AGISIM_OBJECT_PERCEPT_NODE = addType(opencog::NODE , "AGISIMObjectPerceptNode");
opencog::CW_PIXEL_PERCEPT_NODE = addType(opencog::NODE , "CWPixelPerceptNode");
opencog::CW_COLOR_NODE = addType(opencog::NODE , "CWColorNode");
opencog::FW_VARIABLE_NODE = addType(opencog::NODE , "FWVariableNode");
opencog::LATEST_LINK = addType(opencog::ORDERED_LINK, "LatestLink");
opencog::OBJECT_NODE = addType(opencog::NODE, "ObjectNode");
opencog::PET_NODE = addType(opencog::OBJECT_NODE, "PetNode");
opencog::AVATAR_NODE = addType(opencog::OBJECT_NODE, "AvatarNode");
opencog::STRUCTURE_NODE = addType(opencog::OBJECT_NODE, "StructureNode");
opencog::ACCESSORY_NODE = addType(opencog::OBJECT_NODE, "AccessoryNode");
opencog::HUMANOID_NODE = addType(opencog::OBJECT_NODE, "HumanoidNode");
opencog::AT_TIME_LINK = addType(opencog::ORDERED_LINK, "AtTimeLink");
opencog::TIME_NODE = addType(opencog::NODE, "TimeNode");
opencog::IS_ACCEPTABLE_SECOND_ARG_LINK = addType(opencog::ORDERED_LINK, "IsAcceptableSecondArgLink");
opencog::HEBBIAN_LINK = addType(opencog::LINK, "HebbianLink");
opencog::ASYMMETRIC_HEBBIAN_LINK = addType(opencog::ORDERED_LINK, "AsymmetricHebbianLink");
opencog::ASYMMETRIC_HEBBIAN_LINK = addType(opencog::HEBBIAN_LINK, "AsymmetricHebbianLink");
opencog::SYMMETRIC_HEBBIAN_LINK = addType(opencog::UNORDERED_LINK, "SymmetricHebbianLink");
opencog::SYMMETRIC_HEBBIAN_LINK = addType(opencog::HEBBIAN_LINK, "SymmetricHebbianLink");
opencog::INVERSE_HEBBIAN_LINK = addType(opencog::ORDERED_LINK, "InverseHebbianLink");
opencog::INVERSE_HEBBIAN_LINK = addType(opencog::HEBBIAN_LINK, "InverseHebbianLink");
opencog::SYMMETRIC_INVERSE_HEBBIAN_LINK = addType(opencog::UNORDERED_LINK, "SymmetricInverseHebbianLink");
opencog::SYMMETRIC_INVERSE_HEBBIAN_LINK = addType(opencog::HEBBIAN_LINK, "SymmetricInverseHebbianLink");
