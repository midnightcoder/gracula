= Probabilisitic Logic Networks Technical Implementation Notes

Original version by Ari A. Heljakka. October 6th, 2006.

Port to OpenCog, refactoring, polish and shine by Joel Pitt, Jun.-Nov. 2008.

The implementation is based on the PLN book chapter "Designing a Practical PLN
Inference Engine"[1].

Classes
- Class Formula takes TVs as inputs and returns a TV.
- Class Rule inputs Vertexes (Handles) and returns a Vertex (Handle)
- Class BITNodeRoot is the main class of the backward chainer

A Vertex is a boost::variant which can be an atom type or a Handle. They are
also the node type of vtrees (Vertex trees).

A hypothesis can be represented as either an atom with confidence=0.0f, or as
embedded in a HypotheticalLink. The former approach is better in general (why is
this? I'm not sure...).

[1] Goertzel, B., Ikl√©, M., Goertzel, I.F., Heljakka, A. 2008. Probabilistic
Logic Networks: A Comprehensive Framework for Uncertain Inference.

== Normalization

For PLN, AtomSpaceWrapper is used to buffer the insertions to the AtomSpace.

AtomSpaceWrapper takes care of normalizing atoms. Currently these normalizations
are used:

--- EquivalenceLinks are converted into 2 ImplicationLinks.
--- ForAll(List, And(A1, A2, ...)) is converted to ForAll(List, A1),
    ForAll(List, A2), ...

== Quantifiers

ForAll formulas should have the TruthValue (TV) at the ForAllLink, not inside
it. It's internal ListLink must be there but its contents are not used.

ForAll(List, Implication(And(A1,A2,...,An)), Pat1)<tv1>

will be converted to RewritingRules* of the form "if you need to produce Pat1,
then it's sufficient to produce A1,A2,...,An. The conversion is only made
if tv1.confidence>=0.99 (ANDFormula will eventually be applied to produced
atoms to forward-compute the TV). This approach should only be used for
purely Boolean rewriting, i.e. Boolean theorems.

(* actually there is only one CrispTheoremRule/RewritingRule instance, and a
static list of theorems to be used by it.)

Skolemization (conversion of premises with variables to be encompassed by a
ForAll quantifier) is requred of axioms. Results of inference currently don't
create atoms with a Skolemized form but when it does, this process should be automated.

== General PLN source code notes

Bad Performance:
- In various unifier methods> if parent is variable, no need to combinate the children.
- In Rules, input validity check is not currently active.

NOTE:

- FW_VARIABLE_NODEs in o2iMetaExtra() are not memory-managed

- LookUpRule automatically omits elements with confidence 0.
- PostCondition in GenericEvaluator.cpp prevents confidence-0 atoms entering via other rules,
too.
- Normalization is non-trivial with fuzzy TVs. Degree of allowable loss-of-info L must be
decided (=policy), and only [TV.strength > 1.0-L] should be considered TRUE, etc.
- No Nested ForAlls => "defined($X) @ node" currently fails.
- ForAllRule's TV determines the TV of the outest link within the ForAll, not affecting
the internal ones. All atoms within ForAll should originally have confidence = 0.
- ORRule is only evaluated to the binary pair exclusion precision (A+B+C-AB-AC-BC).
- Policy: Rule.o2i methods must make sure they don't waste time. ResMan only guards the
blocking Rule method calls on a serial manner - it cannot survive a slow o2i implementation
- Always puts ANDRules before SimpleANDRules, since the latter accept more general output type,
but don't do the flattening magic.
- BW chaining UnorderedLinkPermutationRule only works for ANDLinks. Try it with ORLinks and die.
FW chaining should be ok. The reason is logical...
- CrispUnificationRule & UnorderedLinkPermutationRule use HYPOTHETICAL_LINKs - pseudo atoms that,
given as a parameter to the rule, make the rule output the desired kind of outcome
- Often you can choose to either increase the complexity of a Rule, or make multiple
versions of the rule (eg. ANDRule<N>).
- MP that only tests __INSTANCE_OF property is equivalent to a MP construct that uses
FW_VARIABLE_NODEs, but faster to use (no substitutions needed).
- ATOM-type MP will always be true for any parameter atom.
- A non-MP atom x cast into MetaPredicate will amount to EQUAL(x)
- ListLink TVs don't mean anything.
- Using log slows down a lot, even if loglevel 0!
- Shouldn't Handles/TVs recall the way they were produced? Eg. ImplicationLinks
created by inversion should be rejected if they are later produced another way;
how about updating the TVs when U size changes?
- When addLink splits a FORALL_LINK into multiple parts, a ListLink is returned!
- IF we take a link with arity A & type T be a subtype of link with
arity A'>A & type T,
then Atom equals VariableNode, and variable unification is a special case of
finding the subtype of a given atom.

- predicate <=> type conversion

- Should the TruthValues of any links that contain variables be neglected?
If so, then should they be embedded always in HypLinks? Probably not.
But then, every time we query for a link L, we must check
a) whether it's (_always_) embedded in a HypoLink and
b) whether it contains variables. (Unless it's a ForAll link!)
In either case, the TV is meaningless.

- In CrispUnification of ForAllLinks, subtrees must be proved separately.
Eg. consider
ForAll<tv1>
    List($X)
    Implies
        And
            F
            $X
        $X.

Once I substitute A<tv2> for X, I get
    Implies<tv1>
        And<tv3>
            F
            A<tv2>
        A<tv2>.

But in order to find out tv3, the BIT must also find the TV of
        And
            F
            A<tv2>.

StrictImplicationBreakdownRule (aka ModusPonens) solves this problem by
requiring the antecedent (in this case the AndLink) as a separate argument,
which will be separately proved by the BIT.

NOTE 5: On Unification
0. A "simple MP" = an atom A that is not a MP, but will implicitly be considered
as the complex MP "EqualTo(A)". Also an MP atom whose outgoing set contains no
variables is considered a simple one, since it can no longer be used as a "real"
MP.
1. While BW-chaining, the proof of formulas that are simple MPs but contain
variables is never attempted.
2. The Unifier rule produces, for the desired output, the non-redundant set of
all possible combinations of static and variable structures that would, upon
unification, produce the output. All these structures will be simple MPs.
3. No "actual" unification will take place - the results of the inverted Unifier
rule will be looked for, and if they aren't found, the proof path is cut.
4. When a query is made for a MP, it is first considered a simple MP and then a
complex one. Ie. first we query the atom table for whether the exact atom
designated by the MP exists, and if it doesn't, then we try to actually "run"
the MP (in case it has a complex aspect, too), ie. seek atoms that fulfill the
MP. 


StrictCrispUnification is currently buggy and cannot be used!
Anyway, if you use it, bool PREVENT_LOOPS = false must hold!
CrispUnification may be ok, but does not cover all cases!

WHen using exhaustive inference tree expansion, there may arise pathological
Rule combinations. Known examples are:

- CrispTheorem (with theorems in fetchdemo.xml) with ImplicationBreakdown
- AND Rules with ANDBreakdown
- UnorderedLinkPermutation often, esp. with ANDBreakdown / ORBreakdown
- ChildSubstitution almost always

== Screencasts explaining code details

Ari gratiously put together a few videos explaining aspects of the code. Note
that these refer to a particular snapshot of the code a while ago, so some of it
may have changed. In particular the MPUnify methods need to be unified
(ironically).

http://www.dreambroker.fi/w/6ac7926ef - High level overview of PLN files.
http://www.dreambroker.fi/w/1786cbe13 - BackInferenceTreeNodes.
http://www.dreambroker.fi/w/2e990eb8f - MPUnify methods, substitute variable
methods, TableGather::gather method.

== How to use the PLN commands in CogServer

The old plnshell is now obsolete. Instead, load the module libpln.so from CogServer.
Currently it is loaded by default.
The commands are now available by passing them to the "pln" command in CogServer.
Use "help pln" (or "pln help") to get a list of the available commands.
To initialize the experiments, first load a test data file, for example use the command:

  pln load-axioms smalldemo.xml

which will load tests/reasoning/pln/smalldemo.xml, which was previously loaded by default.
This is also when PLN now initializes the test targets, so it is necessary to use that command
before using any of the test-specific commands such as the "pln test-target" command.

Now load a built-in target, for example:

  pln test-target 5

You can then use any of the other commands. The main one is "pln infer <steps>", which
infers until a truth-value for the target is found or that many steps have been done.

== TODO

There are a lot of potential design changes that it'd be nice to make, as well
as other quite important tasks.

=== Important

* Convert code so that Type and pHandle are represented separately in the
Vertex boost::variant. At the same time, perhaps convert the code to use
VersionHandles so that AtomSpaceWrapper doesn't need to convert to/from fake handles. 
* Implement a different way of assessing rule application fitness.
* unify the unify methods: MPUnify1, MPUnifyVector, MPUnifyHandle -> MPUnify
* fix memory leak in BITNode::EvaluateWith ... new RuleApp is not freed (but
freeing causes a SegFault).
* remove the atom class and replace with vtree.
* Register PLN atoms types with the new ClassServer on module load

=== Moderate

* remove all the temporary hacks in the haxx:: namespace
* Split Rules in inheriting from a GeneratorRule or ComposerRule class:
 Generators create atoms but don't require input atoms.
   This includes ForAll atoms in XML axiom sets are loaded into separate
   CrispuUnificationRule objects. They are Generators. Other generators include
   direct lookup, remote lookup, and hypothesis generation.
 Composers produce atoms from input.
   
=== Nice to have

* Magical machine elves.
