
                  Query Processing/Pattern Matching
                          ----------------
               Linas Vepstas <linasvepstas@gmail.com>
                        Created 18 March 2008
                        Revised on 18 March 2009

This directory contains code that implements a subgraph isomorphism
algorithm, and then uses this algorithm to support several functions,
including query processing and a first-order-logic forward chainer.
The first part of the file describes the generic algorithm; the second
part describes its applications to query processing, foreward chainging
and so on.

This code does not currently expose a "hypergraph query language" (HQL),
but doing so should not be hard to add. See the design notes below.

A simple example of one possible use of this code is in the file 
"implication-example.scm".

Subgraph Isomorphism Discovery
------------------------------
Given a small (hyper-)graph and a bigger "universe" (hyper-)graph, the
subgraph isomorphism algorithm finds and returns the corresponding
smaller graph within the universe graph.  The smaller graph may include
one or more variable nodes or links; these denote variables which will
be given values (groundings): a variable will match any corresponding
node or link in the universe, as long as it occurs in the correct
location.  Thus, subgraph matching can be used to perform query 
processing, to "fill in the blanks".

The subgraph matching algorithm is fairly general, but with an
important restriction on how the subgraph is specified. Every
hypergraph has a corresponding incidence graph (or "Levi graph"),
where the nodes and links of the hypergraph are mapped to vertices
on the incidence graph, while the edges of the incidence graph
reflect the connectivity of the hypergraph.  The input to the
algorithm must be specified as a set of trees in the incidence
graph, with some nodes shared between the trees, so as to form
a single, connected graph. General mathematical theorems state
that ever graph can be decomposed into a collection of trees.
As a practical matter, it is very easy to perform this decomposition
within OpenCog: all OpenCog hypergraphs are always naturally
specified as trees.

An easy example of decomposing a general graph into a collection 
of trees comes from natural language (English) that has been 
parsed to extract relations. So, for example:

  _subj(John, throw)
  _obj(ball, throw)

consists of two trees, with a shared leaf (throw) connecting the
two trees together to form a single graph.  The tree input keeps
the algorithm simple, as the subgraph matching is performed recursively,
one tree at a time.

The algorithm is kept generic, by means of two callbacks.  One callback
simply reports a solution, and provides a map between nodes/links in
the subgraph, and nodes/links in the universe.  The second callback is
used to determine when two nodes/links are identical.  For example,
in linguistic matching, two nodes might be considered to be identical
when they are both instances of the same concept; the details of what
constitutes "the same concept" are left to the callback.

As a concrete example, consider the statement and query: "John threw a
ball. What did John throw?" The query takes the form:

   link[40 <_obj,link[26 <throw_49,_$qVar_05>]>]
   link[40 <_subj,link[26 <throw_49,John_51>]>]

which is solved by:
   link[40 <_obj,link[26 <throw_22,ball_79>]>]
   link[40 <_subj,link[26 <throw_22,John_85>]>]

with the explicit mapping given by:
    atom _obj maps to _obj
    atom _subj maps to _subj
    atom throw_49 maps to throw_22
    atom John_51 maps to John_85
    atom _$qVar_05 maps to ball_79

It is up to the callback to determine whether throw_49 and throw_22 both
refer to the same concept of "throw", and thus to return false or true to
accept or reject the match.


Algorithm overview
------------------
The following sections present the algorithm details.

Terminology
-----------
The incidence graph of a hypergraph is called the "Levi graph".
Levi graphs are bipartite; although the algorithm does not make
use of this.

A solution that assigns a value to a variable is called a "grounding"
of that variable. Graphs that contain variables will sometimes be 
called ungrounded graphs.

The Basic Algorithmic Idea
--------------------------
The basic idea is to treat the query as a graph, in which are embedded
some number of variables or unknowns. This query graph can be loosely
understood to be kind of like a predicate, in that the query is solved
only when the variables take on appropriate values, i.e. when the 
variables are grounded.

The goal of query processing is to scan the collection of all knowledge,
(the "universe hypergraph"), looking for a subgraph that matches the
predicate. The nodes that fit where the unknowns would go are then the
answer to the query.

The problem of finding certain subgraphs within graphs is known as the
"subgraph isomorphism problem" or the "subgraph matching problem", and
one uses a "subgraph isomorphism algorithm" to find the match.

The input to the algorithm is a set of trees. Because each tree may have
several groundings, the algorithm maintains a stack to hold intermediate
groundings, as the universe is explored. A solution is declared when
every tree has been grounded. If no grounding is found, or if another
solution is to be searched for, the algorithm will backtrack to the 
most recent unexplored part of the universe, poping the stack as it 
backtracks. To this degree, the algorithm resembles a pushdown automaton.

Currently Implemented Algorithm
-------------------------------
0) In the following, the word "atom" may refer to either a hypergraph
   node, or a hypergraph link. Corresponding to every hypergraph is
   an incidence graph. The atoms of a hypergraph are vertices of
   the incidence graph. The convention used here is that the incidence
   graph is a directed graph; thus, only hypergraph links have
   outgoing incidence graph edges; whereas hypergraph nodes have
   no outgoing incidence graph edges.

   The implemented algorithm makes direct use of the incidence
   graph, and only indirectly to the hypergraph. The insistence
   on making the incidence graph be a directed graph helps make
   traversal more direct and removes ambiguity.

   [OpenCog-specific remarks are in square brackets.  In OpenCog, the
   outgoing incidence graph edges are given by the "outgoing set" of
   the atom.]

1) Input consists a sequence of the roots of incidence trees, that is,
   of a list of subgraphs of the incidence graph that are trees.  Thus,
   by definition, the incidence tree root must be a hypergraph link,
   as hypergraph node cannot, by definition, have a non-trivial
   incidence tree under it.  Each tree is, by definition, acyclic.
   These trees are also refered to as "clauses", below [and in the code].
   This is because, in some cases, the tree can play the role of a
   logical clause. In some cases, the tree is also refered to as a 
   a "predicate", although sometimes the whole collection of clauses
   is also called the predicate. Sorry for the confusion.

   Thus, for example: the clause _subj(row, Steve) has _subj at the
   root of the tree, with "row" and "Steve" as leaves.

   Distinct trees may have common vertices.  The common vertices
   act to join together the trees into a single, connected graph.
   Disconnected graphs are not allowed; the algorithm will fail to
   find and ground disconnected components.  The graph as a whole may
   contain loops (the decomposition into trees keeps the algorithm
   from having to explicitly accommodate loops).

   A list of the common, or shared, vertices is made; this list is
   used later in the algorithm, to find all trees connected to a
   specific vertex. [This list is implemented as 
   PatternMatchEngine::root_map]

   The universe graph may have any structure whatsoever; there are no
   limitations put on it.

2) Input includes a list of the bound variables in the clauses.
   Thus, for example _obj(row,_$qVar) has _$qVar is the variable
   to be solved for. The list serves to explicitly identify the
   variables, so that they do not need to be computed or guessed.
   The designated variables need not be leaf vertices. There may be
   zero, one or more variables.  They are called "bound" simply 
   because they have been called out; whereas "free variables" are
   variables that may occur in the clauses, but have not been 
   identified to the algorithm.

3) Node equivalence is determined by means of a callback; the user
   may implement any notion at all of "equivalence".  In particular,
   the equivalence callback may be used as an alternate way to perform
   variable bindings, with the callback itself determining when a
   node is variable, and what the allowed bindings to it may be.
   The callback is free to consider node truth values, or anything else,
   in determining whether to accept or reject a candidate grounding.
   Link equivalence is likewise governed by a callback.

   [The node equivalence callback is implemented in 
   PatternMatchCallback::node_match(). The link equivalence callback is
   PatternMatchCallback::link_match().]

4) Pick the first tree. Get the type of the root atom of the
   first tree. Get a list of all atoms in the universe of this type.
   These are the "candidate groundings".  Iterate over this list.
   The iterator is the next step below (step 5).

   [This step is implemented in PatternMatchEngine::match(), which
   calls PatternMatchEngine::do_candidate() for each candidate root.]

5) Initiate a recursive tree matching algorithm, comparing the
   incidence tree of the first clause to that rooted at the
   candidate grounding.

   First, the tree matching algo checks to see if the given
   node in the predicate is a variable; if so, then the match
   is considered to be successful. The node-match callback is 
   invoked to decide whether this grounding is to be accepted;
   if it is, then the corresponding node in the universe is 
    recorded as a grounding.

   If the clause itself is found in the universe, it is rejected.

   If the atom is a link, the link-match callback is invoked to 
   determine whether its an acceptable grounding.

   The tree matching algorithm recurses to subtrees; recursion
   is terminated when a mismatch is found.

   [This step is implemented in PatternMatchEngine::tree_compare().]

   After an entire clause has been grounded, another callback, the 
   clause-match callback, is called. This callback may reject the 
   grounding of the clause as a whole.

6) Assuming a single tree has been successfully matched in the previous
   step, the next step is to find a clause that has not yet been
   grounded.  This is done by examining the list of all nodes that are
   shared between the most recently grounded clause, looking for an
   unsolved clause.

   [This is implemented in PatternMatchEngine::get_next_unsolved_clause()]

7) If an unsolved tree is found, then tree-matching, as described in
   step 5), resumes. However, the tree matching resumes at the shared
   node of the ungrounded tree. The ungrounded tree is recursively walked
   upwards, towards its root, with a tree match attempted at every stage.

   The upwards recursion uses a stack to track state; this is required
   in the case of there being multiple possible matches to a tree:
   after finding one match, the stack may be popped to explore other
   possible matches.  Push and pop callbacks are provided, in case the
   callback also needs to maintain stack state.

   If the upwards recursion reaches the root of the predicate, the
   predicate is now considered to be solved. Go to step 6), to find
   other unsolved predicates.

   [This is implemented by two routines: PatternMatchEngine::soln_up()
   and PatternMatchEngine::pred_up(). These two routines alternate
   calls to each other, by traversing the *incoming* set of the
   current node in the clause, and the candidate solution node.
   The incoming set takes one "upwards" in the tree.]

   [The stack of current state is maintained in PatternMatchEngine::
   pred_handle_stack, etc. These are pushed as an upwards(incoming)
   edge is explored, and popped when the edge is rejected.]

   [Partial solutions are recorded in PatternMatchEngine::var_grounding
   and PatternMatchEngine::clause_grounding.  These partial solutions
   must also be kept on stack, as a failed match at a later stage means
   that backtracking must be done. Since the partial solutions are used
   to find unsolved predicates, care must be taken that the partial
   solution is correct after backtracking: i.e. they must be popped
   as failed matches are encountered.]

   Note that multiple solution graphs may overlap.  Thus, if the
   universe contains the statement: "John threw a ball and a rock."
   and the query is "What did John throw?", then there are two
   valid subgraph matches: "John threw a ball" and "John threw
   a rock".  Both of these solutions contain a common subgraph,
   "John threw...", which must be reachable, and reconsidered,
   after one solution is proposed. In particular, this implies
   that the partial solution state must also be kept on stack,
   so that the backtracking can be performed to find other,
   overlapping solutions.

8) If no ungrounded tree is found, then the matching is complete.
   The full grounding is reported via callback.  The callback may
   indicate that the search be terminated, or that it continue to
   find other possible solutions.

   In addition to a list of clauses that MUST be grounded, the algorithm
   accepts a list of clauses that need only be optionally grounded. The
   optional list is exactly that: if no grounding is found, that's OK,
   and a solution is still reported for the must-list. The optional
   list can be used to implement pattern-rejection: so, for example, 
   if a grounding for an optional clause is found, then the match as 
   as a whole can be rejected. This kind of pattern-rejection is 
   explicitly done with the crisp-boolean-logic callback.


Open Questions
--------------
In many ways, the above algorithm resembles that of a recursive descent
parser.  However, it does a *lot* of backtracking during its solution
search. It is throughly unclear as to whether the hypergraph
pattern-matching problem can be reformulated to resemble an LL(k)
grammar, so that linear-time predictive parsing techniques can be used.


Summary
-------
The above describes a specific implementation of a subgraph matching
algorithm. It is generic, in that it makes no reference to the
specifics of the actual data layout, or of node equivalences in the
data.  The only restriction made is that the input, query graph,
has been decomposed into a set of trees.

[On OpenCog, the entire implementation is in PatternMatchEngine.[h, .cc].]

Example Code
------------
The test/query directory contains several test cases checking on this
functionality. The BigPatternUTest test case is a small, simple, clear
example of using the simple forward chainer.


Ranking; Approximate matching; Crisp and Fuzzy Logic
----------------------------------------------------
The final decision on matching to a given query pattern is delegated
to a callback. This allows for considerable flexibility in controlling
matching for hypergraphs that represent crisp logic statements, or those
that use probalistic logic, or for ranking matches by quality.

Callbacks are provided to accept or reject individual node and link
groundings, and to accpt of reject the grounding of individual clauses.
In addition, the "optional clause" mechanism provides a means of 
pattern rejection. This can be done by specifying the pattern to be
rejected as "optional": thus, if it is not found, a solution is reported;
but if it is found, then the callback can reject the solution.
The callback is free to examine truth values, STI/LTI, etc. in 
accpeting or rejecting any given grounding.  Push and pop callbacks
are provided to help maintain state on a stack, to deal with partial
matches, if needed.

The "optional" mechanism can also be used to implement approximate
matching, by specifying the parts of the graph that would be "nice
to match", but not strictly required. 

Alternately, the ranking/acceptance/rejection of the solution subgraph
can be performed in a post-processing stage.  This may be an easier
approach for many cases.

At this time, two generic callbacks are provided:

*) The DefaultPatternMatchCB. This callback implements node and link
   match methods that accept only strict node/link matches, unless a
   node is of type VariableNode, in which case the match is also
   accepted. No effort is made to consult truth values or other atom
   properties to determine a match.

*) The CrispLogicPMCB. This callback implements a crisp boolean logic
   matching scheme. If a clause is matched, then the grounding must
   have a truth value of greater than 0.5 to be considered a match.
   By contrast, optional cluases must have a truth value of less than
   0.5 to be acceptable; optional clauses are interpreted as negations:
   they can be absent, or, if present, they must be false.


Forward Chainer
---------------
The PattnerMatch::imply() method implements a critical component for a
forward chainer: it is able to accept, as input, an ImplicationLink, and
return as output, a ListLink of the implicands. An ImplicationLink is
basically an IF ... THEN ... statement, expressed as an OpenCog hypergraph.

Properly, one writes "IF ... THEN ..." as "IF predicate THEN implicand". 
The predicate is presumed to contain VariableNodes, while the implicand
is a hypergraph making used of those VariableNodes.  The predicate is 
run through the pattern-matching engine. When groundings for the 
variables are found, then a hypegraph is created based on the implicand,
using the grounded values found.  Because there may be more than one
grounding, a ListLink of all grounded implicands is returned.

Thus, the PattnerMatch::imply() method can be used to implement a 
simple forward-chainer. For example, one may create a collection of
ImplicationLinks. Then, calling each in turn, from a loop, will cause
cause each to be evaluated. Thus, N iterations of the loop is equivalent
to chaining N levels deep.


Hypergraph Query Language (HQL)
-------------------------------
A "hypergraph query language" is a language that allows queries to be
expressed as strings. Given *any* way of writing down a hypergraph as
a string, a hypergraph query language can be trivially formed by adding
variables to the expression, in exactly the same way that one adds 
variables to logic predicates, lambda calculus, etc.  In order to feel 
comfortable to programmers, the query language should maintain the 
outward form of SQL, SPARQL, RQL, etc. 

So, for example, a hypergraph might be written as a list
of links, and their contents:

  <hypergraph> := { <link-type> <atom> <atom> ... <atom>.
                    <link-type> <atom> <atom> ... <atom>.
                    ...
                    <link-type> <atom> <atom> ... <atom>.
                  }
 
Here, <atom> is understood to refer to a specific, constant atom. 
Let ?var be a variable.  Then define <vatom> as

  <vatom> :=  <atom> | ?var

That is, a vatom is a constant atom, or a variable. A hypergraph 
with variables in it is then

  <v-hypergraph> := { <link-type> <vatom> <vatom> ... <vatom>.
                      <link-type> <vatom> <vatom> ... <vatom>.
                      ...
                      <link-type> <vatom> <vatom> ... <vatom>.
                    }

An HQL query, resembling the syntax used in SQL or SPARQL, is then

  SELECT ?var-a ?var-b ... ?var-z WHERE <v-hypergraph>;

So, for example, the hypergraph for 

    _subj(throw, John )
    _obj(throw, ball)

is somewhat complicated to write down, but vaguely resembles

    { ?x WORD_NODE John.
      ?y WORD_NODE throw.
      ?z WORD_NODE ball.
      RELEX_LINK _subj ?y ?x.
      RELEX_LINK _obj  ?y ?z.
    }

The query to determine what John threw would then be:

  SELECT ?item WHERE
    { ?x WORD_NODE John.
      ?y WORD_NODE throw.
      RELEX_LINK _subj ?y ?x.
      RELEX_LINK _obj  ?y ?item.
    }

There is currently no code that will actually parse such strings, and 
return the query results, although, in principle, writing such code
would not be hard.  In practice, its a little more subtle than that:
we've glossed over the idea that truth values could be queryable, or
that truth values would need to have some minimum/maximum value, or
that atom types could be queryable.  Also, the representation of RelEx
expressions in OpenCog is considerably more complicated than the above.

To overcome these difficulties, it is strongly suggested (would make
sense) to create the actual query language from within the scheme
bindings. This is because it is straight-forward, in scheme, to create
the "syntactic sugar" to hide RelEx intricacies, and hide many of the 
other nasty details, while keeping a nice and simple interface for the
user.

What is currently implemented is "English as a query language". That is,
queries are posed in English, such as "What did John throw?". These are
parsed by RelEx and turned into OpenCog hypergraphs with embedded query
variables (_$qVar) in them.  The code in this directory will process
these queries, and return values for _$qVar.

Thus, at least for RelEx-based queries, there is no need for HQL, as 
using the English language is (a lot) easier than writing a formal
HQL query.  In this sense, English is the "best" query language, and
it is supported. 

Foreach iterators
-----------------
The algorithm makes heavy use of "foreach" iterators to walk the
incoming and outgoing edges of an atom.  The "foreach" mechanism
has multiple advantages over other techniques, and it is important
to understand these.

On the other hand, given that this is C++ and not C, the correct
solution is almost surely to re-write the for-eachs as C++ iterators,
which offers the same advantages as foreach, but has a more mundane
programming paradigm.

A) The details of the Atom.h incoming and outgoing sets are abstracted.
   Thus, while the outgoing set uses std:vector, the incoming set uses
   a simple linked list. This detail is immaterial to the "foreach" user,
   as both look the same. The only requirement is that each edge is visited
   exactly once.

B) The foreach abstraction makes multi-threaded implementation,
   including mutex locking, much easier. In particular, the semantics
   of atomic locking of a foreach traversal is much simpler than complexity
   of trying to lock a naked linked list for read-only or read-write
   traversal.

C) The foreach abstraction can (and will) have performance that is
   equal to a for-loop iteration over an array or linked list. This
   is because, when the set to be iterated over is a simple list or
   array, the foreach iterator can be implemented as an inline function.
   Modern compilers are able to inline such functions correctly,
   and optimize the result, providing performance equivalent to
   a raw for-loop iteration.

D) The foreach abstraction allows complex iterators to be implemented.
   Thus, the foreach abstraction eliminates the data copying associated
   with naive "filters", and thus can offer superior space *and* time
   performance over filters. For example, consider a long linked list
   consisting of many types of atoms, and one wants to perform a certain
   operation only on a specific type of atom. Traditional "filters"
   would make a copy of the list, including only the desired atom
   types in the copied list. This requires significant overhead:
   nodes must be copied, iterated over, and then freed.  The foreach
   abstraction allows a zero-copy filter to be implemented: the
   callback is invoked only for those nodes that match the filter
   criteria.

 -------------------------- END OF FILE ------------------------
