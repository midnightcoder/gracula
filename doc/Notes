
              Miscellanous Design Notes
              -------------------------

Atom: Size: 2+2+ (7+arity)*(sizeof pointer) +1 = 40 Bytes min

Questions:
PredicateIndexStruct -- what does this do?


Things that need fixing:
------------------------

Raw linked lists
----------------
HandleEntry -- raw linked list:
 -- raw linked list provides maximal speed for traversal,
    but terrible locking semantics.
 -- foreach provides excellent locking semantics
 -- inlined foreach provides the best of both.
    (the inlined code makes for fast traversal)

Given that HandleEntry provides filtering is a 
strong indicator that raw traversal performance 
is not the issue. Ergo, this class needs a major 
overhaul.

Note also: using foreach with the BOOST lambda class
is particularly appealing, as it solves the named 
function problem.

Use of string cache
-------------------
Node documentation states:
"The string is not cloned inside Node's constructor so it should not be deleted. "

The standard solution to this problem is to use a string cache, which makes
sure that the there is only one copy of any given string in the system. This
save space, and also makes memory manageable.  So, for example:

  const char * name1 = gstr_cache_add("some string");
  const char * name2 = gstr_cache_add("some string");
  
Then name1 and name2 will point to the same thing. 
The memory can still be freed by calling gstr_cache_remove
twice -- so you get minimal space usage, and memory 
management safety.

glib provides a string cache primitive.
a string cache can be trivially implemented from a key-valye map,
e.g. from the Boost Property Map Library, bu setting key to value.

