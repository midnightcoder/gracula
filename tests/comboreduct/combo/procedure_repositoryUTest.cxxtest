#include <opencog/comboreduct/combo/procedure_repository.h>
#include <opencog/comboreduct/ant_combo_vocabulary/ant_combo_vocabulary.h>

using namespace ant_combo;

class ProcedureRepositoryUTest : public CxxTest::TestSuite {
public:

  void test_type_check() {
    std::stringstream ss;
    ss << "fact(1) := contin_if(0<(#1) *(#1 fact(+(#1 -1))) 1)" << std::endl;
    ss << "A_rec(1) := contin_if(0<(#1) B_rec(+(#1 -1)) 0)" << std::endl;
    ss << "B_rec(1) := contin_if(0<(#1) A_rec(*(#1 0.5)) 0)" << std::endl;

    procedure_repository pr;
    load_procedure_repository<ant_builtin_action, ant_perception, ant_action_symbol, ant_indefinite_object>(ss, pr, true);
    std::stringstream ss_exp;
    ss_exp << "A_rec(1) := contin_if(0<(#1) B_rec(+(#1 -1)) 0)  [->(contin contin) ]" << std::endl;
    ss_exp << "B_rec(1) := contin_if(0<(#1) A_rec(*(#1 0.5)) 0)  [->(contin contin) ]" << std::endl;
    ss_exp << "fact(1) := contin_if(0<(#1) *(#1 fact(+(#1 -1))) 1)  [->(contin contin) ]" << std::endl;
    std::stringstream ss_res;
    pr.toStream(ss_res, true);
    TS_ASSERT_EQUALS(ss_res.str(), ss_exp.str());
  }
};

