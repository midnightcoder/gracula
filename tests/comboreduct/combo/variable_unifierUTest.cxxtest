#include <opencog/comboreduct/combo/variable_unifier.h>
#include <stdio.h>

static std::string v1 = "pet";
static std::string v2 = "owner";
static std::string v3 = "food";
static std::string v4 = "water";


class variable_unifierUTest : public CxxTest::TestSuite
{
public:

    void test_constructor() {
        combo::variable_unifier vu;

        TS_ASSERT(vu.empty());

        vu.insert(v1);
        vu.insert(v2, true);
        vu.insert(v3, false);

        TS_ASSERT(!vu.empty());

        TS_ASSERT(vu.contains(v1));
        TS_ASSERT(vu.contains(v2));
        TS_ASSERT(vu.contains(v3));

        TS_ASSERT(vu.getVariableState(v1));
        TS_ASSERT(vu.getVariableState(v2));
        TS_ASSERT(!vu.getVariableState(v3));
    }

    void test_copy_constructor() {
        combo::variable_unifier vu;
        vu.insert(v1);
        vu.insert(v2, true);
        vu.insert(v3, false);

        combo::variable_unifier vu_copy(vu);

        TS_ASSERT(vu_copy.contains(v1));
        TS_ASSERT(vu_copy.contains(v2));
        TS_ASSERT(vu_copy.contains(v3));

        TS_ASSERT(vu.getVariableState(v1) == vu_copy.getVariableState(v1));
        TS_ASSERT(vu.getVariableState(v2) == vu_copy.getVariableState(v2));
        TS_ASSERT(vu.getVariableState(v3) == vu_copy.getVariableState(v3));

        vu_copy.setVariableState(v1, false);
        vu_copy.setVariableState(v2, false);
        vu_copy.setVariableState(v3, true);
        vu_copy.insert(v4, false);

        TS_ASSERT(vu.getVariableState(v1) != vu_copy.getVariableState(v1));
        TS_ASSERT(vu.getVariableState(v2) != vu_copy.getVariableState(v2));
        TS_ASSERT(vu.getVariableState(v3) != vu_copy.getVariableState(v3));

        TS_ASSERT(vu.size() != vu_copy.size());
    }

    void test_unify() {
        combo::variable_unifier vu;
        vu.insert(v1);
        vu.insert(v2, true);
        vu.insert(v3, false);

        combo::variable_unifier vu_other;
        vu_other.insert(v1, true);
        vu_other.insert(v2, false);
        vu_other.insert(v3, false);
        vu_other.setUpdated(true);

        vu.unify(combo::UNIFY_AND, vu_other);

        TS_ASSERT(vu.contains(v1));
        TS_ASSERT(vu.contains(v2));
        TS_ASSERT(vu.contains(v3));

        TS_ASSERT(vu.getVariableState(v1));
        TS_ASSERT(!vu.getVariableState(v2));
        TS_ASSERT(!vu.getVariableState(v3));

        combo::variable_unifier vu_other2;
        vu_other2.insert(v1, false);
        vu_other2.insert(v2, true);
        vu_other2.insert(v3, false);
        vu_other2.setUpdated(true);

        vu.unify(combo::UNIFY_OR, vu_other2);

        TS_ASSERT(vu.contains(v1));
        TS_ASSERT(vu.contains(v2));
        TS_ASSERT(vu.contains(v3));

        TS_ASSERT(vu.getVariableState(v1));
        TS_ASSERT(vu.getVariableState(v2));
        TS_ASSERT(!vu.getVariableState(v3));

        combo::variable_unifier vu_other3;
        vu_other3.insert(v1, false);
        vu_other3.insert(v2, true);
        vu_other3.insert(v3, true);
        vu_other3.setUpdated(true);

        vu.unify(combo::UNIFY_NOT, vu_other3);

        TS_ASSERT(vu.contains(v1));
        TS_ASSERT(vu.contains(v2));
        TS_ASSERT(vu.contains(v3));

        TS_ASSERT(vu.getVariableState(v1));
        TS_ASSERT(!vu.getVariableState(v2));
        TS_ASSERT(vu.getVariableState(v3));
    }
};
