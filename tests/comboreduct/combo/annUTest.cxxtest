#include <opencog/comboreduct/combo/vertex.h>
#include <opencog/comboreduct/combo/simple_nn.h>

using namespace combo;

class annUTest :  public CxxTest::TestSuite {
public:
   void test_ann()
   {
      ann ANN;

      ann_node* output = new ann_node(nodetype_output,0,NULL);
      ann_node* hidden = new ann_node(nodetype_hidden,1,NULL);
      ann_node* in1 = new ann_node(nodetype_input,2,NULL);
      ann_node* in2 = new ann_node(nodetype_input,3,hidden);
      
      ANN.add_node(output);
      ANN.add_node(hidden);
      ANN.add_node(in1);
      ANN.add_node(in2);

      ANN.add_connection(in1,hidden,1.0);
      ANN.add_connection(in2,hidden,-0.5);
      ANN.add_connection(hidden,output,1.0);

      TS_ASSERT_EQUALS(ANN.biggest_tag(),3);
      TS_ASSERT_EQUALS(ANN.find_tag(0),output);
      TS_ASSERT_EQUALS(ANN.find_tag(1),hidden);
      TS_ASSERT_EQUALS(ANN.find_tag(2),in1);
      TS_ASSERT_EQUALS(ANN.find_tag(3),in2);

      double input = 0.0;
      ANN.load_inputs(&input);

      TS_ASSERT_EQUALS(ANN.find_tag(2)->activation,0.0);
      TS_ASSERT_EQUALS(ANN.find_tag(3)->activation,0.0);

      TS_ASSERT_EQUALS(ANN.feedforward_depth(),2); 

      ANN.propagate();
      ANN.propagate();

      TS_ASSERT_DELTA(ANN.find_tag(0)->activation,0.62246,0.0001);
      TS_ASSERT_DELTA(ANN.find_tag(1)->activation,0.5,0.0001);
      
      input = 1.0;
      ANN.load_inputs(&input);

      ANN.propagate();
      ANN.propagate();
    
      TS_ASSERT_DELTA(ANN.find_tag(0)->activation,0.66356,0.0001);
      TS_ASSERT_DELTA(ANN.find_tag(1)->activation,0.67918,0.0001);

   }
};

