#include "util/mt19937ar.h"
#include "util/tree.h"

#include "comboreduct/combo/vertex.h"
#include "comboreduct/reduct/reduct.h"
#include "comboreduct/combo/eval.h"
#include "comboreduct/combo/action.h"
#include "comboreduct/reduct/action_rules.h"

using namespace reduct;
using namespace combo;
using namespace util;
using namespace std;

static opencog::MT19937RandGen rng(0);

class ActionReductUTest : public CxxTest::TestSuite {
public:

  std::string triboolToStr(boost::tribool t) {
    if(safe_bool(t))
      return "true";
    else if(safe_bool(!t))
      return "false";
    else return "undetermined";
  }

  //test_get_action_result
  void test_get_action_result() {
    {
      stringstream ss;
      ss << "and_seq(goto_obj(stick))";
      combo_tree tmp;
      ss >> tmp;
      boost::tribool res = get_action_result(tmp, combo_tree::iterator(tmp.begin()));
      std::cout << "TMP : " << tmp << " RES : " << triboolToStr(res) << std::endl;
      TS_ASSERT(boost::indeterminate(res));
    }
    {
      stringstream ss;
      ss << "and_seq(beg stretch)";
      combo_tree tmp;
      ss >> tmp;
      boost::tribool res = get_action_result(tmp, combo_tree::iterator(tmp.begin()));
      std::cout << "TMP : " << tmp << " RES : " << triboolToStr(res) << std::endl;
      TS_ASSERT(safe_bool(res));
    }
    {
      stringstream ss;
      ss << "action_while(goto_obj(stick))";
      combo_tree tmp;
      ss >> tmp;
      boost::tribool res = get_action_result(tmp, combo_tree::iterator(tmp.begin()));
      std::cout << "TMP : " << tmp << " RES : " << triboolToStr(res) << std::endl;
      TS_ASSERT(safe_bool(!res));
    }
    {
      stringstream ss;
      ss << "action_action_if(goto_obj(stick) beg stretch)";
      combo_tree tmp;
      ss >> tmp;
      boost::tribool res = get_action_result(tmp, combo_tree::iterator(tmp.begin()));
      std::cout << "TMP : " << tmp << " RES : " << triboolToStr(res) << std::endl;
      TS_ASSERT(boost::indeterminate(res));
    }
    {
      stringstream ss;
      ss << "and_seq(exec_seq(action_action_if(goto_obj(stick) beg stretch)) stretch)";
      combo_tree tmp;
      ss >> tmp;
      boost::tribool res = get_action_result(tmp, combo_tree::iterator(tmp.begin()));
      std::cout << "TMP : " << tmp << " RES : " << triboolToStr(res) << std::endl;
      TS_ASSERT(safe_bool(res));
    }
    {
      stringstream ss;
      ss << "or_seq(and_exec(action_action_if(goto_obj(stick) beg stretch)) goto_obj(stick))";
      combo_tree tmp;
      ss >> tmp;
      boost::tribool res = get_action_result(tmp, combo_tree::iterator(tmp.begin()));
      std::cout << "TMP : " << tmp << " RES : " << triboolToStr(res) << std::endl;
      TS_ASSERT(boost::indeterminate(res));
    }
    {
      stringstream ss;
      ss << "or_seq(goto_obj(stick) beg)";
      combo_tree tmp;
      ss >> tmp;
      boost::tribool res = get_action_result(tmp, combo_tree::iterator(tmp.begin()));
      std::cout << "TMP : " << tmp << " RES : " << triboolToStr(res) << std::endl;
      TS_ASSERT(safe_bool(res));
    }
    {
      stringstream ss;
      ss << "or_seq(goto_obj(stick) action_while(beg))";
      combo_tree tmp;
      ss >> tmp;
      boost::tribool res = get_action_result(tmp, combo_tree::iterator(tmp.begin()));
      std::cout << "TMP : " << tmp << " RES : " << triboolToStr(res) << std::endl;
      TS_ASSERT(boost::indeterminate(res));
    }
  }


  //test_simplify1 :
  //and_seq(#1 #2 and_seq(#3 or_seq(#4 #5 or_seq(#6 #7))))
  void test_simplify1() {
    string tree_str="and_seq(#1 #2 and_seq(#3 or_seq(#4 #5 or_seq(#6 #7 exec_seq(#8 #9 exec_seq(#10))))))";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);

    bool ct = is_well_formed(tr_type);

    TS_ASSERT(ct);

    int ca = contin_arity(tr_type);
    int s = sample_count(ca);

    RndNumTable rnt(s, ca, rng);

    try {
      mixed_action_table mt1(tr, rnt, tr_type, rng);
      action_reduce(tr);
      mixed_action_table mt2(tr, rnt, tr_type, rng);

      TS_ASSERT_EQUALS(mt1,mt2);
    }
    catch(EvalException& e) {
      TS_ASSERT(true);
    }
  }

  //test_simplify2 :
  //action_action_if(#1 #2 #2) -> and_seq(exec_seq(#1) #2)
  void test_simplify2() {
    string tree_str="action_action_if(#1 #2 #2)";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);

    bool ct = is_well_formed(tr_type);

    TS_ASSERT(ct);

    int ca = contin_arity(tr_type);
    int s = sample_count(ca);

    RndNumTable rnt(s, ca, rng);

    try {
      mixed_action_table mt1(tr, rnt, tr_type, rng);
      action_reduce(tr);
      mixed_action_table mt2(tr, rnt, tr_type, rng);

      TS_ASSERT_EQUALS(mt1,mt2);
    }
    catch(EvalException& e) {
      TS_ASSERT(true);
    }
  }

  //test_simplify3 :
  //and_seq(#1 #2 or_seq(#3 #4 failure exec_seq(#5 #6 failure success) #6 success)) -> and_seq(#1 #2 or_seq(#3 #4 failure exec_seq(#5 #6 failure success) #6 success))
  void test_simplify3() {
    string tree_str="and_seq(#1 #2 or_seq(#3 #4 failure exec_seq(#5 #6 failure success) #6 success))";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);

    bool ct = is_well_formed(tr_type);

    TS_ASSERT(ct);

    int ca = contin_arity(tr_type);
    int s = sample_count(ca);

    RndNumTable rnt(s, ca, rng);

    try {
      mixed_action_table mt1(tr, rnt, tr_type, rng);
      action_reduce(tr);
      mixed_action_table mt2(tr, rnt, tr_type, rng);

      TS_ASSERT_EQUALS(mt1,mt2);
    }
    catch(EvalException& e) {
      TS_ASSERT(true);
    }
  }

  //test_simplify4 :
  //and_seq(and_seq or_seq exec_seq) -> failure
  void test_simplify4() {
    string tree_str="and_seq(and_seq or_seq exec_seq)";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);

    bool ct = is_well_formed(tr_type);

    TS_ASSERT(ct);

    int ca = contin_arity(tr_type);
    int s = sample_count(ca);

    RndNumTable rnt(s, ca, rng);

    try {
      mixed_action_table mt1(tr, rnt, tr_type, rng);
      action_reduce(tr);
      mixed_action_table mt2(tr, rnt, tr_type, rng);

      TS_ASSERT_EQUALS(mt1,mt2);
    }
    catch(EvalException& e) {
      TS_ASSERT(true);
    }
  }

  //test_simplify5 :
  //action_if
  void test_simplify5() {
    string tree_str="exec_seq(action_if(true #1 #2) action_if(false #1 #2) action_if(#3 #1 #1))";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);

    bool ct = is_well_formed(tr_type);

    TS_ASSERT(ct);

    int ca = contin_arity(tr_type);
    int s = sample_count(ca);

    RndNumTable rnt(s, ca, rng);

    try {
      mixed_action_table mt1(tr, rnt, tr_type, rng);
      action_reduce(tr);
      mixed_action_table mt2(tr, rnt, tr_type, rng);

      TS_ASSERT_EQUALS(mt1,mt2);
    }
    catch(EvalException& e) {
      TS_ASSERT(true);
    }
  }

  //test_simplify6 :
  //reduce_action_action_if_always_succeeds
  void test_simplify6() {
    string tree_str="action_action_if(beg goto_obj(stick) stretch)";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_action_action_if_always_succeeds r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY6 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("and_seq(beg goto_obj(stick)) "));
  }

  //test_simplify7 :
  //reduce_action_action_if_always_fails
  void test_simplify7() {
    string tree_str="action_action_if(action_failure goto_obj(stick) stretch)";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_action_action_if_always_fails r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY7 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("exec_seq(action_failure stretch) "));
  }

  //test_simplify8 :
  //reduce_action_while_always_fails
  void test_simplify8() {
    string tree_str="action_while(action_failure)";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_action_while_always_fails r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY8 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("action_failure "));
  }

  //test_simplify9 :
  //reduce_boolean_while_depend_condition
  void test_simplify9() {
    {
      string tree_str="boolean_while(false beg)";
      stringstream ss(tree_str);
      combo_tree tr;
      ss >> tr;

      type_tree tr_type = infer_type_tree(tr);
      bool ct = is_well_formed(tr_type);
      TS_ASSERT(ct);

      reduce_boolean_while_depend_condition r;
      r(tr, combo_tree::iterator(tr.begin()));
      stringstream ss1;
      ss1 << tr;
      std::cout << "TEST_SIMPLIFY9.a : " << tr << std::endl;
      TS_ASSERT_EQUALS(ss1.str(), string("action_success "));
    }
    {
      string tree_str="boolean_while(true action_failure)";
      stringstream ss(tree_str);
      combo_tree tr;
      ss >> tr;

      type_tree tr_type = infer_type_tree(tr);
      bool ct = is_well_formed(tr_type);
      TS_ASSERT(ct);

      reduce_boolean_while_depend_condition r;
      r(tr, combo_tree::iterator(tr.begin()));
      stringstream ss1;
      ss1 << tr;
      std::cout << "TEST_SIMPLIFY9.b : " << tr << std::endl;
      TS_ASSERT_EQUALS(ss1.str(), string("action_failure "));
    }
  }

  //test_simplify10
  //reduce_sequential_and_always_fails
  void test_simplify10() {
    string tree_str="and_seq(beg action_failure stretch)";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_sequential_and_always_fails r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY10 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("and_seq(beg action_failure) "));
  }

  //test_simplify11
  //reduce_sequential_or_always_succeeds
  void test_simplify11() {
    string tree_str="or_seq(goto_obj(stick) beg stretch)";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_sequential_or_always_succeeds r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY11 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("or_seq(goto_obj(stick) beg) "));
  }

  //test_simplify12_a
  //reduce_repeat_out_action_while
  void test_simplify12_a() {
    string tree_str="and_seq(beg goto_obj(stick) action_while(and_seq(beg goto_obj(stick))))";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_repeat_out_action_while r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY12 A : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("and_seq(action_while(and_seq(beg goto_obj(stick)))) "));
  }

  //test_simplify12_b
  //reduce_repeat_out_action_while
  void test_simplify12_b() {
    string tree_str="and_seq(action_while(and_seq(goto_obj(stick))))";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_repeat_out_action_while r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY12 B : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("and_seq(action_while(and_seq(goto_obj(stick)))) "));
  }

  //test_simplify13
  //reduce_repeat_in_action_while
  void test_simplify13() {
    string tree_str="action_while(and_seq(beg goto_obj(stick) beg goto_obj(stick)))";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_repeat_in_action_while r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY13 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("action_while(and_seq(beg goto_obj(stick))) "));
  }

  //test_simplify14
  //reduce_action_boolean_if_sub_cond
  void test_simplify14() {
    string tree_str="action_boolean_if(near(stick tree) and_seq(action_boolean_if(near(stick tree) beg stretch)) and_seq(action_boolean_if(near(stick tree) sit goto_obj(stick))))";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_action_boolean_if_sub_cond r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY14 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("action_boolean_if(near(stick tree) and_seq(action_boolean_if(true beg stretch)) and_seq(action_boolean_if(false sit goto_obj(stick)))) "));
  }

  //test_simplify15
  //reduce_action_boolean_if_sub_cond
  void test_simplify15() {
    string tree_str="boolean_while(near(stick tree) and_seq(action_boolean_if(near(stick tree) beg stretch)))";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_boolean_while_sub_cond r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY15 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("boolean_while(near(stick tree) and_seq(action_boolean_if(true beg stretch))) "));
  }

  //test_simplify16
  //reduce_not_cond_action_boolean_if
  void test_simplify16() {
    string tree_str="action_boolean_if(not(near(stick tree)) bark wag)";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_not_cond_action_boolean_if r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY16 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("action_boolean_if(near(stick tree) wag bark) "));
  }

  //test_simplify17
  //reduce_double_action_not
  void test_simplify17() {
    string tree_str="action_not(action_not(wag))";
    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);
    bool ct = is_well_formed(tr_type);
    TS_ASSERT(ct);

    reduce_double_action_not r;
    r(tr, combo_tree::iterator(tr.begin()));
    stringstream ss1;
    ss1 << tr;
    std::cout << "TEST_SIMPLIFY17 : " << tr << std::endl;
    TS_ASSERT_EQUALS(ss1.str(), string("wag"));
  }

  //test_modular_arguments :
  //dummy_argument
  void test_modular_arguments() {
    string tree_str="and_seq(dummy_modular_action(4 40))";
    string tree_str_reduced="and_seq(dummy_modular_action(-2.28 -20)) ";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    action_reduce(tr);

    stringstream ssr;
    ssr << tr;

    // std::cout << "Obtained result : " << ssr.str() << std::endl; 
    // std::cout << "Expected result : " << tree_str_reduced << std::endl;

    TS_ASSERT_EQUALS(ssr.str(), tree_str_reduced);
  }


  //test_preconditions_checks :
  //precondition pair (grab, drop)
  void test_preconditions_checks1() {
    string tree_str="and_seq(or_seq(bark grab) or_seq(drop bark))";
    string tree_str_reduced="and_seq(or_seq(bark grab) or_seq(drop bark)) ";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    action_reduce(tr);

    stringstream ssr;
    ssr << tr;

    // std::cout << "Obtained result : " << ssr.str() << std::endl; 
    // std::cout << "Expected result : " << tree_str_reduced << std::endl;

    TS_ASSERT_EQUALS(ssr.str(), tree_str_reduced);
  }


  //test_preconditions_checks :
  //precondition pair (grab, drop)
  void test_preconditions_checks2() {
    string tree_str="and_seq(or_seq(bark bark) and_seq(drop bark))";
    string tree_str_reduced="and_seq(or_seq(bark bark) bark) ";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    action_reduce(tr);

    stringstream ssr;
    ssr << tr;

    // std::cout << "Obtained result : " << ssr.str() << std::endl; 
    // std::cout << "Expected result : " << tree_str_reduced << std::endl;

    TS_ASSERT_EQUALS(ssr.str(), tree_str_reduced);
  }

  //test_action_properties :
  //singleton class providing actions properties
  void test_action_properties() {
    using namespace builtin_action_properties;

   // checking arities 
    unsigned int total_number_of_arguments=0;
    unsigned int number_of_builtin_actions_descriptions = sizeof(bad)/sizeof(builtin_action_description);
    assert(number_of_builtin_actions_descriptions==(unsigned int)id::builtin_action_count);  // there must be entries for all actions 
    for(unsigned int i=0;i<number_of_builtin_actions_descriptions;i++) { 
      for(unsigned int j=0;j<i;j++) { 
        assert(bad[i].a!=bad[j].a);       // there must not be two entries for one action 
      }
      TS_ASSERT(bad[i].a<id::builtin_action_count);      // must be one of the defined builtin actions
      total_number_of_arguments+=bad[i].arity;      
    }
  }

};
