#include "util/tree.h"
#include "util/mt19937ar.h"

#include "comboreduct/combo/vertex.h"
#include "comboreduct/combo/type_tree.h"
#include "comboreduct/combo/eval.h"
#include "comboreduct/reduct/reduct.h"
#include "comboreduct/ant_combo_vocabulary/ant_combo_vocabulary.h"

using namespace reduct;
using namespace ant_combo;
using namespace opencog;
using namespace std;

static MT19937RandGen rng(0);

class PerceptionReductUTest : public CxxTest::TestSuite {
public:
  //test_simplify1 :
  //dummy_ultrametric
  void test_simplify1() {
    /*string tree_str="and(0<(+(dummy_ultrametric(#1 #3) 0.3)) 0<(+(dummy_ultrametric(#1 #2) 0.5)) 0<(+(dummy_ultrametric(#2 #3) 0.25)))";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    type_tree tr_type = infer_type_tree(tr);

    bool ct = is_well_formed(tr_type);

    TS_ASSERT(ct);

    int ca = contin_arity(tr_type);
    int s = sample_count(ca);

    RndNumTable rnt(s, ca, rng);

    try {
      mixed_action_table mt1(tr, rnt, tr_type, rng);
      perception_reduce(tr);
      mixed_action_table mt2(tr, rnt, tr_type, rng);

      TS_ASSERT_EQUALS(mt1,mt2);
    }
    catch(EvalException& e) {
      TS_ASSERT(true);
    }*/
    TS_ASSERT(true);
  }

  //test_simplify2 :
  //dummy_transitive
  void test_simplify2() {
    string tree_str="and(above(#1 #2) above(#2 #3) above(#3 #4) above(#1 #4))";

    stringstream ss(tree_str);
    combo_tree tr;
    ss >> tr;

    std::cout << "TR : " << tr << std::endl;

    type_tree tr_type = infer_type_tree(tr);

    std::cout << "TR_TYPE : " << tr_type << std::endl;

    bool ct = is_well_formed(tr_type);

    TS_ASSERT(ct);

    perception_reduce(tr);

    std::cout << "TR REDUCED : " << tr << std::endl;

    stringstream ss_reduced;
    ss_reduced << tr;
    
    TS_ASSERT_EQUALS(ss_reduced.str(),
                     "and(above(#1 #2) above(#2 #3) above(#3 #4) true) ");
    
  }

};
