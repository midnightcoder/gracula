/*
 * Copyright (C) 2008-2009 by Novamente LLC
 * Copyright (C) 2008 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/server/CogServer.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/util/Config.h>

#include <opencog/reasoning/pln/PLN.h>
#include <opencog/reasoning/pln/AtomSpaceWrapper.h>

#include <boost/assign/list_of.hpp>

using namespace std;
using namespace opencog;
using namespace opencog::pln;
using namespace boost::assign;

class TableGatherUTest :  public CxxTest::TestSuite {
private:

    AtomSpaceWrapper* asw;

public:

    TableGatherUTest() {
        try
        {
            config().load("pln-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }
        currentDebugLevel = config().get_int("PLN_LOG_LEVEL");

        logger().info("Initializing PLN test env...");

        // This access is required to initialise CogServer.
        CogServer& cogserver = static_cast<CogServer&>(server());

        logger().info("Creating AtomSpaceWrappers...");
        // This is also necessary to make sure that the ASW is initialized
        // at the right time.
        asw = GET_ASW;
    }

    void test_TableGather() {
        //add nodes of various types
        SimpleTruthValue n_tv(0.8, 10);
        pHandle n1_h = asw->addNode(CONCEPT_NODE, "c1", n_tv);
        pHandle n2_h = asw->addNode(NODE, "n2", n_tv);
        pHandle n3_h = asw->addNode(NUMBER_NODE, "3", n_tv);
        pHandle n4_h = asw->addNode(PREDICATE_NODE, "p4", n_tv);
        pHandle n5_h = asw->addNode(VARIABLE_NODE, "$n5", n_tv);
        pHandle n6_h = asw->addNode(NODE, "n6", n_tv);
        pHandle n7_h = asw->addNode(NODE, "n7", n_tv);
        pHandle n8_h = asw->addNode(NODE, "n8", n_tv);

        //add links of various types
        SimpleTruthValue l_tv(0.8, 10);
        pHandleSeq l1_hs = list_of(n2_h)(n1_h);
        pHandle l1_h = asw->addLink(MEMBER_LINK, l1_hs, l_tv);
        pHandleSeq l2_hs = list_of(n4_h)(n3_h);
        pHandle l2_h = asw->addLink(EVALUATION_LINK, l2_hs, l_tv);
        pHandleSeq l3_hs = list_of(n6_h)(n5_h);
        pHandle l3_h = asw->addLink(LINK, l3_hs, l_tv);
        pHandleSeq l4_hs = list_of(n8_h)(n7_h);
        pHandle l4_h = asw->addLink(LINK, l4_hs, l_tv);

        //test TableGather
        tree<Vertex> mp1(static_cast<pHandle>(MEMBER_LINK));
        TableGather table1(mp1, asw);
        tree<Vertex> mp2(static_cast<pHandle>(EVALUATION_LINK));
        TableGather table2(mp2, asw);
        tree<Vertex> mp3(static_cast<pHandle>(LINK));
        TableGather table3(mp3, asw);
        // it seems that the case below LINK(NODE VARIABLE_NODE) does not pass
        // TableGather because of NODE type
        // this can be rectified when TableGather is replaced by
        // Linas's Pattern Matcher
        //tree<Vertex> mp4(static_cast<pHandle>(LINK));
        //mp4.append_child(mp4.begin(), static_cast<pHandle>(NODE));
        //mp4.append_child(mp4.begin(), static_cast<pHandle>(VARIABLE_NODE));
        //TableGather table4(mp4, asw);

        cout << "test table1: " << table1.toString() << endl;

        cout << "test table2: " << table2.toString() << endl;

        cout << "test table3: " << table3.toString() << endl;

        //cout << "test table4: " << table4.toString() << endl;

        //check table1
        TS_ASSERT(table1.find(weak_atom<Vertex>(l1_h)) != table1.end());
        TS_ASSERT(table1.find(weak_atom<Vertex>(l2_h)) == table1.end());
        TS_ASSERT(table1.find(weak_atom<Vertex>(l3_h)) == table1.end());
        TS_ASSERT(table1.find(weak_atom<Vertex>(l4_h)) == table1.end());

        //check table2
        TS_ASSERT(table2.find(weak_atom<Vertex>(l1_h)) == table2.end());
        TS_ASSERT(table2.find(weak_atom<Vertex>(l2_h)) != table2.end());
        TS_ASSERT(table2.find(weak_atom<Vertex>(l3_h)) == table2.end());
        TS_ASSERT(table2.find(weak_atom<Vertex>(l4_h)) == table2.end());

        //check table3
        // The first two used to be ==, but TableGather was deliberately changed
        // to allow subtypes of Links.
        TS_ASSERT(table3.find(weak_atom<Vertex>(l1_h)) != table3.end());
        TS_ASSERT(table3.find(weak_atom<Vertex>(l2_h)) != table3.end());
        TS_ASSERT(table3.find(weak_atom<Vertex>(l3_h)) != table3.end());
        TS_ASSERT(table3.find(weak_atom<Vertex>(l4_h)) != table3.end());

        //check table4
        //TS_ASSERT(table3.find(weak_atom<Vertex>(l1_h)) != table3.end());
        //TS_ASSERT(table3.find(weak_atom<Vertex>(l2_h)) != table3.end());
        //TS_ASSERT(table3.find(weak_atom<Vertex>(l3_h)) == table3.end());
        //TS_ASSERT(table3.find(weak_atom<Vertex>(l4_h)) != table3.end());
    }
    
    void displayTableAndBindings(TableGather& table) {
        cout << "test table: " << table.toString() << endl;
        cout << table.size() << endl;
        foreach(BoundVertex bv, table) {
            // Loglevel -5 so it will certainly display. This is in a tacky fragment of the PLN log system, that works backward 
            printSubsts(bv, currentDebugLevel);
        }
    }
    
    // Test the bindings found by TableGather. Also tests the vtree system
    void testBindings() {
        SimpleTruthValue n_tv(0.8, 10);
        
        cout << "TEST BINDINGS" << endl;
        
        asw->reset();
        
        // Actual atom
        vtree a (mva((pHandle)INHERITANCE_LINK,
                mva(asw->addNode(CONCEPT_NODE, "A", n_tv)),
                mva(asw->addNode(CONCEPT_NODE, "B", n_tv))
                ));

        pHandle h = asw->addAtom(a, n_tv, false);

        // will be found
        vtree t0 (mva((pHandle)INHERITANCE_LINK,
                 mva(asw->addNode(FW_VARIABLE_NODE, "$1", n_tv)),
                 mva(asw->addNode(CONCEPT_NODE, "B", n_tv))
                 ));
                 
        vtree t1 (mva((pHandle)INHERITANCE_LINK,
                 mva(asw->addNode(CONCEPT_NODE, "A", n_tv)),
                 mva(asw->addNode(FW_VARIABLE_NODE, "$2", n_tv))
                 ));
        
        vtree t2 (mva((pHandle)INHERITANCE_LINK,
                 mva(asw->addNode(FW_VARIABLE_NODE, "$3", n_tv)),
                 mva(asw->addNode(FW_VARIABLE_NODE, "$4", n_tv))
                 ));
        
        // won't be found
        vtree t3 (mva((pHandle)IMPLICATION_LINK,
                 mva(asw->addNode(FW_VARIABLE_NODE, "$5", n_tv)),
                 mva(asw->addNode(FW_VARIABLE_NODE, "$6", n_tv))
                 ));
        
        TableGather table0(t0, asw);
        displayTableAndBindings(table0);
        TS_ASSERT(table0.find(BoundVertex(h)) != table0.end());
        
        TableGather table1(t1, asw);
        displayTableAndBindings(table1);
        TS_ASSERT(table1.find(BoundVertex(h)) != table1.end());

        TableGather table2(t2, asw);
        displayTableAndBindings(table2);
        TS_ASSERT(table2.find(BoundVertex(h)) != table2.end());
        
        TableGather table3(t3, asw);
        displayTableAndBindings(table3);
        TS_ASSERT(table3.find(BoundVertex(h)) == table3.end());        
        
        
        vtree t100;
        t100 = t3;
        
        Vertex v;
        v = *(t3.begin());
        
        BoundVertex bv(v, new std::map<pHandle, pHandle>);
        
        BoundVertex bv2 = bv;
    }
};
