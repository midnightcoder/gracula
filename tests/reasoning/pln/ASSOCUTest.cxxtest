/*
 * tests/reasoning/pln/ASSOCUTest.cxxtest
 *
 * Copyright (C) 2009 Novamente LLC
 * All Rights Reserved
 *
 * Author Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <algorithm>
#include <opencog/util/numeric.h>
#include <opencog/reasoning/pln/ASSOC.h>

using namespace opencog;
using namespace pln;

const strength_t null_s = 0;

const strength_t lion_mammal_s = 1;
const strength_t lion_carnivor_s = 1;
const strength_t lion_striped_s = 1;
const strength_t lion_predator_s = 1;
const strength_t lion_facingExtincion_s = 0.8;

const strength_t not_lion_mammal_s = 0.2;
const strength_t not_lion_carnivor_s = 0.1;
const strength_t not_lion_striped_s = 0.1;
const strength_t not_lion_predator_s = 0.3;
const strength_t not_lion_facingExtincion_s = 0.4;


class ASSOCUTest : public CxxTest::TestSuite {
private:
    AtomSpace* _as;
    AtomSpaceWrapper* _asw;
    pHandle _lion_h;
    pHandle _not_lion_h;

    pHandle _mammal_h;
    pHandle _carnivor_h;
    pHandle _striped_h;
    pHandle _predator_h;
    pHandle _facingExtincion_h;

    pHandle _subset_lion_mammal_h;
    pHandle _subset_lion_carnivor_h;
    pHandle _subset_lion_striped_h;
    pHandle _subset_lion_predator_h;
    pHandle _subset_lion_facingExtincion_h;

    pHandle _subset_not_lion_mammal_h;
    pHandle _subset_not_lion_carnivor_h;
    pHandle _subset_not_lion_striped_h;
    pHandle _subset_not_lion_predator_h;
    pHandle _subset_not_lion_facingExtincion_h;
public:
    ASSOCUTest() {

        //set flag to print only OC_ASSERT and other ERROR level logs on stdout
        opencog::logger().setPrintErrorLevelStdout();

        //instantiate the atom space
        _as = new AtomSpace;
        
        //instantiate the atom space wrapper
        _asw = static_cast<AtomSpaceWrapper*>(ASW(_as));
    
        //add concept and its negation
        _lion_h = _asw->addNode(CONCEPT_NODE, "Lion",
                                 TruthValue::DEFAULT_TV());
        _not_lion_h = _asw->addLink(NOT_LINK, _lion_h,
                                    TruthValue::DEFAULT_TV());

        //add super concepts
        _mammal_h = _asw->addNode(CONCEPT_NODE, "Mammal",
                                  TruthValue::DEFAULT_TV());
        _carnivor_h = _asw->addNode(CONCEPT_NODE, "Carnivor",
                                    TruthValue::DEFAULT_TV());
        _striped_h = _asw->addNode(CONCEPT_NODE, "Stiped",
                                   TruthValue::DEFAULT_TV());
        _predator_h = _asw->addNode(CONCEPT_NODE, "Predator",
                                    TruthValue::DEFAULT_TV());
        _facingExtincion_h = _asw->addNode(CONCEPT_NODE, "FacingExtincion",
                                           TruthValue::DEFAULT_TV());

        //add SubSet Lion X relationships
        _subset_lion_mammal_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _mammal_h,
                          SimpleTruthValue(lion_mammal_s, 1));
        _subset_lion_carnivor_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _carnivor_h,
                          SimpleTruthValue(lion_carnivor_s, 1));
        _subset_lion_striped_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _striped_h,
                          SimpleTruthValue(lion_striped_s, 1));
        _subset_lion_predator_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _predator_h,
                          SimpleTruthValue(lion_predator_s, 1));
        _subset_lion_facingExtincion_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _facingExtincion_h,
                          SimpleTruthValue(lion_facingExtincion_s, 1));
        //add SubSet NOT Lion X relationships
        _subset_not_lion_mammal_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _mammal_h,
                          SimpleTruthValue(not_lion_mammal_s, 1));
        _subset_not_lion_carnivor_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _carnivor_h,
                          SimpleTruthValue(not_lion_carnivor_s, 1));
        _subset_not_lion_striped_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _striped_h,
                      SimpleTruthValue(not_lion_striped_s, 1));
        _subset_not_lion_predator_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _predator_h,
                          SimpleTruthValue(not_lion_predator_s, 1));
        _subset_not_lion_facingExtincion_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _facingExtincion_h,
                          SimpleTruthValue(not_lion_facingExtincion_s, 1));
    }

    void testASSOC() {
        pHandle lion_ASSOC = CreateConceptASSOC(_asw, _lion_h);

        pHandle mem_mammal_lion = _asw->getHandle(MEMBER_LINK,
                                                  _mammal_h, lion_ASSOC);
        pHandle mem_carnivor_lion = _asw->getHandle(MEMBER_LINK,
                                                    _carnivor_h, lion_ASSOC);
        pHandle mem_striped_lion = _asw->getHandle(MEMBER_LINK,
                                                   _striped_h, lion_ASSOC);
        pHandle mem_predator_lion = _asw->getHandle(MEMBER_LINK,
                                                    _predator_h, lion_ASSOC);
        pHandle mem_facingExtincion_lion = _asw->getHandle(MEMBER_LINK,
                                                           _facingExtincion_h,
                                                           lion_ASSOC);

        // get the resulting strengths
        strength_t res_mammal_lion_s =
            _asw->getTV(mem_mammal_lion).getMean();
        strength_t res_carnivor_lion_s =
            _asw->getTV(mem_carnivor_lion).getMean();
        strength_t res_striped_lion_s =
            _asw->getTV(mem_striped_lion).getMean();
        strength_t res_predator_lion_s =
            _asw->getTV(mem_predator_lion).getMean();
        strength_t res_facingExtincion_lion_s =
            _asw->getTV(mem_facingExtincion_lion).getMean();

        // calculate their expected results
        strength_t expect_mammal_lion_s =
            std::max(lion_mammal_s - not_lion_mammal_s, null_s);
        strength_t expect_carnivor_lion_s =
            std::max(lion_carnivor_s - not_lion_carnivor_s, null_s);
        strength_t expect_striped_lion_s =
            std::max(lion_striped_s - not_lion_striped_s, null_s);
        strength_t expect_predator_lion_s =
            std::max(lion_predator_s - not_lion_predator_s, null_s);
        strength_t expect_facingExtincion_lion_s =
            std::max(lion_facingExtincion_s - not_lion_facingExtincion_s,
                     null_s);

        // compare the expected results and the actual results
        TS_ASSERT(isApproxEq(expect_mammal_lion_s, res_mammal_lion_s));
        TS_ASSERT(isApproxEq(expect_carnivor_lion_s, res_carnivor_lion_s));
        TS_ASSERT(isApproxEq(expect_striped_lion_s, res_striped_lion_s));
        TS_ASSERT(isApproxEq(expect_predator_lion_s, res_predator_lion_s));
        TS_ASSERT(isApproxEq(expect_facingExtincion_lion_s,
                             res_facingExtincion_lion_s));
    }
};
