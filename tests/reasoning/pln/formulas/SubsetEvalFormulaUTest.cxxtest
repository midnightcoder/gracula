/*
 * tests/reasoning/FormulaKitUTest.cxxtest
 *
 * Copyright (C) 2009 Novamente LLC
 * All Rights Reserved
 *
 * Author Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/reasoning/pln/formulas/Formulas.h>
#include <opencog/atomspace/TruthValue.h>
#include <algorithm>

#define TV_COUNT 5

#define SUB_S1 0.2f
#define SUB_S2 0.1f
#define SUB_S3 0.9f
#define SUB_S4 0.0f
#define SUB_S5 1.0f

#define SUPER_S1 0.1f
#define SUPER_S2 0.9f
#define SUPER_S3 1.0f
#define SUPER_S4 0.4f
#define SUPER_S5 0.5f

using namespace opencog;
using namespace pln;

class SubsetEvalFormulaUTest : public CxxTest::TestSuite {
private:
    TruthValue* TVsub[TV_COUNT];
    TruthValue* TVsuper[TV_COUNT];
public:
    SubsetEvalFormulaUTest() {
        TVsub[0] = new SimpleTruthValue(SUB_S1, 1);
        TVsub[1] = new SimpleTruthValue(SUB_S2, 1);
        TVsub[2] = new SimpleTruthValue(SUB_S3, 1);
        TVsub[3] = new SimpleTruthValue(SUB_S4, 1);
        TVsub[4] = new SimpleTruthValue(SUB_S5, 1);

        TVsuper[0] = new SimpleTruthValue(SUPER_S1, 1);
        TVsuper[1] = new SimpleTruthValue(SUPER_S2, 1);
        TVsuper[2] = new SimpleTruthValue(SUPER_S3, 1);
        TVsuper[3] = new SimpleTruthValue(SUPER_S4, 1);
        TVsuper[4] = new SimpleTruthValue(SUPER_S5, 1);
    }

    void testSubsetEvalFormula() {
        // compute manually subset SUB SUPER <s,c>
        // based on s = Sum_x min(SUB(x), SUPER(x) / Sum_x SUB(x)
        // and c = #SUB = # SUPER

        strength_t s =
            ( std::min(SUB_S1, SUPER_S1)
              + std::min(SUB_S2, SUPER_S2)
              + std::min(SUB_S3, SUPER_S3)
              + std::min(SUB_S4, SUPER_S4)
              + std::min(SUB_S5, SUPER_S5) )
            /
            (SUB_S1 + SUB_S2 + SUB_S3 + SUB_S4 + SUB_S5);

        count_t c = (count_t) TV_COUNT;

        //compute now the result using SubsetFormula
        SubsetEvalFormula subsetf;
        TruthValue* tv = subsetf.compute2(static_cast<TruthValue**>(TVsub),
                                          TV_COUNT,
                                          static_cast<TruthValue**>(TVsuper),
                                          TV_COUNT);

        //compare the 2 results

        std::cout << "tv->getMean() = " << tv->getMean() << std::endl;
        std::cout << "tv->getCount() = " << tv->getCount() << std::endl;
        std::cout << "s = " << s << std::endl;
        std::cout << "c = " << c << std::endl;
        
        TS_ASSERT(tv->getMean() == s);
        TS_ASSERT(tv->getCount() == c);
    }
};
