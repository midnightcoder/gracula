/*
 * tests/reasoning/IndefinitePLNFormulaUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Fabr√≠cio - 2007-01-08
 * Modified by Jared Wigmore <jared.wigmore@gmail.com> (2008),
 * incorporating many changes made by Cesar Marcondes (2008) in IndefiniteRuleTest.cc
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/reasoning/pln/formulas/Formulas.h>
#include <opencog/reasoning/pln/formulas/FormulasIndefinite.h>
#include <opencog/reasoning/pln/formulas/DeductionLookupTable.h>
#include <opencog/atomspace/utils.h>

#include <math.h>
#include <vector>

using namespace opencog::pln;
using namespace std; 

float bvalues[6]={0.5, 0.6, 0.7, 0.8, 0.9, 0.95};
float kvalues[9]={1.0f, 2.0f, 3.0f, 5.0f, 7.0f, 10.0f, 20.0f, 50.0f, 100.0f};

struct Bound{
    float L;
    float U;
    
    Bound(float l, float u) : L(l), U(u) {}
    Bound() : L(0.0f), U(0.0f) {}
};

class IndefinitePLNFormulasUTest :  public CxxTest::TestSuite {

public:

/*	void setUp() {
		initReferenceTime();
  }*/

  void tearDown(){
  }
  
  IndefiniteTruthValue* createTV(float l, float u){
  	return new IndefiniteTruthValue(l,u);
  }
  
  IndefiniteTruthValue* createTV(float l, float u, float b){
  		return new IndefiniteTruthValue(l,u,b);
  }
 
  void testInferenceTrailPaper(){
 
  	printf("*** Inference Trail Replication Test ***");
  	
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(10);
		
        IndefiniteTruthValue* TVin1 = createTV(0.0f,0.138f,0.8f);//inhib1 - A
		IndefiniteTruthValue* TVin0 = createTV(0.0f,0.168f,0.8f);//inhib - B
		IndefiniteTruthValue* TVin2 = createTV(0.0f,0.032f,0.8f);//inhib2 - C
		IndefiniteTruthValue* TVin10 = createTV(0.95f,1.0f,0.9f);//inh inhib1 inhib - AB
		IndefiniteTruthValue* TVin20 = createTV(0.95f,1.0f,0.9f);//inh inhib2 inhib - CB
// don't use IndefiniteSymmetricAbductionFormula - use a RuleGenerator
		
		//TruthValue* TV[5] = {TVin1, TVin0, TVin2, TVin10,TVin20};
//        TruthValue* TV[5] = {TVin1, TVin0, TVin2, TVin10,TVin20};
//		opencog::pln::IndefiniteSymmetricAbductionFormula fAbduction;
//        IndefiniteTruthValue* TVin12=(IndefiniteTruthValue*)(fAbduction.compute(TV,5));//Inh inhib1 inhib2
                
		RuleGenerator<AbductionRule, IndefiniteTruthValue> myCreator;
	    AbductionRule *a = myCreator.CreateRule(TVin1, TVin0, TVin2, TVin10,TVin20);
    	IndefiniteTruthValue* TVin12 = a->solve();//Inh inhib1 inhib2
		//TruthValue* TVin12=fAbduction.compute(TV,5);//Inh inhib1 inhib2
		
		printf("\nTVin12:\nL: %.5f - U: %.5f\n",TVin12->getL(),TVin12->getU());
		
		TruthValue* TVA = createTV(0.0, 0.168f,0.8f);
		
		IndefiniteTruthValue* TVin1A = createTV(0.95f,1.0f);
		TruthValue* TV1[1] = {TVin1A};
        opencog::pln::IndefiniteMem2InhFormula fMem2Inh;
		TVin1A=(IndefiniteTruthValue*)(fMem2Inh.compute(TV1,1));
		
/*		RuleGenerator<Mem2InhRule, IndefiniteTruthValue> myCreator2;
	    AbductionRule *m = myCreator2.CreateRule(TVin1A);
    	TVin1A = a->solve();*/
    	
		
		printf("\nTVin1A:\nL: %.5f - U: %.5f\n",TVin1A->getL(),TVin1A->getU());		
		
		TruthValue* TV2[3] = {TVin1, TVin2, TVin12};
        opencog::pln::IndefiniteSymmetricBayesFormula fBayes;
		IndefiniteTruthValue* TVin21=(IndefiniteTruthValue*)(fBayes.simpleCompute(TV2,3));//Inh inhib2 inhib1
		
//		RuleGenerator<BayesRule, IndefiniteTruthValue> myCreator3;
//	    BayesRule *b = myCreator3.CreateRule(TVin1, TVin2, TVin12);
//   	IndefiniteTruthValue* TVin21 = a->solve();//Inh inhib2 inhib1

		
		printf("\nTVin21:\nL: %.5f - U: %.5f\n",TVin21->getL(),TVin21->getU());		


		TruthValue* TV3[5] = {TVin2, TVin1, TVA, TVin21,TVin1A};
        opencog::pln::IndefiniteSymmetricDeductionFormula fDeduction;
		IndefiniteTruthValue* TVin2A=(IndefiniteTruthValue*)(fDeduction.compute(TV3,5));//Inh inhib2 A
					
		printf("\nTVin2A:\nL: %.5f - U: %.5f\n",TVin2A->getL(),TVin2A->getU());
					
//		TruthValue* TVA = createTV(0.0f,0.032f,0.8f);
//		TruthValue* TVC = createTV(0.0f,0.168f,0.8f);
//		TruthValue* TVAmem2inh = createTV(0.58f,0.60f);
//		TruthValue* TVCAmem2inh = createTV(0.313043f,0.513043f);
//		TruthValue* TVBAmem2inh = createTV(0.46666f,0.6f);

		TruthValue* TV4[1] = {TVin2A};
        opencog::pln::IndefiniteInh2MemFormula fInh2Mem;
		TVin2A=(IndefiniteTruthValue*)(fInh2Mem.compute(TV4,1));
		
		printf("\nTVin2A:\nL: %.5f - U: %.5f\n",TVin2A->getL(), TVin2A->getU());
		
		TruthValue* TVCausalEvent = createTV(0.0, 0.168f,0.8f);
		TruthValue* TVin0CausalEvent = createTV(0.95, 1.0f,0.9f);
		
		TruthValue* TV5[5] = {TVin2, TVin0, TVCausalEvent, TVin20,TVin0CausalEvent};
//		opencog::pln::IndefiniteSymmetricDeductionFormula fDeduction;
		IndefiniteTruthValue* TVin2CausalEvent=(IndefiniteTruthValue*)(fDeduction.compute(TV5,5));//Inh inhib2 causal_event
					
		printf("\nTVin2CausalEvent:\nL: %.5f - U: %.5f\n",TVin2CausalEvent->getL(),TVin2CausalEvent->getU());

		TruthValue* TVPrev = createTV(0.0, 0.044f,0.8f);
		TruthValue* TVPrev1 = createTV(0.0, 0.044f,0.8f);
		TruthValue* TVPrev1Prev = createTV(0.95, 1.0f,0.9f);
		TruthValue* TVPrevCausalEvent = createTV(0.95, 1.0f,0.9f);
		
		TruthValue* TV6[5] = {TVPrev1, TVPrev, TVCausalEvent, TVPrev1Prev, TVPrevCausalEvent};
//		opencog::pln::IndefiniteSymmetricDeductionFormula fDeduction;
		IndefiniteTruthValue* TVPrev1CausalEvent=(IndefiniteTruthValue*)(fDeduction.compute(TV6,5));//Inh Prev1 causal_event
					
		printf("\nTVPrev1CausalEvent:\nL: %.5f - U: %.5f\n",TVPrev1CausalEvent->getL(),TVPrev1CausalEvent->getU());
  }
  
  	void testSymmetricAndFormula() {
		
		printf("** AND Formula **\n");
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(10);
    	float LA=0.99f; float LB=0.99f;
    	float UA=1.0f; float UB=1.0f;
		float expectedL=0.984f;
		float expectedU=0.993f;
		float expectedMean=0.990f;
		float error=0.05;
		
	    IndefiniteTruthValue* TVa=createTV(LA,UA);
	    IndefiniteTruthValue* TVb=createTV(LB,UB);
	    IndefiniteTruthValue* result;

	    RuleGenerator<ConjunctionRule, IndefiniteTruthValue> myCreator;
	    ConjunctionRule *a = myCreator.CreateRule(TVa, TVb);
	    result = a->solve();
	    printf("\nResult:\nL: %.5f - U: %.5f\n",result->getL(),result->getU());
	    printf("Mean: %.3f\n",result->getMean());

		TS_ASSERT(result->getL() >= expectedL-error && result->getL() <= expectedL+error); 
		TS_ASSERT(result->getU() >= expectedU-error && result->getU() <= expectedU+error);
		TS_ASSERT(result->getMean() >= expectedMean-error && result->getMean() <= expectedMean+error);

	    printf("\n** AND Formula **");
	
	    float L2A=0.051668044685163f; float L2B=0.731203298626716f;
	    float U2A=0.264185905611042f; float U2B=0.997599605415954f;
	    
	    IndefiniteTruthValue* TV2a=createTV(L2A,U2A);
	    IndefiniteTruthValue* TV2b=createTV(L2B,U2B);
	    IndefiniteTruthValue* result2;

	    ConjunctionRule *a2 = myCreator.CreateRule(TV2a, TV2b);
	    result2 = a2->solve();
	    printf("\nResult:\nL: %.5f - U: %.5f\n",result2->getL(),result2->getU());
	    printf("Mean: %.3f\n",result2->getMean());
		
        //! @todo test on result2 as well
	}
  
  	void testSymmetricImplicationBreakdownFormula(){
		
		printf("** Implication Formula **\n");
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(10);
		float LA=0.99f;
		float LAB=0.99f;
		float UA=1.0f;
		float UAB=1.0f;
		float expectedL=0.97156f;
		float expectedU=0.99950f;
		float expectedMean=0.993f;
		float error=0.05;
		
	    IndefiniteTruthValue* TVa=createTV(LA,UA);
	    IndefiniteTruthValue* TVab=createTV(LAB,UAB);
	    IndefiniteTruthValue* result;

	    RuleGenerator<ImplicationRule, IndefiniteTruthValue> myCreator;
	    ImplicationRule *a = myCreator.CreateRule(TVa, TVab);
	    result = a->solve();
		
		printf("\nResult:\nL: %.5f - U: %.5f\n\n",result->getL(),result->getU());
		printf("Mean: %.3f\n\n",result->getMean());
		
		TS_ASSERT(result->getL() >= expectedL-error && result->getL() <= expectedL+error); 
		TS_ASSERT(result->getU() >= expectedU-error && result->getU() <= expectedU+error);
		TS_ASSERT(result->getMean() >= expectedMean-error && result->getMean() <= expectedMean+error);
		
		//return result;
		
	}
	
	void testSymmetricRevisionFormula(){
		printf("** Revision Formula **\n");
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(10);
		float LA=0.99f;
		float LB=0.99f;
		float UA=1.0f;
		float UB=1.0f;
		float expectedL=0.99017f;
		float expectedU=0.99860f;
		float expectedMean=0.995f;
		float error=0.05;
		
	    IndefiniteTruthValue* TVa=createTV(LA,UA);
	    IndefiniteTruthValue* TVb=createTV(LB,UB);
	    IndefiniteTruthValue* result;

	    RuleGenerator<RevisionRule, IndefiniteTruthValue> myCreator;
	    RevisionRule *a = myCreator.CreateRule(TVa, TVb);
	    result = a->solve();
		
		printf("\nResult:\nL: %.5f - U: %.5f\n\n",result->getL(),result->getU());
		printf("sD: %.3f\n\n",result->getMean());
		
		TS_ASSERT(result->getL() >= expectedL-error && result->getL() <= expectedL+error); 
		TS_ASSERT(result->getU() >= expectedU-error && result->getU() <= expectedU+error);
		TS_ASSERT(result->getMean() >= expectedMean-error && result->getMean() <= expectedMean+error);
		
	}	
	
	void testSymmetricBayesFormula(){
		
		printf("** Bayes Formula **\n");
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.8);
		IndefiniteTruthValue::setDefaultK(10);
		float LA=0.0f;
		float LC=0.0f;
		float LAC=0.0f;
		float UA=0.138f;
		float UC=0.032f;
		float UAC=0.17975f;		
		float expectedL=0.00078f;
		float expectedU=0.24815f;
		float expectedMean=0.113f;
		float error=0.05;
		
/*		TruthValue* TVA = createTV(0.476190f,0.571428f);//A
		TruthValue* TVC = createTV(0.380952f,0.571428f);//C
		TruthValue* TVAC = createTV(0.06f,0.14f);//AC
		TruthValue* TVRB = createTV(0.06,0.14f);
	*/
		
		IndefiniteTruthValue* TVa=createTV(LA,UA);			
	    IndefiniteTruthValue* TVc=createTV(LC,UC);
	    IndefiniteTruthValue* TVac=createTV(LAC,UAC);
	    IndefiniteTruthValue* result;

	    RuleGenerator<BayesRule, IndefiniteTruthValue> myCreator;
	    BayesRule *a = myCreator.CreateRule(TVa, TVc, TVac);
	    result = a->solve();
		
		printf("\nResult:\nL: %.5f - U: %.5f\n\n",result->getL(),result->getU());
		printf("Mean: %.3f\n\n",result->getMean());

		TS_ASSERT(result->getL() >= expectedL-error && result->getL() <= expectedL+error); 
		TS_ASSERT(result->getU() >= expectedU-error && result->getU() <= expectedU+error);
		TS_ASSERT(result->getMean() >= expectedMean-error && result->getMean() <= expectedMean+error);
	
		printf("\n");

		//return result;		
		
	}

  
  void testSymmetricAbductionFormula(){
		
		printf("** Abduction Formula **\n");
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(10);
		float LA=0.0f;
		float LB=0.0f;
		float LC=0.0f;
		float LAB=0.95f;
		float LCB=0.95f;
		float UA=0.138f;
		float UB=0.168f;
		float UC=0.032f;
		float UAB=1.0f;		
		float UCB=1.0f;
		float expectedL=0.00003f;
		float expectedU=0.16866f;
		float expectedMean=0.081f;
		float error=0.05;


		IndefiniteTruthValue* TVa = createTV(LA,UA);
		IndefiniteTruthValue* TVb = createTV(LB,UB);
		IndefiniteTruthValue* TVc = createTV(LC,UC);
		IndefiniteTruthValue* TVab = createTV(LAB,UAB);
		IndefiniteTruthValue* TVcb = createTV(LCB,UCB);

/****** Other premises - test may fail **********************/
/*		
		TruthValue* TVA = createTV(0.0f,0.138f,0.8f);
		TruthValue* TVB = createTV(0.0f,0.168f,0.8f);
		TruthValue* TVC = createTV(0.0f,0.032f,0.8f);
		TruthValue* TVAB = createTV(0.95f,1.0f,0.9f);
		TruthValue* TVCB = createTV(0.95f,1.0f,0.9f);
*/
/*************************************************************/

		TruthValue* TV[5] = {TVa, TVb, TVc, TVab,TVcb};
		
		RuleGenerator<AbductionRule, IndefiniteTruthValue> myCreator;
	    AbductionRule *a = myCreator.CreateRule(TVa, TVb, TVc, TVab, TVcb);
    	IndefiniteTruthValue* result = a->solve();
		
		printf("\nResult:\nL: %.5f - U: %.5f\n",result->getL(),result->getU());
		printf("Mean: %.3f\n\n",result->getMean());
//		printf("Time: %lu\n",time_end - time_start); 

		TS_ASSERT(result->getL() >= expectedL-error && result->getL() <= expectedL+error); 
		TS_ASSERT(result->getU() >= expectedU-error && result->getU() <= expectedU+error);
		TS_ASSERT(result->getMean() >= expectedMean-error && result->getMean() <= expectedMean+error);
  }
  
  	void testSymmetricDeductionFormula(){
		
		printf("** Deduction Formula **\n");
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(2);
//		opencog::pln::setSaveDeductionLookupTable(false);
//		opencog::pln::setUseDeductionLookupTable(false);
		
		//DeductionLookupTable::getInstance()->readTable();
		
		float LA=0.434783f;
		float LB=0.44f;
		float LC=0.44f;
		float LAB=0.313043f;
		float LBC=0.46666f;
		float UA=0.531739f;
		float UB=0.46f;
		float UC=0.74f;
		float UAB=0.513043f;		
		float UBC=0.6f;
		float expectedL=0.4502f;
		float expectedU=0.64767f;
		float expectedMean=0.549f;
		float error=0.5;//a lot of error because the lookup table precision


	    IndefiniteTruthValue* TVa=createTV(LA,UA);
	    IndefiniteTruthValue* TVb=createTV(LB,UB);
	    IndefiniteTruthValue* TVc=createTV(LC,UC);
	    IndefiniteTruthValue* TVab=createTV(LAB,UAB);
	    IndefiniteTruthValue* TVbc=createTV(LBC,UBC);
	    IndefiniteTruthValue* result;

	
/*****************************************************************************/
/* Other premises - tests may fail with them, unless one 
 * changes the expected values 
 */
/*	
		TruthValue* TVA = createTV(0.0f,0.032f,0.8f);
		TruthValue* TVB = createTV(0.0f,0.168f,0.8f);
		TruthValue* TVC = createTV(0.58f,0.60f);
		TruthValue* TVAB = createTV(0.313043f,0.513043f);
		TruthValue* TVBC = createTV(0.46666f,0.6f);
*/

/*		
		TruthValue* TVA = createTV(0.6f,0.7f,0.9f);
		TruthValue* TVB = createTV(0.5f,0.7f,0.9f);
		TruthValue* TVC = createTV(0.4f,0.6f,0.9f);
		TruthValue* TVAB = createTV(0.2f,0.3f,0.9f);
		TruthValue* TVBC = createTV(0.5f,0.7f,0.9f);
*/

/*
    TruthValue* TVA = createTV(0.1f,0.3f);
		TruthValue* TVB = createTV(0.1f,0.3f);
		TruthValue* TVC = createTV(0.1f,0.3f);
		TruthValue* TVAB = createTV(0.1f,0.3f);
		TruthValue* TVBC = createTV(0.1f,0.3f);
*/

//inconsistency teste
/*
  	TruthValue* TVA = createTV(0.0f,0.3f);
		TruthValue* TVB = createTV(0.7f,1.0f);
		TruthValue* TVC = createTV(0.0f,0.3f);
		TruthValue* TVAB = createTV(0.0f,0.3f);
		TruthValue* TVBC = createTV(0.7f,1.0f);
*/
/*****************************************************************************/
	    RuleGenerator<DeductionRule, IndefiniteTruthValue> myCreator;
	    DeductionRule *a = myCreator.CreateRule(TVa, TVb, TVc, TVab, TVbc);
	    result = a->solve();

		
		printf("\nResult:\nL: %.5f - U: %.5f\n",result->getL(),result->getU());
		printf("Mean: %.3f\n\n",result->getMean());
		printf("\n");

		TS_ASSERT(result->getL() >= expectedL-error && result->getL() <= expectedL+error); 
		TS_ASSERT(result->getU() >= expectedU-error && result->getU() <= expectedU+error);
		TS_ASSERT(result->getMean() >= expectedMean-error && result->getMean() <= expectedMean+error);
		
		//return result;
	}
  
  void testMem2InhFormula(){
  	printf("** Mem2Inh Formula **\n");
		
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(10);
		float LA=0.95f;
		float UA=1.0f;
		float expectedL=0.93750f;
		float expectedU=1.0f;
		float expectedMean=0.975f;
		float error=0.05;		
		
		TruthValue* TVA = createTV(LA,UA);
		
		TruthValue* TV[1] = {TVA};
        opencog::pln::IndefiniteMem2InhFormula fMem2Inh;

		IndefiniteTruthValue* result=(IndefiniteTruthValue*)(fMem2Inh.compute(TV,1));
		
		printf("\nResult:\nL: %.5f - U: %.5f\n",result->getL(),result->getU());
		printf("Mean: %.3f\n\n",result->getMean());

		TS_ASSERT(result->getL() >= expectedL-error && result->getL() <= expectedL+error); 
		TS_ASSERT(result->getU() >= expectedU-error && result->getU() <= expectedU+error);
		TS_ASSERT(result->getMean() >= expectedMean-error && result->getMean() <= expectedMean+error);
  }
  
	void ReadLookupTable(){
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(2.0);
        opencog::pln::setSaveDeductionLookupTable(false);
        opencog::pln::setUseDeductionLookupTable(true);
		DeductionLookupTable::getInstance()->readTable();
	}

	void LookupTablePrecision(){
		
		//para i=0.1 at√© 0.8
		//para j=i+0.1 at√© 0.9
		//create TVs
		//save lookup true
		//use lookup false
		//compute deduction
		//if result < 0.0 ou > 1.0, continue
		//save lookup false
		//use lookup true
		//compute deduction
		//compare results (accuracy) (abs)

		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(2);
		
		IndefiniteTruthValue* TVA;
		IndefiniteTruthValue* TVB;
		IndefiniteTruthValue* TVC;
		IndefiniteTruthValue* TVAB;
		IndefiniteTruthValue* TVBC;
		IndefiniteTruthValue* result;
		IndefiniteTruthValue* resultLookupTable;
		float default_b=0.9f;
		
		vector<float> results;
		
//		DeductionLookupTable::getInstance()->readTable();
//	float Ls[]={0.0f,0.1f,0.2f,0.3f,0.4f,0.5f,0.6f,0.7f,0.8f,0.9f};
//		float Us[]={0.1f,0.2f,0.3f,0.7f,0.5f,0.6f,0.7f,0.8f,0.9f,1.0f};

		float Ls[]={0.0001f,0.3001f,0.5001f,0.7001f};
		float Us[]={0.3001f,0.5001f,0.7001f,0.9999f};//100000 opcoes
		
		int size=4;

		bool useTable=false;

        opencog::pln::setSaveDeductionLookupTable(false);
        opencog::pln::setUseDeductionLookupTable(useTable);

		if(useTable)
			DeductionLookupTable::getInstance()->readTable();

		for(int i=0; i<size; i++)
		{
			for(int j=i; j<size; j++)
			{
				printf("[i,j]=[%.3f,%.3f]\n",Ls[i],Us[j]);
				TVA = createTV(Ls[i],Us[j],default_b);
				TVB = createTV(Ls[i],Us[j],default_b);
				TVC = createTV(Ls[i],Us[j],default_b);
				TVAB = createTV(Ls[i],Us[j],default_b);
				TVBC = createTV(Ls[i],Us[j],default_b);
							
				RuleGenerator<DeductionRule, IndefiniteTruthValue> myCreator;
	            DeductionRule *d = myCreator.CreateRule(TVA,TVB,TVC, TVAB, TVBC);
	            result = d->solve();

							
//				result=(IndefiniteTruthValue*)SymmetricDeductionFormula(TVA,TVB,TVC, TVAB, TVBC);
				printf("[%.5f, %.5f]\n",result->getL(),result->getU());
				printf("Result Mean= %.3f\n\n",result->getMean());
//				resultsLookupTable.push_back(resultLookupTable->getMean());
			}
		}

//		for(int k=0; k<results.size(); k++){
//				float accuracy=(1-((result->getMean()-resultLookupTable->getMean())/result->getMean()))*100;
//				printf("MeanResult = %.3f\n",results[k]);
//				printf("MeanResultLookup = %.3f\n",resultsLookupTable[k]);
//				printf("Accuracy = %.3f \%\n",accuracy);
//		}
				
	}
	
	void testCreateLookupTable(){
		IndefiniteTruthValue::setDefaultConfidenceLevel(0.9);
		IndefiniteTruthValue::setDefaultK(2.0);
		
//		DeductionLookupTable::getInstance()->readTable();		
		
		float default_b=0.9f;
		
        opencog::pln::setSaveDeductionLookupTable(true);
        opencog::pln::setUseDeductionLookupTable(false);
//		unsigned long time_start=getElapsedMillis();
		//DeductionLookupTable::getInstance()->readTable();
// Removed because that formula was removed (a new version of it is needed).
/*		opencog::pln::BuildLookuptTableIndefiniteSymmetricDeductionFormula fBuildLookupDeduction;
		fBuildLookupDeduction.compute();*/
//        unsigned long time_end=getElapsedMillis();
	}

    void testEvaluateDeductionLookupTable(){
        
    }
};
