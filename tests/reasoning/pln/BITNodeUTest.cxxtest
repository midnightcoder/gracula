/*
 * Copyright (C) 2009 Novamente LLC
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/Config.h>
#include <exception>

#include "opencog/reasoning/pln/PLN.h"
#include "opencog/reasoning/pln/BackInferenceTreeNode.h"
#include "opencog/reasoning/pln/rules/RuleProvider.h"

using namespace std;

class BITNodeUTest :  public CxxTest::TestSuite {

public:
    static BITNodeUTest* createSuite() { return new BITNodeUTest(); }
    static void destroySuite(BITNodeUTest* suite) { delete suite; }

    // A general root to use, since a lot of BIT functions require one
    BITNodeRoot* root;
    AtomSpaceWrapper* atw;
    meta fakeTarget;

    BITNodeUTest()
    {
        atw = (AtomSpaceWrapper*) ASW();
        config().set("PLN_LOG_LEVEL","20");
        currentDebugLevel = 20;
        config().set("PLN_PRINT_REAL_ATOMS","true");
    }

    ~BITNodeUTest()
    {
    }

    void setUp()
    {
        cout << "BITNodeUTest: Making fake target for BITNodeRoot" << endl;
        fakeTarget = meta(new vtree(
                mva((pHandle)INHERITANCE_LINK,
                    NewNode(FW_VARIABLE_NODE, "$X"),
                    NewNode(FW_VARIABLE_NODE, "$Y")
                )));
        cout << "BITNodeUTest: Making RuleProvider" << endl;
        RuleProvider *rp = new DefaultVariableRuleProvider();
        cout << "BITNodeUTest: Making BITNodeRoot" << endl;
        try {
        root = new BITNodeRoot(fakeTarget, rp);
        } catch (exception &e) {
            cout << e.what();

        }
        cout << "BITNodeUTest: setup complete." << endl;
    }
    
    void tearDown()
    {
        delete root;
    }

    void test_addNewParent()
    {
        uint argNumber = 0;
        BITNode b1;
        BITNode b2;
        bool result;
        // Should fail since b1 doesn't have a root
        TS_ASSERT(!b1.addNewParent(&b2, argNumber));
        // Try again with root set first
        b2.root = root;
        b2.addNewParent(root,0);
        // Look at root->users
        b1.root = root;
        TS_ASSERT(b1.addNewParent(&b2, argNumber));
        // Test it's been added to the set of parents
        TS_ASSERT(b1.parents.size() == 1);
        // Test that it has both b2 and the root as a user
        TS_ASSERT(root->users[&b1].size() == 2);
        // Test that it matches a similar link
        parent_link<BITNode> pLink(&b2, argNumber);
        TS_ASSERT(b1.parents.find(pLink) != b1.parents.end());
        // Check that it can't be re-added
        b1.addNewParent(&b2, argNumber);
        TS_ASSERT(b1.parents.size() == 1);
        // Check that a link with different arg slot can be added
        argNumber += 1;
        b1.addNewParent(&b2, argNumber);
        TS_ASSERT(b1.parents.size() == 2);
        //parent_link<BITNode> pLink(&b2, argNumber, template_binds);
    }
};

