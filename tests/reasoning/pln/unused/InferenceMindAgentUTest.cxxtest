#include <math.h>
#include <InferenceMindAgent.h>
#include <LinkPair.h>
#include <Node.h>
#include <Link.h>
#include <types.h>
#include <MindDBProxy.h>
#include <TLB.h>
#include <HandleEntry.h>
#include <TruthValue.h>
#include <FirstPTLTruthValue.h>
#include <AtomTableManagementAgent.h>
#include <utils.h>
#include <PTLFormulaeKit.h>
#define NL "\n"
#define TAB "\t"

class InferenceMindAgentUTest : public CxxTest::TestSuite{
    private:
    Node* atomA;
    Node* atomB1;
    Node* atomB2;
    Node* atomB3;
    Node* atomC;
    Handle hA;
    Handle hB1;
    Handle hB2;
    Handle hB3;
    Handle hC;
    Link* linkAB1;
    Link* linkAB2;
    Link* linkAB3;
    Link* linkB1C;
    Link* linkB2C;
    Link* linkCB3;

    public:

    InferenceMindAgentUTest(){
        currentDebugLevel = SHY;
        MindDBProxy::getInstance()->useATMAgent = false;
    }

    void setUp() {
        atomA  = new Node(CONCEPT_NODE, strdup("Node A"), new FirstPTLTruthValue(0.36,36.0));
        atomB1 = new Node(CONCEPT_NODE, strdup("Node B1"), new FirstPTLTruthValue(0.49,49.0));
        atomB2 = new Node(CONCEPT_NODE, strdup("Node B2"), new FirstPTLTruthValue(0.42,42.0));
        atomB3 = new Node(CONCEPT_NODE, strdup("Node B3"), new FirstPTLTruthValue(0.45,45.0));
        atomC  = new Node(CONCEPT_NODE, strdup("Node C"), new FirstPTLTruthValue(0.41,41.0));
        MindDBProxy::getInstance()->add(atomA);
        MindDBProxy::getInstance()->add(atomB1);
        MindDBProxy::getInstance()->add(atomB2);
        MindDBProxy::getInstance()->add(atomB3);
        MindDBProxy::getInstance()->add(atomC);
        hA = TLB::getHandle(atomA);
        hB1 = TLB::getHandle(atomB1);
        hB2 = TLB::getHandle(atomB2);
        hB3 = TLB::getHandle(atomB3);
        hC = TLB::getHandle(atomC);
        linkAB1 = (Link*) TLB::getAtom(createLink(INHERITANCE_LINK, hA, hB1, 0.5277778,36));
        linkAB2 = (Link*) TLB::getAtom(createLink(INHERITANCE_LINK, hA, hB2, 0.44444445,36));
        linkAB3 = (Link*) TLB::getAtom(createLink(INHERITANCE_LINK, hA, hB3, 0.5277778,36));
        linkB1C = (Link*) TLB::getAtom(createLink(INHERITANCE_LINK, hB1, hC, 0.42857143,49));
        linkB2C = (Link*) TLB::getAtom(createLink(INHERITANCE_LINK, hB2, hC, 0.42857143,42));
        linkCB3 = (Link*) TLB::getAtom(createLink(INHERITANCE_LINK, hC, hB3, 0.4390244,41));
        if (currentDebugLevel > LOCAL_DEBUG) cout << NL;
    }

    Handle createLink(int type, Handle h1, Handle h2, float s, float n){
        std::vector<Handle> outgoing(2);
        outgoing[0] = h1;
        outgoing[1] = h2;
        Link* link = new Link(type, outgoing);
        FirstPTLTruthValue* tv = new FirstPTLTruthValue(s,n);
        link->setTruthValue(tv);
        delete tv;
        Handle newLinkHandle = MindDBProxy::getInstance()->add(link);
        return newLinkHandle;
    }

    void tearDown() {
        MindDBProxy::getInstance()->clear();
    }

    void testNodes() {
        HandleEntry* nodes = MindDBProxy::getInstance()->getHandleSet(NODE, true);
        TS_ASSERT(nodes != NULL);
        TS_ASSERT_EQUALS(nodes->getSize(),5);
        for (; nodes != NULL; nodes = nodes->next) {
            Handle h = nodes->handle;
            Node* n = (Node*) TLB::getAtom(h);
            if (currentDebugLevel > LOCAL_DEBUG) cout << n->toString() << TAB;
            if (currentDebugLevel > LOCAL_DEBUG) cout << n->getTruthValue()->toString() << NL;
            TS_ASSERT(
                (n->equals(atomA))||
                (n->equals(atomB1))||
                (n->equals(atomB2))||
                (n->equals(atomB3))||
                (n->equals(atomC))
            );
        }
    }

    void testLinks() {
        HandleEntry* links = MindDBProxy::getInstance()->getHandleSet(LINK, true);
        TS_ASSERT(links != NULL);
        TS_ASSERT_EQUALS(links->getSize(),6);
        for (; links != NULL; links = links->next) {
            Handle h = links->handle;
            Link* link = (Link*) TLB::getAtom(h);
            if (currentDebugLevel > LOCAL_DEBUG) cout << link->toString() << TAB;
            if (currentDebugLevel > LOCAL_DEBUG) cout << link->getTruthValue()->toString() << NL;
            TS_ASSERT(
                (link->equals(linkAB1))||
                (link->equals(linkAB2))||
                (link->equals(linkAB3)) ||
                (link->equals(linkB1C))||
                (link->equals(linkB2C))||
                (link->equals(linkCB3))
            );
        }
    }

    void testCreateLink(){
        FirstPTLTruthValue* tv = new FirstPTLTruthValue (0.3888889,36);
        Link* link = InferenceMindAgent::createLink(SUBSET_LINK, hA,hC, tv);
        Handle h = TLB::getHandle(link);
        link = (Link*) TLB::getAtom(h);
        TS_ASSERT_EQUALS(link->getType(), SUBSET_LINK);
        TS_ASSERT(link->isSource(hA));
        TS_ASSERT(link->isTarget(hC));
        TS_ASSERT(isApproxEq(tv->getMean(),
                             link->getTruthValue()->getMean(),
                             0.001f));
        TS_ASSERT(isApproxEq(tv->getCount(),
                             link->getTruthValue()->getCount(),
                             0.001f));
        delete tv;

        FirstPTLTruthValue* nTv = new FirstPTLTruthValue (0.0,100);
        Link* revisedLink = InferenceMindAgent::createLink(SUBSET_LINK, hA,hC, nTv);
        TS_ASSERT_EQUALS(link->getType(), SUBSET_LINK);
        TS_ASSERT(revisedLink->isSource(hA));
        TS_ASSERT(revisedLink->isTarget(hC));
        TS_ASSERT(!isApproxEq(tv->getMean(),
                              revisedLink->getTruthValue()->getMean(),
                              0.001f));
        TS_ASSERT(isApproxEq(tv->getCount(),
                             revisedLink->getTruthValue()->getCount(),
                             0.001f));
    }

    void testFindInferenceLinkType(){
        Link* link = InferenceMindAgent::findInferenceLink(atomA, atomB1, SUBSET_LINK, false);
        TS_ASSERT(link == NULL);
    }

    void testFindInferenceLinkBasic(){

        Link* link = InferenceMindAgent::findInferenceLink(atomA, atomB1, INHERITANCE_LINK, false);
        Handle h = TLB::getHandle(link);
        link = (Link*) TLB::getAtom(h);
        TS_ASSERT(link != NULL);
        TS_ASSERT_EQUALS(link->getType(), INHERITANCE_LINK);
        TS_ASSERT(link->isSource(hA));
        TS_ASSERT(link->isTarget(hB1));
        TS_ASSERT(isApproxEq(linkAB1->getTruthValue()->getMean(),
                             link->getTruthValue()->getMean(),
                             0.001f));
        TS_ASSERT(isApproxEq(linkAB1->getTruthValue()->getCount(),
                             link->getTruthValue()->getCount(),
                             0.001f);
    }

    void testFindInferenceLinkBasicFailHandle(){
        Link* link = InferenceMindAgent::findInferenceLink(atomA, atomC, INHERITANCE_LINK, false);
        TS_ASSERT(link == NULL);
    }

    void testFindInferenceLinkBasicFailType(){
        Link* link = InferenceMindAgent::findInferenceLink(atomA, atomB1, SUBSET_LINK, false);
        TS_ASSERT(link == NULL);
    }


    void testFindInferenceLinkInversionOn(){
        Link* link = InferenceMindAgent::findInferenceLink(atomA, atomB1, INHERITANCE_LINK, true);
        Handle h = TLB::getHandle(link);
        link = (Link*) TLB::getAtom(h);
        TS_ASSERT(link != NULL);
        TS_ASSERT_EQUALS(link->getType(), INHERITANCE_LINK);
        TS_ASSERT(link->isSource(hA));
        TS_ASSERT(link->isTarget(hB1));
        TS_ASSERT(isApproxEq(linkAB1->getTruthValue()->getMean(),
                             link->getTruthValue()->getMean(),
                             0.001f));
        TS_ASSERT(isApproxEq(linkAB1->getTruthValue()->getCount(),
                             link->getTruthValue()->getCount(),
                             0.001f));
    }

    void testFindInferenceLinkWithInversion(){
        Link* link = InferenceMindAgent::findInferenceLink(atomB1, atomA, INHERITANCE_LINK, true);
        Handle h = TLB::getHandle(link);
        link = (Link*) TLB::getAtom(h);
        TS_ASSERT(link != NULL);
        TS_ASSERT_EQUALS(link->getType(), INHERITANCE_LINK);
        TS_ASSERT(link->isSource(hB1));
        TS_ASSERT(link->isTarget(hA));
        TruthValue* expected = new FirstPTLTruthValue(0.3877551,49);
        TS_ASSERT(isApproxEq(expected->getMean(),
                             link->getTruthValue()->getMean(),
                             0.01f));
        TS_ASSERT(isApproxEq(expected->getCount(),
                             link->getTruthValue()->getCount(),
                             0.01f));
        delete expected;
    }


    void testDeductLinkLinkBasic(){
        Link* link = InferenceMindAgent::deduct(linkAB1, linkB1C,
                                                atomA, atomB1, atomC, INHERITANCE_LINK);
        TS_ASSERT(link != NULL);
        TS_ASSERT_EQUALS(link->getType(), INHERITANCE_LINK);
        TS_ASSERT(link->isSource(hA));
        TS_ASSERT(link->isTarget(hC));
        TruthValue* expected = new FirstPTLTruthValue(0.3888889,36);
        TS_ASSERT(isApproxEq(expected->getMean(),
                             link->getTruthValue()->getMean(),
                             0.1f));
        TS_ASSERT(isApproxEq(expected->getCount(),
                             link->getTruthValue()->getCount(),
                             1.0f));
    }

    void testDeductLinkLinkFail(){
        Link* link = InferenceMindAgent::deduct(linkAB1, linkAB2,
                                                atomA, atomB1, atomB2, INHERITANCE_LINK);
        TS_ASSERT(link == NULL);
    }

    void testDeductionHandleHandleHandleBasic(){
        Link* link = InferenceMindAgent::deduct(hA, hB1, hC, INHERITANCE_LINK);
        TS_ASSERT(link != NULL);
        TS_ASSERT_EQUALS(link->getType(), INHERITANCE_LINK);
        TS_ASSERT(link->isSource(hA));
        TS_ASSERT(link->isTarget(hC));
        TruthValue* expected = new FirstPTLTruthValue(0.3888889,36);
        TS_ASSERT(isApproxEq(expected->getMean(),
                             link->getTruthValue()->getMean(),
                             0.1f));
        TS_ASSERT(isApproxEq(expected->getCount(),
                             link->getTruthValue()->getCount(),
                             1.0f));
    }

    void testDeductionHandleHandleHandleFailType(){
        Link* link = InferenceMindAgent::deduct(hA, hB1, hC, SUBSET_LINK);
        TS_ASSERT(link == NULL);
    }

    void testDeductionHandleHandleHandleFailHandle(){
        Link* link = InferenceMindAgent::deduct(hA, hC, hB3, INHERITANCE_LINK);
        TS_ASSERT(link == NULL);
    }

    void testDeductionHandleHandleBasic(){
        Link* link = InferenceMindAgent::deduct(hA, hC, INHERITANCE_LINK);
        TS_ASSERT(link != NULL);
        TS_ASSERT_EQUALS(link->getType(), INHERITANCE_LINK);
        TS_ASSERT(link->isSource(hA));
        TS_ASSERT(link->isTarget(hC));
        TruthValue* expected = new FirstPTLTruthValue(0.3888889,36);
        TS_ASSERT(isApproxEq(expected->getMean(),
                             link->getTruthValue()->getMean(),
                             0.05f));
        TS_ASSERT(isApproxEq(expected->getCount(),
                             link->getTruthValue()->getCount(),
                             1.0f);
    }

    void testDeductionHandleHandleFailType(){
        Link* link = InferenceMindAgent::deduct(hA, hC, SUBSET_LINK);
        TS_ASSERT(link == NULL);
    }

    void testDeductionHandleHandleFailHandle(){
        Link* link = InferenceMindAgent::deduct(hA, hB3, INHERITANCE_LINK);
        TS_ASSERT(link == NULL);
    }

    void testInversionBasic(){
        Link* link = InferenceMindAgent::invert(hC, hB3, INHERITANCE_LINK);
        TS_ASSERT(link != NULL);
        TS_ASSERT_EQUALS(link->getType(), INHERITANCE_LINK);
        TS_ASSERT(link->isSource(hB3));
        TS_ASSERT(link->isTarget(hC));
        TruthValue* expected = new FirstPTLTruthValue(0.4,45);
        TS_ASSERT(isApproxEq(expected->getMean(),
                             link->getTruthValue()->getMean(),
                             0.05f));
        TS_ASSERT(isApproxEq(expected->getCount(),
                             link->getTruthValue()->getCount(),
                             1.0f));
    }

    void testInversionFailType(){
        TS_ASSERT_EQUALS(hC, TLB::getHandle(atomC));
        TS_ASSERT_EQUALS(hB3, TLB::getHandle(atomB3));
        Link* link = InferenceMindAgent::invert(hC, hB3, SUBSET_LINK);
        TS_ASSERT(link == NULL);
    }


    void testInversionFailHandle(){
        Link* link = InferenceMindAgent::invert(hA, hC, INHERITANCE_LINK);
        TS_ASSERT(link == NULL);
    }

    void testDeductionUsingPairsHandleBasic(){
        InferenceMindAgent agent;
        Link* link = agent.deductUsingPairs(hA, INHERITANCE_LINK, CONCEPT_NODE);
        TS_ASSERT(link != NULL);
    }

    void testDeductionHandleBasic(){
        InferenceMindAgent agent;
        Link* link = agent.deduct(hA, INHERITANCE_LINK, INHERITANCE_LINK, CONCEPT_NODE);
        TS_ASSERT(link != NULL);
    }
};

