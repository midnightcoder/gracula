/*
 * Copyright (C) 2002-2007 Novamente LLC
 * Copyright (C) 2008-2009 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include "opencog/reasoning/pln/PLN.h"
#include "opencog/reasoning/pln/Testing.h"
#include "opencog/reasoning/pln/rules/Rules.h"

#include "opencog/reasoning/pln/AtomSpaceWrapper.h"
#include "opencog/reasoning/pln/BackInferenceTreeNode.h"
#include "opencog/reasoning/pln/ForwardChainer.h"

#include "opencog/reasoning/pln/rules/RuleApp.h"

#include <opencog/util/Config.h>
#include <opencog/util/exceptions.h>

// We must use the PROJECT_SOURCE_DIR var supplied by the CMake script to
// ensure we find the files whether or not we're building using a separate build
// dir
#define PLN_TEST_DIR PROJECT_SOURCE_DIR"/tests/reasoning/pln/"

using namespace test;
using namespace opencog::pln;
using namespace opencog;
using namespace std;

namespace test {
    extern int allTestsInferenceNodes;
    extern vector< vector<vector<int> > >  INstatsVT;
    extern vector<vector<int> > INstatsV;
    extern vector<int> INstats;
    extern FitnessEvaluatorT testFitnessEvaluator;
}

class ForwardChainingUTest :  public CxxTest::TestSuite {

private:
    AtomSpaceWrapper *asw;
    FILE *f;

    static const int TestRepeats = 1;
    int seed;
    int tempi; // temporature index
    // test repeat #
    int t;


    //! @todo have a setup method in PLNModule that is also used in PLNUTest
    void initPLNTests()
    {
        try
        {
            config().load("pln-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }

#if LOG_ON_FILE
        test::logfile=fopen("pln.log","wt");
        cout << "LOGGING TO FILE pln.log!\n";
#endif
        //assert(finger_print_test(*tests[0]) != finger_print_test(*tests[1]));

        // Get config settings from config file.
        // Don't tackily override them here.
        // config().set("PLN_LOG_LEVEL","2");
        // config().set("PLN_PRINT_REAL_ATOMS","true");
        //config().set("PLN_RECORD_TRAILS","true");

        //testFitnessEvaluator = BEST;
        //currentDebugLevel = -4;
        currentDebugLevel = config().get_int("PLN_LOG_LEVEL");
    }

public:

    static ForwardChainingUTest* createSuite() { return new ForwardChainingUTest(); }
    static void destroySuite(ForwardChainingUTest* suite) { delete suite; }

    ForwardChainingUTest()
    {
        // Initialize PLN test environment
        try {        
            logger().info("Initializing PLN test env...");

            f = fopen("results.txt","a");

            //currentDebugLevel=100;

            asw = GET_ASW;                                  
        }
        catch(std::string s) {
            logger().error("at root level while initializing.");
        }
        catch(PLNexception e)
        {
            logger().error("at root level while initializing.");
        }
        catch(...)
        {
            logger().error("Unknown exception at root level while initializing. ");
        }
        
        // Initialize PLN tests as such
        initPLNTests();

#ifdef HAVE_GUILE
        // Necessary if you use test data and/or targets in Scheme.
        logger().debug("Loading Scheme modules");
        config().set("SCM_PRELOAD",
                "opencog/scm/type_constructors.scm,"
                "opencog/scm/utilities.scm");
        // Blindly search a bunch of paths hoping to find the files
        // in one of them ...
        const char * paths[] = 
        {
                "./",
                "../",
                "../../",
                "../../../",
                "../../../..",
                NULL
        };
        cogserver().loadSCMModules(paths);
#endif

        allTestsInferenceNodes = 0;

        INstats.clear();

        t = 0;
    }
    
    ~ForwardChainingUTest()
    {
        // t = test repeat #
        // f = results.txt
        // TestRepeats
        
//        uint t = 0;
//        uint TestRepeats = 1;
    
        // some stats stuff
        INstatsV.push_back(INstats);
    
        INstatsV[t].push_back(allTestsInferenceNodes);
        INstatsVT.push_back(INstatsV);

        for (uint v=0; v < INstatsV[0].size(); v++)
        {
            fprintf(f, "\n");
            for (int t=0; t < ( (testFitnessEvaluator!=BEST) ? TestRepeats : 1); t++)
                fprintf(f, "%d ", INstatsV[t][v]);
        }

        fclose(f);
    }
    
    // test forward chainer on all targets defined as conf file
    void testSCMTargetsFC() {
        TS_ASSERT(runSCMTargets(PLN_TEST_DIR, false));
    }

};
