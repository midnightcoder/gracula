/*
 * tests/embodiment/Control/PerceptionActionInterface/ActionPlanUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Welter Luigi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/embodiment/Control/PerceptionActionInterface/ActionPlan.h>
#include <opencog/embodiment/Control/PerceptionActionInterface/PAIUtils.h>

using namespace PerceptionActionInterface;

#include <opencog/util/exceptions.h>
#include <opencog/util/StringManipulator.h>


class ActionPlanUTest :  public CxxTest::TestSuite
{

private:

public:
    ActionPlanUTest() {
    }

    ~ActionPlanUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testConstructor() {
        ActionPlan plan1("0");
        TS_ASSERT(plan1.getID() == "0");
        TS_ASSERT(plan1.size() == 0);
        ActionPlan plan2("999");
        TS_ASSERT(plan2.getID() == "999");
        TS_ASSERT(plan2.size() == 0);
    }

    void testAddAndGetAction() {
        ActionPlan plan("10");
        TS_ASSERT(plan.size() == 0);
        PetAction p1;
        TS_ASSERT(plan.addAction(p1) == 1);
        TS_ASSERT(plan.size() == 1);
        PetAction p2;
        TS_ASSERT(plan.addAction(p2) == 2);
        TS_ASSERT(plan.size() == 2);
        PetAction p3;
        TS_ASSERT(plan.addAction(p3) == 3);
        TS_ASSERT(plan.size() == 3);

        for (unsigned int i = 1; i <= plan.size(); i++) {
            const PetAction& p = plan.getAction(i);
            TS_ASSERT(p.getSequence() == i);
        }
    }

    void testGetPVPmessage() {

#define NUM_ACTIONS 5
        const char* expectedPVPMessages[NUM_ACTIONS+1] = {

            "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n"
            "<pet:action-plan xmlns:pet=\"http://proxy.esheepco.com/brain\" entity-id=\"0\" id=\"10\"/>\n"
            ,

            "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n"
            "<pet:action-plan xmlns:pet=\"http://proxy.esheepco.com/brain\" entity-id=\"1\" id=\"10\">\n"
            "\n"
            "  <action name=\"trickForFood\" sequence=\"1\"/>\n"
            "\n"
            "</pet:action-plan>\n"
            ,

            "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n"
            "<pet:action-plan xmlns:pet=\"http://proxy.esheepco.com/brain\" entity-id=\"2\" id=\"10\">\n"
            "\n"
            "  <action name=\"trickForFood\" sequence=\"1\"/>\n"
            "\n"
            "  <action name=\"walk\" sequence=\"2\">\n"
            "    <param name=\"target\" type=\"vector\">\n"
            "      <vector x=\"1.2\" y=\"1.3\" z=\"1.4\"/>\n"
            "    </param>\n"
            "    <param name=\"speed\" type=\"float\" value=\"10.5\"/>\n"
            "    <param name=\"rotate\" type=\"rotation\">\n"
            "      <rotation pitch=\"1.2\" roll=\"1.3\" yaw=\"1.4\"/>\n"
            "    </param>\n"
            "  </action>\n"
            "\n"
            "</pet:action-plan>\n"
            ,

            "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n"
            "<pet:action-plan xmlns:pet=\"http://proxy.esheepco.com/brain\" entity-id=\"3\" id=\"10\">\n"
            "\n"
            "  <action name=\"trickForFood\" sequence=\"1\"/>\n"
            "\n"
            "  <action name=\"walk\" sequence=\"2\">\n"
            "    <param name=\"target\" type=\"vector\">\n"
            "      <vector x=\"1.2\" y=\"1.3\" z=\"1.4\"/>\n"
            "    </param>\n"
            "    <param name=\"speed\" type=\"float\" value=\"10.5\"/>\n"
            "    <param name=\"rotate\" type=\"rotation\">\n"
            "      <rotation pitch=\"1.2\" roll=\"1.3\" yaw=\"1.4\"/>\n"
            "    </param>\n"
            "  </action>\n"
            "\n"
            "  <action name=\"bark\" sequence=\"3\"/>\n"
            "\n"
            "</pet:action-plan>\n"
            ,

            "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n"
            "<pet:action-plan xmlns:pet=\"http://proxy.esheepco.com/brain\" entity-id=\"4\" id=\"10\">\n"
            "\n"
            "  <action name=\"trickForFood\" sequence=\"1\"/>\n"
            "\n"
            "  <action name=\"walk\" sequence=\"2\">\n"
            "    <param name=\"target\" type=\"vector\">\n"
            "      <vector x=\"1.2\" y=\"1.3\" z=\"1.4\"/>\n"
            "    </param>\n"
            "    <param name=\"speed\" type=\"float\" value=\"10.5\"/>\n"
            "    <param name=\"rotate\" type=\"rotation\">\n"
            "      <rotation pitch=\"1.2\" roll=\"1.3\" yaw=\"1.4\"/>\n"
            "    </param>\n"
            "  </action>\n"
            "\n"
            "  <action name=\"bark\" sequence=\"3\"/>\n"
            "\n"
            "  <action name=\"eat\" sequence=\"4\">\n"
            "    <param name=\"object\" type=\"entity\">\n"
            "      <entity id=\"10\" type=\"pet\"/>\n"
            "    </param>\n"
            "  </action>\n"
            "\n"
            "</pet:action-plan>\n"
            ,

            "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n"
            "<pet:action-plan xmlns:pet=\"http://proxy.esheepco.com/brain\" entity-id=\"5\" id=\"10\">\n"
            "\n"
            "  <action name=\"trickForFood\" sequence=\"1\"/>\n"
            "\n"
            "  <action name=\"walk\" sequence=\"2\">\n"
            "    <param name=\"target\" type=\"vector\">\n"
            "      <vector x=\"1.2\" y=\"1.3\" z=\"1.4\"/>\n"
            "    </param>\n"
            "    <param name=\"speed\" type=\"float\" value=\"10.5\"/>\n"
            "    <param name=\"rotate\" type=\"rotation\">\n"
            "      <rotation pitch=\"1.2\" roll=\"1.3\" yaw=\"1.4\"/>\n"
            "    </param>\n"
            "  </action>\n"
            "\n"
            "  <action name=\"bark\" sequence=\"3\"/>\n"
            "\n"
            "  <action name=\"eat\" sequence=\"4\">\n"
            "    <param name=\"object\" type=\"entity\">\n"
            "      <entity id=\"10\" type=\"pet\"/>\n"
            "    </param>\n"
            "  </action>\n"
            "\n"
            "  <action name=\"fly\" sequence=\"5\">\n"
            "    <param name=\"target\" type=\"vector\">\n"
            "      <vector x=\"1.2\" y=\"1.3\" z=\"1.4\"/>\n"
            "    </param>\n"
            "    <param name=\"speed\" type=\"float\" value=\"10.5\"/>\n"
            "  </action>\n"
            "\n"
            "</pet:action-plan>\n"
        };

        //printf("%s\n", expectedPVPMessages[2]);

        PetAction actions[NUM_ACTIONS] =  {
            PetAction(ActionType::TRICK_FOR_FOOD()),
            PetAction(ActionType::WALK()),
            PetAction(ActionType::BARK()),
            PetAction(ActionType::EAT()),
            PetAction(ActionType::FLY())
        };

        // Add valid parameters to the actions
        actions[1].addParameter(ActionParameter("target", ActionParamType::VECTOR(), Vector(1.2, 1.3, 1.4)));
        actions[1].addParameter(ActionParameter("speed", ActionParamType::FLOAT(), "10.5"));
        actions[1].addParameter(ActionParameter("rotate", ActionParamType::ROTATION(), Rotation(1.2, 1.3, 1.4)));
        actions[3].addParameter(ActionParameter("object", ActionParamType::ENTITY(), Entity(PAIUtils::getInternalId("10"), "pet")));
        actions[4].addParameter(ActionParameter("target", ActionParamType::VECTOR(), Vector(1.2, 1.3, 1.4)));
        actions[4].addParameter(ActionParameter("speed", ActionParamType::FLOAT(), "10.5"));

        ActionPlan plan("10");

        for (int i = 0; i <= NUM_ACTIONS; i++) {
            string petId = PAIUtils::getInternalId(opencog::toString(i).c_str());
            cout << "Calling getPVPMessage(" << petId << ")" << endl;
            string pvpXml = plan.getPVPmessage(petId);
            if (strcmp(pvpXml.c_str(), expectedPVPMessages[i])) {
                cout << "Expected PVP message:" << endl << expectedPVPMessages[i] << endl;
                cout << "Got PVP message:" << endl << pvpXml << endl;
            }
            TS_ASSERT(!strcmp(pvpXml.c_str(), expectedPVPMessages[i]));
            if (i < NUM_ACTIONS) plan.addAction(actions[i]);
        }

        TS_ASSERT_THROWS(plan.addAction(PetAction(ActionType::JUMP_TOWARD())), opencog::InvalidParamException&); // jump requires 1 parameter
    }

    void testSize() {
        ActionPlan plan;
        TS_ASSERT(plan.size() == 0);
        plan.addAction(PetAction(ActionType::BARK()));
        TS_ASSERT(plan.size() == 1);
        plan.addAction(PetAction(ActionType::SIT()));
        TS_ASSERT(plan.size() == 2);
    }

    void testMarkAndCheckMarkMethods() {
        ActionPlan plan;
        plan.addAction(PetAction(ActionType::BARK()));
        plan.addAction(PetAction(ActionType::LOOK_UP_TURN_HEAD()));
        plan.addAction(PetAction(ActionType::SLEEP()));

        TS_ASSERT(!plan.isTried(1));
        TS_ASSERT(!plan.isTried(2));
        TS_ASSERT(!plan.isTried(3));
        TS_ASSERT(!plan.isDone(1));
        TS_ASSERT(!plan.isDone(2));
        TS_ASSERT(!plan.isDone(3));
        TS_ASSERT(!plan.isFailed(1));
        TS_ASSERT(!plan.isFailed(2));
        TS_ASSERT(!plan.isFailed(3));
        TS_ASSERT(!plan.isFinished());
        TS_ASSERT(!plan.hasFailed());

        plan.markAsTried(1);
        TS_ASSERT(plan.isTried(1));
        TS_ASSERT(!plan.isTried(2));
        TS_ASSERT(!plan.isTried(3));
        TS_ASSERT(!plan.isDone(1));
        TS_ASSERT(!plan.isDone(2));
        TS_ASSERT(!plan.isDone(3));
        TS_ASSERT(!plan.isFailed(1));
        TS_ASSERT(!plan.isFailed(2));
        TS_ASSERT(!plan.isFailed(3));
        TS_ASSERT(!plan.isFinished());
        TS_ASSERT(!plan.hasFailed());

        plan.markAsTried(2);
        plan.markAsTried(3);
        TS_ASSERT(plan.isTried(1));
        TS_ASSERT(plan.isTried(2));
        TS_ASSERT(plan.isTried(3));
        TS_ASSERT(!plan.isDone(1));
        TS_ASSERT(!plan.isDone(2));
        TS_ASSERT(!plan.isDone(3));
        TS_ASSERT(!plan.isFailed(1));
        TS_ASSERT(!plan.isFailed(2));
        TS_ASSERT(!plan.isFailed(3));
        TS_ASSERT(!plan.isFinished());
        TS_ASSERT(!plan.hasFailed());

        plan.markAsFailed(2);
        TS_ASSERT(plan.isTried(1));
        TS_ASSERT(plan.isTried(2));
        TS_ASSERT(plan.isTried(3));
        TS_ASSERT(!plan.isDone(1));
        TS_ASSERT(!plan.isDone(2));
        TS_ASSERT(!plan.isDone(3));
        TS_ASSERT(!plan.isFailed(1));
        TS_ASSERT(plan.isFailed(2));
        TS_ASSERT(!plan.isFailed(3));
        TS_ASSERT(!plan.isFinished());
        TS_ASSERT(plan.hasFailed());

        plan.markAsDone(1);
        TS_ASSERT(plan.isTried(1));
        TS_ASSERT(plan.isTried(2));
        TS_ASSERT(plan.isTried(3));
        TS_ASSERT(plan.isDone(1));
        TS_ASSERT(!plan.isDone(2));
        TS_ASSERT(!plan.isDone(3));
        TS_ASSERT(!plan.isFailed(1));
        TS_ASSERT(plan.isFailed(2));
        TS_ASSERT(!plan.isFailed(3));
        TS_ASSERT(!plan.isFinished());
        TS_ASSERT(plan.hasFailed());

        plan.markAsDone(3);
        TS_ASSERT(plan.isTried(1));
        TS_ASSERT(plan.isTried(2));
        TS_ASSERT(plan.isTried(3));
        TS_ASSERT(plan.isDone(1));
        TS_ASSERT(!plan.isDone(2));
        TS_ASSERT(plan.isDone(3));
        TS_ASSERT(!plan.isFailed(1));
        TS_ASSERT(plan.isFailed(2));
        TS_ASSERT(!plan.isFailed(3));
        TS_ASSERT(plan.isFinished());
        TS_ASSERT(plan.hasFailed());

        ActionPlan plan2;
        plan2.addAction(PetAction(ActionType::BARK()));
        plan2.addAction(PetAction(ActionType::LOOK_UP_TURN_HEAD()));
        plan2.addAction(PetAction(ActionType::SLEEP()));
        plan2.markAsDone(1);
        plan2.markAsDone(2);
        plan2.markAsDone(3);
        TS_ASSERT(plan2.isFinished());
        TS_ASSERT(!plan2.hasFailed());

    }

};
