/*
 * tests/embodiment/Control/Procedure/actionsComboInterpreterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Elvys Borges
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include "ComboInterpreterUTest.h"
#include <opencog/util/mt19937ar.h>
#include <opencog/embodiment/PetComboVocabulary/PetComboVocabulary.h>

using namespace PerceptionActionInterface;
using namespace PetCombo;
using namespace std;


class actionsComboInterpreterUTest :  public CxxTest::TestSuite , ComboInterpreterUTest
{

private:
    opencog::RandGen* rng;

public :

    actionsComboInterpreterUTest() {
        rng = new opencog::MT19937RandGen(0);

        logger().setPrintErrorLevelStdout();
    }

    ~actionsComboInterpreterUTest() {
        delete rng;
    }

    opencog::RandGen& getRandGen() {
        return *rng;
    }

    void testGotoObject() {
        std::string str("goto_obj(nearest_object 2)");
        printf("rng = %p\n", &rng);
        runProcedureInCombo(str, id::action_success);
    }

    void testFoodBowl() {
        std::string str("food_bowl");
        runProcedureInCombo(str, PAIUtils::getInternalId("Food"));

        str.assign("goto_obj(food_bowl 2)");
        runProcedureInCombo(str, id::action_success);
    }

    void testWaterBowl() {
        std::string str("water_bowl");
        runProcedureInCombo(str, PAIUtils::getInternalId("Water"));

        str.assign("goto_obj(water_bowl 2)");
        runProcedureInCombo(str, id::action_success);
    }

    void testGoNearObj() {
        std::string str("water_bowl");
        runProcedureInCombo(str, PAIUtils::getInternalId("Water"));

        str.assign("gonear_obj(water_bowl 4)");
        runProcedureInCombo(str, id::action_success);
    }

    void testPetHome() {
        std::string str("pet_home");
        runProcedureInCombo(str, PAIUtils::getInternalId("House"));

        str.assign("goto_obj(pet_home 2)");
        runProcedureInCombo(str, id::action_success);
    }

    void testFollow() {
        // target duration speed
        std::string str("follow(nearest_object 10 2)");
        runProcedureInCombo(str, id::action_success);
    }

    void testStepTowards() {
        std::string str("step_towards(nearest_object TOWARDS)");
        runProcedureInCombo(str, id::action_success);
    }

    void testStepBackward() {
        std::string str("step_backward");
        runProcedureInCombo(str, id::action_success);
    }

    void testStepForward() {
        std::string str("step_forward");
        runProcedureInCombo(str, id::action_success);
    }

    void testRandomStep() {
        std::string str("random_step");
        runProcedureInCombo(str, id::action_success);
    }

    void testRotateLeft() {
        std::string str("rotate_left");
        runProcedureInCombo(str, id::action_success);
    }

    void testRotateRight() {
        std::string str("rotate_right");
        runProcedureInCombo(str, id::action_success);
    }
    void testHeel() {
        std::string str("heel");
        runProcedureInCombo(str, id::action_success);
    }

    void testJumpUp() {
        std::string str("jump_up");
        runProcedureInCombo(str, id::action_success);
    }

    void testJumpTowards() {
        std::string str("jump_towards(nearest_object)");
        runProcedureInCombo(str, id::action_success);
    }

    void testTurnToFace() {
        std::string str("turn_to_face(nearest_avatar)");
        runProcedureInCombo(str, id::action_success);
    }

    void testGoBehindObj() {
        std::string str("water_bowl");
        runProcedureInCombo(str, PAIUtils::getInternalId("Water"));

        str.assign("gobehind_obj(water_bowl 2)");
        runProcedureInCombo(str, id::action_success);
    }

    void testGoBehind() {
        std::string str("go_behind(nearest_object nearest_avatar 2)");
        runProcedureInCombo(str, id::action_success);
    }



    void testGrab() {
        std::string str("grab(nearest_pickupable)");
        runProcedureInCombo(str, id::action_success);
    }

    void testGrabNearest() {
        std::string str("grab_nearest");
        //   runProcedureInCombo(str, id::action_success);
    }

    void testNudge_to() {
        std::string str("nudge_to(nearest_movable nearest_pee_place)");
        runProcedureInCombo(str, id::action_success);
    }

    void testDrop() {
        std::string str("drop");
        runProcedureInCombo(str, id::action_success);
    }

    void testSniff() {
        std::string str("sniff");
        runProcedureInCombo(str, id::action_success);
    }

    void testSniffAt() {
        std::string str("sniff_at(nearest_edible)");
        runProcedureInCombo(str, id::action_success);
    }

    void testSniffPetPart() {
        std::string str("sniff_pet_part(nearest_pet NOSE)");
        runProcedureInCombo(str, id::action_success);
    }

    void testSniffAvatarPart() {
        std::string str("sniff_avatar_part(nearest_avatar BUTT)");
        runProcedureInCombo(str, id::action_success);
    }

    void testEat() {
        std::string str("eat(nearest_edible)");
        runProcedureInCombo(str, id::action_success);
    }

    void testDrink() {
        std::string str("drink(nearest_drinkable)");
        runProcedureInCombo(str, id::action_success);
    }

    void testChew() {
        std::string str("chew(nearest_small)");
        runProcedureInCombo(str, id::action_success);
    }

    void testScratchOther() {
        std::string str("scratch_other(nearest_object)");
        runProcedureInCombo(str, id::action_success);
    }

    void testBeg() {
        std::string str("beg");
        runProcedureInCombo(str, id::action_success);
    }

    void testHideFace() {
        std::string str("hide_face");
        runProcedureInCombo(str, id::action_success);
    }

    void testLookUpTurnHead() {
        std::string str("look_up_turn_head");
        runProcedureInCombo(str, id::action_success);
    }

    void testSit() {
        std::string str("sit");
        runProcedureInCombo(str, id::action_success);
    }

    void testStretch() {
        std::string str("stretch");
        runProcedureInCombo(str, id::action_success);
    }

    void testRunInCircle() {
        std::string str("run_in_circle");
        runProcedureInCombo(str, id::action_success);
    }

    void testScratchSelf() {
        std::string str("scratch_self(NOSE)");
        runProcedureInCombo(str, id::action_success);
    }

    void testLieDown() {
        std::string str("lie_down");
        runProcedureInCombo(str, id::action_success);
    }

    void testrTickForFood() {
        std::string str("trick_for_food");
        runProcedureInCombo(str, id::action_success);
    }

    void testPee() {
        std::string str("pee");
        runProcedureInCombo(str, id::action_success);
    }

    void testPoo() {
        std::string str("poo");
        runProcedureInCombo(str, id::action_success);
    }

    void testBark() {
        std::string str("bark");
        runProcedureInCombo(str, id::action_success);
    }

    void testBarkAt() {
        std::string str("bark_at(nearest_pet)");
        runProcedureInCombo(str, id::action_success);
    }

    void testLick() {
        std::string str("lick");
        runProcedureInCombo(str, id::action_success);
    }

    void testLickAt() {
        std::string str("lick_at(nearest_edible)");
        runProcedureInCombo(str, id::action_success);
    }

    void testBelch() {
        std::string str("belch");
        runProcedureInCombo(str, id::action_success);
    }

    void testMoveHead() {
        std::string str("move_head(2 2 2)");
        runProcedureInCombo(str, id::action_success);
    }

    void testGrowl() {
        std::string str("growl");
        runProcedureInCombo(str, id::action_success);
    }

    void testGrowlAt() {
        std::string str("growl_at(nearest_pet)");
        runProcedureInCombo(str, id::action_success);
    }

    void testWhine() {
        std::string str("whine");
        runProcedureInCombo(str, id::action_success);
    }

    void testWhineAt() {
        std::string str("whine_at(nearest_avatar)");
        runProcedureInCombo(str, id::action_success);
    }

    void testFearfulPosture() {
        std::string str("fearful_posture");
        runProcedureInCombo(str, id::action_success);
    }

    void testClean() {
        std::string str("clean");
        runProcedureInCombo(str, id::action_success);
    }

    void testTapDance() {
        std::string str("tap_dance");
        runProcedureInCombo(str, id::action_success);
    }

    void testBareTeeth() {
        std::string str("bare_teeth");
        runProcedureInCombo(str, id::action_success);
    }

    void testBareTeethAt() {
        std::string str("bare_teeth_at(nearest_pet)");
        runProcedureInCombo(str, id::action_success);
    }

    void testPlayDead() {
        std::string str("play_dead");
        runProcedureInCombo(str, id::action_success);
    }

    void testVomit() {
        std::string str("vomit");
        runProcedureInCombo(str, id::action_success);
    }

    void testLeanRockDance() {
        std::string str("lean_rock_dance");
        runProcedureInCombo(str, id::action_success);
    }

    void testAnticipatePlay() {
        std::string str("anticipate_play");
        runProcedureInCombo(str, id::action_success);
    }

    void testBackFlip() {
        std::string str("back_flip");
        runProcedureInCombo(str, id::action_success);
    }

    void testMoveLeftEar() {
        std::string str("move_left_ear(PERK)");
        runProcedureInCombo(str, id::action_success);
    }

    void testMoveRightEar() {
        std::string str("move_right_ear(TWITCH)");
        runProcedureInCombo(str, id::action_success);
    }

    void testWidenEyes() {
        std::string str("widen_eyes");
        runProcedureInCombo(str, id::action_success);
    }

    void testShakeHead() {
        std::string str("shake_head");
        runProcedureInCombo(str, id::action_success);
    }

    void testSleep() {
        std::string str("sleep");
        runProcedureInCombo(str, id::action_success);
    }

    void testDream() {
        std::string str("dream(nearest_edible)");
        runProcedureInCombo(str, id::action_success);
    }

    void testWag() {
        std::string str("wag");
        runProcedureInCombo(str, id::action_success);
    }

    void testTailFlex() {
        std::string str("tail_flex(2)");
        runProcedureInCombo(str, id::action_success);
    }

};
