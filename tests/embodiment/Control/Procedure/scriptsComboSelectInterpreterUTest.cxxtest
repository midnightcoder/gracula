/*
 * tests/embodiment/Control/Procedure/scriptsComboSelectInterpreterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include "ComboSelectInterpreterUTest.h"
#include "util/mt19937ar.h"
#include "PetComboVocabulary.h"
#include "SimpleTruthValue.h"

#include "ComboProcedureRepository.h"
#include <fstream>
#include <iostream>


using namespace PerceptionActionInterface;
using namespace PetCombo;
using namespace std;
using namespace Procedure;

static std::string macku = "id_Macku";
static std::string stick = "id_Stick";
static std::string meat = "id_meat";
static std::string wynx = "id_Wynx";
static std::string milk = "id_milk";

class scriptsComboSelectInterpreterUTest :  public CxxTest::TestSuite , ComboSelectInterpreterUTest
{

private:

    opencog::RandGen* rng;

public :

    scriptsComboSelectInterpreterUTest() {

        rng = new opencog::MT19937RandGen(0);
        //load scripts

        string file_combo(PVP_XML_FILE_PATH "/scripts.combo");
        ifstream fin(file_combo.c_str());
        int n = cpr.loadFromStream(fin);
        cout << "loaded " << n << " combo functions from " << file_combo << std::endl;

        addFeelingsAndTraits();
    }

    ~scriptsComboSelectInterpreterUTest() {
        delete rng;
    }

    opencog::RandGen& getRandGen() {
        return *rng;
    }

    void addFeelingsAndTraits() {
        Handle pet = atomSpace->getHandle(PET_NODE, PAIUtils::getInternalId("Macku"));
        if (pet == Handle::UNDEFINED) {
            std::cout << "Not able to find Macku" << std::endl;
            return;
        }

        SimpleTruthValue tv(0.6, 1.0);
        SimpleTruthValue tv2(0.4, 1.0);

        // traits
        AtomSpaceUtil::setPredicateValue(*atomSpace, "curiosity", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "fearfulness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "playfulness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "excitability", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "friendliness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "aggressiveness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "appreciativeness", tv2, pet);

        // feelings
        AtomSpaceUtil::setPredicateValue(*atomSpace, "fear", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "love", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "hate", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "pride", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "anger", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "gratitude", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "happiness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "excitement", tv, pet);

        // add new one
        HandleSeq freqLink;
        freqLink.push_back(atomSpace->addNode(CONCEPT_NODE, "currentActionRepetition"));
        freqLink.push_back(atomSpace->addNode(NUMBER_NODE, "2"));

        atomSpace->addLink(FREQUENCY_LINK, freqLink);
    }

    void testWildCard() {
        combo::variable_unifier vu;
        vu.insert(wynx, true);
        vu.insert(milk, true);
        vu.insert(meat, true);
        vu.insert(stick, true);
        vu.insert(macku, true);

        combo::variable_unifier vu1(vu);
        combo::variable_unifier vu2(vu);
        combo::variable_unifier vu3(vu);

        std::string fname("firstScript");
        std::string sname("secondScript");

        std::string fcmd("is_pet(_*_)");
        std::string scmd("greater_than(get_fear(#1) 0.55)");
        Procedure::ComboProcedure cp1 = createComboProcedure(fname, 0, fcmd);
        Procedure::ComboProcedure cp2 = createComboProcedure(sname, 1, scmd);

        combo::variable_unifier vu_result;
        vu_result.insert(wynx, false);
        vu_result.insert(milk, false);
        vu_result.insert(meat, false);
        vu_result.insert(stick, false);
        vu_result.insert(macku, true);
        runProcedureInComboSelectWildCard(cp1, cp2, combo::id::logical_true, vu, vu_result);

        // ======================================================================
        fcmd.assign("and(is_pickupable(_*_) is_movable(_*_) is_small(_*_))");
        scmd.assign("not(is_edible(#1))");
        cp1 = createComboProcedure(fname, 0, fcmd);
        cp2 = createComboProcedure(sname, 1, scmd);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, true);
        vu_result.setVariableState(macku, false);
        runProcedureInComboSelectWildCard(cp1, cp2, combo::id::logical_true, vu1, vu_result);

        //===================================================================
        fcmd.assign("and(is_pickupable(_*_) is_movable(_*_) is_small(_*_))");
        scmd.assign("is_edible(#1)");
        cp1 = createComboProcedure(fname, 0, fcmd);
        cp2 = createComboProcedure(sname, 1, scmd);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, false);
        runProcedureInComboSelectWildCard(cp1, cp2, combo::id::logical_false, vu2, vu_result);

        //===================================================================
        fcmd.assign("and(is_drinkable(_*_) near(_*_ meat))");
        scmd.assign("is_edible(#1)");
        cp1 = createComboProcedure(fname, 0, fcmd);
        cp2 = createComboProcedure(sname, 1, scmd);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, false);
        runProcedureInComboSelectWildCard(cp1, cp2, combo::id::logical_false, vu3, vu_result);

    }
};
