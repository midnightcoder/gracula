/*
 * tests/embodiment/Control/Procedure/ComboSelectProcedureRepositoryUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include "ComboSelectProcedureRepository.h"
#include <sstream>
#include <fstream>
#include <iostream>
#include "utils.h"
#include "PetComboVocabulary.h"

using namespace Procedure;
using namespace PetCombo;
using namespace std;

#define NUMBER_OF_COMBO_TREES 2
const char* comboSelNames[NUMBER_OF_COMBO_TREES] = {"first", "second"};
const char* comboFirstNames[NUMBER_OF_COMBO_TREES]  = {"fearful", "eatToKill"};
const char* comboSecondNames[NUMBER_OF_COMBO_TREES] = {"drinkNearest", "barkGrowl"};
const char* comboFirstBodies[NUMBER_OF_COMBO_TREES]  = {"and(is_fearful(self) not(next(self owner)) not(is_excited(self)))",
        "or(is_hungry(self) not(near(self nearest_edible)) has_energy(self))"
                                                       };
const char* comboSecondBodies[NUMBER_OF_COMBO_TREES] = {"and_seq(goto(nearest_drinkable) drink)", "and_seq(bark growl bark)"};

class ComboSelectProcedureRepositoryUTest :  public CxxTest::TestSuite
{

private:
    combo_tree firstTrees[NUMBER_OF_COMBO_TREES];
    combo_tree secondTrees[NUMBER_OF_COMBO_TREES];
    ComboProcedureRepository comboRepository;

public:
    ComboSelectProcedureRepositoryUTest() {
        for (int i = 0; i < NUMBER_OF_COMBO_TREES; i++) {
            stringstream ss1(comboFirstBodies[i]);
            ss1 >> firstTrees[i];

            stringstream ss2(comboSecondBodies[i]);
            ss2 >> secondTrees[i];
        }
    }

    ~ComboSelectProcedureRepositoryUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }


    void testSetGetContains() {
        ComboSelectProcedureRepository rep(comboRepository);

        for (int i = 0; i < NUMBER_OF_COMBO_TREES; i++) {
            for (int j = 0; j < NUMBER_OF_COMBO_TREES; j++) {
                TS_ASSERT((j < i) ? rep.contains(comboSelNames[j]) : !rep.contains(comboSelNames[j]));
            }
            std::string name(comboSelNames[i]);
            std::string firstName(comboFirstNames[i]);
            std::string secondName(comboSecondNames[i]);

            rep.add(ComboSelectProcedure(name,
                                         ComboProcedure(firstName, 0, firstTrees[i]),
                                         ComboProcedure(secondName, 0, secondTrees[i])));

            TS_ASSERT(rep.contains(comboSelNames[i]));
            TS_ASSERT(comboRepository.contains(comboFirstNames[i]));
            TS_ASSERT(comboRepository.contains(comboSecondNames[i]));

            for (int j = 0; j <= i; j++) {
                combo_tree tr1 = rep.get(comboSelNames[j]).getFirstScript().getComboTree();
                combo_tree tr2 = rep.get(comboSelNames[j]).getSecondScript().getComboTree();

                TS_ASSERT(tr1 == firstTrees[j]);
                TS_ASSERT(tr2 == secondTrees[j]);

            }
        }
    }

    void testGetId() {
        ComboSelectProcedureRepository rep(comboRepository);
        TS_ASSERT(!strcmp(rep.getId(), "ComboSelectProcedureRepository"));
    }

    void testClear() {
        ComboSelectProcedureRepository rep(comboRepository);
        for (int i = 0; i < NUMBER_OF_COMBO_TREES; i++) {
            std::string name(comboSelNames[i]);
            std::string firstName(comboFirstNames[i]);
            std::string secondName(comboSecondNames[i]);

            rep.add(ComboSelectProcedure(name,
                                         ComboProcedure(firstName, 0, firstTrees[i]),
                                         ComboProcedure(secondName, 0, secondTrees[i])));

            TS_ASSERT(rep.contains(comboSelNames[i]));
            TS_ASSERT(comboRepository.contains(comboFirstNames[i]));
            TS_ASSERT(comboRepository.contains(comboSecondNames[i]));
        }
        rep.clear();
        for (int i = 0; i < NUMBER_OF_COMBO_TREES; i++) {

            TS_ASSERT(!rep.contains(comboSelNames[i]));

            // ComboSelect clear do not clear combo repository
            TS_ASSERT(comboRepository.contains(comboFirstNames[i]));
            TS_ASSERT(comboRepository.contains(comboSecondNames[i]));

        }
    }

#define DUMP_FILE_NAME "_combo_select_repo_temp.dump_"

    void testSaveLoadRepository() {
        ComboSelectProcedureRepository rep1(comboRepository);
        for (int i = 0; i < NUMBER_OF_COMBO_TREES; i++) {
            std::string name(comboSelNames[i]);
            std::string firstName(comboFirstNames[i]);
            std::string secondName(comboSecondNames[i]);

            rep1.add(ComboSelectProcedure(name,
                                          ComboProcedure(firstName, 0, firstTrees[i]),
                                          ComboProcedure(secondName, 0, secondTrees[i])));
        }
        FILE* file = fopen(DUMP_FILE_NAME, "wb");
        TS_ASSERT(file);
        rep1.saveRepository(file);
        fclose(file);

        HandleMap handles;
        ComboSelectProcedureRepository rep2(comboRepository);
        file = fopen(DUMP_FILE_NAME, "rb");
        TS_ASSERT(file);
        rep2.loadRepository(file, &handles);
        for (int i = 0; i < NUMBER_OF_COMBO_TREES; i++) {
            TS_ASSERT(rep2.contains(comboSelNames[i]));
            TS_ASSERT(comboRepository.contains(comboFirstNames[i]));
            TS_ASSERT(comboRepository.contains(comboSecondNames[i]));

            combo_tree tr1 = rep2.get(comboSelNames[i]).getFirstScript().getComboTree();
            combo_tree tr2 = rep2.get(comboSelNames[i]).getSecondScript().getComboTree();

            TS_ASSERT(tr1 == firstTrees[i]);
            TS_ASSERT(tr2 == secondTrees[i]);
        }
        // Check if the file reaches the end
        char c;
        size_t read = fread(&c, sizeof(char), 1, file);
        TS_ASSERT(read == 0);
        TS_ASSERT(feof(file));
        fclose(file);
        TS_ASSERT(remove(DUMP_FILE_NAME) == 0);

    }

    void testLoadFromStream() {
        ComboSelectProcedureRepository rep(comboRepository);

        string file_combo(PVP_XML_FILE_PATH "/scripts.combo-select");
        std::ifstream fin(file_combo.c_str());
        int n = rep.loadFromStream(fin);
        cout << "loaded " << n << " combo select functions from " << file_combo << std::endl;

        TS_ASSERT(rep.contains("testScript1"));
        TS_ASSERT(rep.contains("testScript2"));
        TS_ASSERT(rep.contains("testScript3"));

        TS_ASSERT(comboRepository.contains("testScript1Select"));
        TS_ASSERT(comboRepository.contains("testScript1EvalSelected"));

        TS_ASSERT(comboRepository.contains("testScript2Select"));
        TS_ASSERT(comboRepository.contains("testScript2EvalSelected"));

        TS_ASSERT(comboRepository.contains("testScript3Select"));
        TS_ASSERT(comboRepository.contains("testScript3EvalSelected"));
    }
};

