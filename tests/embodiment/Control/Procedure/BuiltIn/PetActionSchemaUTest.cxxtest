/*
 * tests/embodiment/Control/Procedure/BuiltIn/PetActionSchemaUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Welter Luigi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/misc.h>
#include <opencog/embodiment/Control/Procedure/BuiltIn/PetActionSchema.h>
#include <tests/embodiment/Control/PerceptionActionInterface/ActionPlanSenderMock.h>
#include <tests/embodiment/Control/PerceptionActionInterface/PetInterfaceMock.h>
#include <opencog/embodiment/Control/EmbodimentConfig.h>

using namespace Procedure;
using namespace PerceptionActionInterface;
using namespace Control;
using namespace opencog;
using namespace std;

class PetActionSchemaUTest :  public CxxTest::TestSuite
{

public:
    PetActionSchemaUTest() {
        config(EmbodimentConfig::embodimentCreateInstance, true);
    }

    ~PetActionSchemaUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }


    void testGetName() {
        AtomSpace as;

        FailureActionPlanSender ap;
        PetInterfaceMock pi;
        PAI pai(as, ap, pi);
        pi.setPAI(&pai);
        PetActionSchema bark(pai, ActionType::BARK());
        TS_ASSERT(!strcmp(bark.getName().c_str(), "BARK"));
    }

    void testExecuteOk() {
        AtomSpace as;

        std::list<ActionPlan> plans;
        OKActionPlanSender ap(plans);
        PetInterfaceMock pi;
        PAI pai(as, ap, pi);
        pi.setPAI(&pai);
        PetActionSchema bark(pai, ActionType::BARK());
        std::vector<combo::vertex> args(1, "Wynx");
        combo::vertex result = bark.execute(args);
        ActionPlanID* planId = boost::get<ActionPlanID>(&result);
        TS_ASSERT(planId);
        TS_ASSERT(!pai.isPlanFinished(*planId));
        TS_ASSERT(!plans.empty());
        TS_ASSERT(plans.front().getAction(1).getType() == ActionType::BARK());
    }

    void testExecuteFailure() {
        AtomSpace as;

        FailureActionPlanSender ap;
        PetInterfaceMock pi;
        PAI pai(as, ap, pi);
        pi.setPAI(&pai);
        PetActionSchema bark(pai, ActionType::BARK());
        PetActionSchema eat(pai, ActionType::EAT());

        // param exception
        std::vector<combo::vertex> args(1, "food");
        TS_ASSERT_THROWS(eat.execute(args), opencog::InvalidParamException&);

        // send exception
        std::vector<combo::vertex> args2(1, "Wynx");
        TS_ASSERT_THROWS(bark.execute(args2), opencog::RuntimeException&);
    }

};
