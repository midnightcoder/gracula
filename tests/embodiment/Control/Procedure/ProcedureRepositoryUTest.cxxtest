/*
 * tests/embodiment/Control/Procedure/ProcedureRepositoryUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Welter Luigi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/embodiment/Control/Procedure/ProcedureRepository.h>
#include <tests/embodiment/Control/PerceptionActionInterface/ActionPlanSenderMock.h>
#include <opencog/util/files.h>
#include <tests/embodiment/Control/PerceptionActionInterface/PetInterfaceMock.h>
#include <opencog/embodiment/Control/Procedure/ComboProcedureRepository.h>
#include <opencog/atomspace/AtomSpace.h>

#include <tests/embodiment/Control/OperationalPetController/LSMessageSenderMock.h>
#include <opencog/embodiment/Control/OperationalPetController/Pet.h>
#include <fstream>
#include <iostream>
#include <opencog/embodiment/Control/EmbodimentConfig.h>
#include <opencog/embodiment/PetComboVocabulary/PetComboVocabulary.h>

using namespace PerceptionActionInterface;
using namespace Procedure;
using namespace PetCombo;
using namespace Control;
using namespace opencog;
using namespace std;

#define NUMBER_OF_COMBO_TREES 2
const char* names[NUMBER_OF_COMBO_TREES] = {"andSeq", "orSeq"};
const char* bodies[NUMBER_OF_COMBO_TREES] = {"and_seq(#1 #2 and_seq(#3 or_seq(#4 #5 or_seq(#6 #7))))",
        "or_seq(#1 #2 or_seq(#3 or_seq(#4 #5 or_seq(#6 #7))))"
                                            };


class ProcedureRepositoryUTest :  public CxxTest::TestSuite
{

private:
    AtomSpace* atomSpace;
    HandleSeq toUpdateHandles;
    list<ActionPlan> sentActionPlans;
    ResponsiveActionPlanSender *sender;
    PetInterfaceMock *petInterface;

    PAI* ppai;

    ProcedureRepository *pr;

public:
    ProcedureRepositoryUTest() {
        
        config(EmbodimentConfig::embodimentCreateInstance, true);

        atomSpace = new AtomSpace();

        //set flag to print only cassert and other ERROR level logs on stdout
        logger().setPrintErrorLevelStdout();

        sender = new ResponsiveActionPlanSender();
        petInterface = new PetInterfaceMock(PAIUtils::getInternalId("32f56136-7973-4703-915b-6ec1bf5c67fa"), PAIUtils::getInternalId("Wynx"), string(""));
        ppai = new PAI(*atomSpace, *sender, *petInterface);
        petInterface->setPAI(ppai);

        sender->setPai(ppai);

        pr = new ProcedureRepository(*ppai);

    }

    ~ProcedureRepositoryUTest() {

        delete pr;
        delete ppai;
        delete petInterface;
        delete sender;

    }

    void setUp() {
    }

    void tearDown() {
    }

    void testContains() {

        TS_ASSERT(pr != NULL);

//   cout << "\nContains :" << pr->contains(string("BARK")) << ".\n";
//   cout << "\nContains :" << pr->contains(string("EAT")) << ".\n";

        TS_ASSERT(pr->contains(string("BARK")));
        TS_ASSERT(pr->contains(string("EAT")));

    }

    void testGet() {

        TS_ASSERT(pr != NULL);

        combo::combo_tree tr;

//   cout << pr->get(string("BARK")).getName() << endl;

        TS_ASSERT( pr->get(string("BARK")).getName() != "");

    }


    void testAdd() {

        TS_ASSERT(pr != NULL);

        stringstream sst("and_seq(bark bark sit)");
        combo::combo_tree tr;
        sst >> tr;

        ComboProcedure newCp(string("bbarkk"), 0, tr);

        pr->add(newCp);

        TS_ASSERT(pr->contains(string("bbarkk")));

        TS_ASSERT(!pr->contains(string("bbarkkk")));

        TS_ASSERT( pr->get(string("bbarkk")).getName() == "bbarkk");

    }

    void testLoadComboFromStream() {
        {
            ifstream fin(PROJECT_SOURCE_DIR "/scripts/embodiment/stdlib.combo");

            int n = 0;
            if (fin.good()) {
                n = pr->loadComboFromStream(fin);
            } else {
                TS_ASSERT(false);
            }
            fin.close();
        }
        {
            ifstream fin(PROJECT_SOURCE_DIR "/scripts/embodiment/rules_action_schemata.combo");

            int n = 0;
            if (fin.good()) {
                n = pr->loadComboFromStream(fin);
            } else {
                TS_ASSERT(false);
            }
            fin.close();
        }
        TS_ASSERT(pr->contains(string("pay_attention")));

    }

    // Methods from SavableRepository interface
    /*
        const char* getId() const;
        void saveRepository(FILE*) const;

        int loadComboFromStream(istream& in);

        void loadRepository(FILE*, HandleMap*);
        void clear();
    */

};
