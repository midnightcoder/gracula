/*
 * tests/embodiment/Learning/behavior/CompositeBehaviorDescriptionUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Andre Senna
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/embodiment/Learning/behavior/CompositeBehaviorDescription.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/hashing.h>

using namespace behavior;

class CompositeBehaviorDescriptionUTest : public CxxTest::TestSuite
{

private:

public:

    CompositeBehaviorDescriptionUTest() {

    }

    void setUp() {
    }

    void tearDown() {
    }

    void test_equals() {

        AtomSpace atomSpace;

        Handle h0 = atomSpace.addNode(PREDICATE_NODE, "P0");
        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");

        Temporal t0(0, 6);
        Temporal t1(0, 4);

        CompositeBehaviorDescription bd1;
        CompositeBehaviorDescription bd2;
        CompositeBehaviorDescription bd3;
        CompositeBehaviorDescription bd4;
        CompositeBehaviorDescription bd5;
        CompositeBehaviorDescription bd6;
        CompositeBehaviorDescription bd7;
        CompositeBehaviorDescription bd8;

        bd1.addPredicate(h0, t0);
        bd2.addPredicate(h0, t1);
        bd3.addPredicate(h1, t0);
        bd4.addPredicate(h1, t1);

        bd5.addPredicate(h0, t0);
        bd5.addPredicate(h1, t1);

        bd6.addPredicate(h0, t1);
        bd6.addPredicate(h1, t0);

        bd7.addPredicate(h1, t1);
        bd7.addPredicate(h0, t0);

        bd8.addPredicate(h1, t0);
        bd8.addPredicate(h0, t1);

        TS_ASSERT(  bd1.equals(bd1));
        TS_ASSERT(! bd1.equals(bd2));
        TS_ASSERT(! bd1.equals(bd3));
        TS_ASSERT(! bd1.equals(bd4));
        TS_ASSERT(! bd1.equals(bd5));
        TS_ASSERT(! bd1.equals(bd6));
        TS_ASSERT(! bd1.equals(bd7));
        TS_ASSERT(! bd1.equals(bd8));

        TS_ASSERT(! bd2.equals(bd1));
        TS_ASSERT(  bd2.equals(bd2));
        TS_ASSERT(! bd2.equals(bd3));
        TS_ASSERT(! bd2.equals(bd4));
        TS_ASSERT(! bd2.equals(bd5));
        TS_ASSERT(! bd2.equals(bd6));
        TS_ASSERT(! bd2.equals(bd7));
        TS_ASSERT(! bd2.equals(bd8));

        TS_ASSERT(! bd3.equals(bd1));
        TS_ASSERT(! bd3.equals(bd2));
        TS_ASSERT(  bd3.equals(bd3));
        TS_ASSERT(! bd3.equals(bd4));
        TS_ASSERT(! bd3.equals(bd5));
        TS_ASSERT(! bd3.equals(bd6));
        TS_ASSERT(! bd3.equals(bd7));
        TS_ASSERT(! bd3.equals(bd8));

        TS_ASSERT(! bd4.equals(bd1));
        TS_ASSERT(! bd4.equals(bd2));
        TS_ASSERT(! bd4.equals(bd3));
        TS_ASSERT(  bd4.equals(bd4));
        TS_ASSERT(! bd4.equals(bd5));
        TS_ASSERT(! bd4.equals(bd6));
        TS_ASSERT(! bd4.equals(bd7));
        TS_ASSERT(! bd4.equals(bd8));

        TS_ASSERT(! bd5.equals(bd1));
        TS_ASSERT(! bd5.equals(bd2));
        TS_ASSERT(! bd5.equals(bd3));
        TS_ASSERT(! bd5.equals(bd4));
        TS_ASSERT(  bd5.equals(bd5));
        TS_ASSERT(! bd5.equals(bd6));
        //TS_ASSERT(  bd5.equals(bd7));
        TS_ASSERT(! bd5.equals(bd8));

        TS_ASSERT(! bd6.equals(bd1));
        TS_ASSERT(! bd6.equals(bd2));
        TS_ASSERT(! bd6.equals(bd3));
        TS_ASSERT(! bd6.equals(bd4));
        TS_ASSERT(! bd6.equals(bd5));
        TS_ASSERT(  bd6.equals(bd6));
        TS_ASSERT(! bd6.equals(bd7));
        //TS_ASSERT(  bd6.equals(bd8));

        TS_ASSERT(! bd7.equals(bd1));
        TS_ASSERT(! bd7.equals(bd2));
        TS_ASSERT(! bd7.equals(bd3));
        TS_ASSERT(! bd7.equals(bd4));
        //TS_ASSERT(  bd7.equals(bd5));
        TS_ASSERT(! bd7.equals(bd6));
        TS_ASSERT(  bd7.equals(bd7));
        TS_ASSERT(! bd7.equals(bd8));

        TS_ASSERT(! bd8.equals(bd1));
        TS_ASSERT(! bd8.equals(bd2));
        TS_ASSERT(! bd8.equals(bd3));
        TS_ASSERT(! bd8.equals(bd4));
        TS_ASSERT(! bd8.equals(bd5));
        //TS_ASSERT(  bd8.equals(bd6));
        TS_ASSERT(! bd8.equals(bd7));
        TS_ASSERT(  bd8.equals(bd8));


    }

    void test_buildTimelineRepresentation() {

        AtomSpace atomSpace;
        CompositeBehaviorDescription behaviorDescription;

        Handle h0 = atomSpace.addNode(PREDICATE_NODE, "P0");
        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Handle h3 = atomSpace.addNode(PREDICATE_NODE, "P3");
        Handle h4 = atomSpace.addNode(PREDICATE_NODE, "P4");
        Handle h5 = atomSpace.addNode(PREDICATE_NODE, "PX");

        Temporal t0(0, 6);
        Temporal t1(0, 4);
        Temporal t2(9, 12);
        Temporal t3(9, 16);
        Temporal t4(12, 16);
        Temporal t5(4, 4);

        behaviorDescription.addPredicate(h0, t0);
        behaviorDescription.addPredicate(h1, t1);
        behaviorDescription.addPredicate(h2, t2);
        behaviorDescription.addPredicate(h3, t3);
        behaviorDescription.addPredicate(h4, t4);
        behaviorDescription.addPredicate(h5, t5);

        if (behaviorDescription.toStringTimeline() != "{({P0,P1,PX},4),({P0,PX},2),({},3),({P2,P3},3),({P3,P4},4)}") {
            printf("Got a different string:\n%s\n", behaviorDescription.toStringTimeline().c_str());
        }
        TS_ASSERT(behaviorDescription.toStringTimeline() == "{({P0,P1,PX},4),({P0,PX},2),({},3),({P2,P3},3),({P3,P4},4)}");
    }

    void test_addpredicate() {

        AtomSpace atomSpace;
        CompositeBehaviorDescription behaviorDescription;

        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Temporal t1(0, 1);
        behaviorDescription.addPredicate(h1, t1);

        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Temporal t2(1, 3);
        behaviorDescription.addPredicate(h2, t2);

        TS_ASSERT(behaviorDescription.toStringHandles() == "{(P1,(UNIFORM,0,1)),(P2,(UNIFORM,1,3))}");
        //printf("%s\n", behaviorDescription.toStringHandles().c_str());
    }

    void test_hashCode() {

        AtomSpace atomSpace;
        const char *name[10] = {"p0", "p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9"};

        for (int i = 0; i < 10; i++) {
            CompositeBehaviorDescription bd1;
            Handle h1 = atomSpace.addNode(PREDICATE_NODE, name[i]);
            Temporal t1(0, i);
            bd1.addPredicate(h1, t1);
            for (int j = 0; j < 10; j++) {
                CompositeBehaviorDescription bd2;
                Handle h2 = atomSpace.addNode(PREDICATE_NODE, name[j]);
                Temporal t2(0, j);
                bd2.addPredicate(h2, t2);
                // TODO: We cannot check if hashCode are different if the BDs
                // are different, since hash colisions may happen eventually
                // However, in a simple test like that, hash colisions should
                // not happen. Otherwise, we know we have a weak CBD's hash code
                // implementation.
                // In fact, these colisions started happening when
                // boost::hash<std::string> was used to implement
                // Node::hashCode, which is used by CBD::hashCode
                // So, CBD::hashCode was changed to become a bit stronger. 
                TS_ASSERT(((i == j) && (bd1.hashCode() == bd2.hashCode())) || ((i != j) && (bd1.hashCode() != bd2.hashCode())));
                /* Debug code
                if (i==j) 
                    TS_ASSERT(bd1.hashCode() == bd2.hashCode()) 
                else { 
                    printf("Checking hash codes of distinct bds (%d vs. %d)\n",
                            i, j);
                    if (bd1.hashCode() == bd2.hashCode()) printf("bd1.hashCode %u == bd2.hashCode %u\n", bd1.hashCode(), bd2.hashCode());
                    printf("Done\n");
                    TS_ASSERT(bd1.hashCode() != bd2.hashCode());
                }
                */
            }
        }

        for (int i = 0; i < 10; i++) {
            CompositeBehaviorDescription bd1;
            Handle h1 = atomSpace.addNode(PREDICATE_NODE, name[0]);
            Temporal t1(i, 20);
            bd1.addPredicate(h1, t1);
            for (int j = 0; j < 10; j++) {
                CompositeBehaviorDescription bd2;
                Handle h1 = atomSpace.addNode(PREDICATE_NODE, name[0]);
                Temporal t1(j, 20);
                bd2.addPredicate(h1, t1);
                TS_ASSERT(((i == j) && (bd1.hashCode() == bd2.hashCode())) || ((i != j) && (bd1.hashCode() != bd2.hashCode())));
            }
        }

        for (int i = 0; i < 10; i++) {
            CompositeBehaviorDescription bd1;
            Handle h1 = atomSpace.addNode(PREDICATE_NODE, name[0]);
            Temporal t1(0, i);
            bd1.addPredicate(h1, t1);
            for (int j = 0; j < 10; j++) {
                CompositeBehaviorDescription bd2;
                Handle h1 = atomSpace.addNode(PREDICATE_NODE, name[0]);
                Temporal t1(0, j);
                bd2.addPredicate(h1, t1);
                TS_ASSERT(((i == j) && (bd1.hashCode() == bd2.hashCode())) || ((i != j) && (bd1.hashCode() != bd2.hashCode())));
            }
        }

        for (int i = 0; i < 10; i++) {
            CompositeBehaviorDescription bd1;
            Handle h1 = atomSpace.addNode(PREDICATE_NODE, name[i]);
            Temporal t1(0, 1);
            bd1.addPredicate(h1, t1);
            for (int j = 0; j < 10; j++) {
                CompositeBehaviorDescription bd2;
                Handle h1 = atomSpace.addNode(PREDICATE_NODE, name[j]);
                Temporal t1(0, 1);
                bd2.addPredicate(h1, t1);
                TS_ASSERT(((i == j) && (bd1.hashCode() == bd2.hashCode())) || ((i != j) && (bd1.hashCode() != bd2.hashCode())));
            }
        }

    }

}; // class
