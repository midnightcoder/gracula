/*
 * tests/dynamics/STIDecayingAgentUTest.cxxtest
 *
 * Copyright (C) 2008 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * Written by Gustavo Gama <gama@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Node.h>
#include <opencog/dynamics/attention/STIDecayingAgent.h>
#include <opencog/server/CogServer.h>
#include <opencog/server/Factory.h>
#include <opencog/util/Config.h>

using namespace opencog;

class STIDecayingAgentUTest : public CxxTest::TestSuite
{

private:

    Factory<STIDecayingAgent, Agent> factory;
    CogServer& cogserver;

public:

    static STIDecayingAgentUTest* createSuite() { return new STIDecayingAgentUTest(); }
    static void destroySuite(STIDecayingAgentUTest* suite) { delete suite; }

    STIDecayingAgentUTest() : cogserver(static_cast<CogServer&>(server())) {
        cogserver.registerAgent(STIDecayingAgent::info().id, &factory);
    }

    ~STIDecayingAgentUTest() {
        cogserver.unregisterAgent(STIDecayingAgent::info().id);
    }

    void setUp() {}
    void tearDown() {}

    void testSimple() {
        logger().setLevel(Logger::DEBUG);
        AttentionValue::sti_t min_sti = config().get_int("MIN_STI");

        AtomSpace *as = cogserver.getAtomSpace();
        Handle h = as->addNode(NUMBER_NODE, "1");
        Node *node = dynamic_cast<Node*>(TLB::getAtom(h));
        node->setAttentionValue(*AttentionValue::factory((AttentionValue::sti_t) (min_sti + 5)));

        // first, ensure the node's sti is what it should
        h = as->getHandle(node->getType(), node->getName());
        TS_ASSERT(TLB::getAtom(h)->getAttentionValue().getSTI() == (min_sti + 5));

        cogserver.createAgent(STIDecayingAgent::info().id, true);
        for(int i=0; i < 5; i++) cogserver.runLoopStep();

        // we're on the verge of removing the node; check if its sti equals
        // min_sti
        h = as->getHandle(node->getType(), node->getName());
        TS_ASSERT(TLB::getAtom(h)->getAttentionValue().getSTI() == min_sti);

        // run another cycle and check whether the atom has been removed
        // Joel: you can't get the type or name when it's been deleted!
        // save name and type first...
        std::string name = node->getName();
        Type t = node->getType();
        cogserver.runLoopStep();

        h = as->getHandle(t, name);
        TS_ASSERT(TLB::isInvalidHandle(h));
    }
};
