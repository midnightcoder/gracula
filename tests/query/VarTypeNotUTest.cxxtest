/*
 * tests/query/VarTypeNotUTest.cxxtest
 *
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/query/DefaultPatternMatchCB.h>
#include <opencog/query/PatternMatch.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class VarTypeNot :  public CxxTest::TestSuite
{
	private:
		PatternMatch pm;
		AtomSpace *as;
		Handle vscope_good, vscope_bad;

	public:

		VarTypeNot(void)
		{
			try
			{
				config().load("opencog-test.conf");
			}
			catch (RuntimeException &e)
			{
				std::cerr << e.getMessage() << std::endl;
			}
			logger().setFilename(config()["LOG_FILE"]);
			logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
			logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

			// logger().setLevel(Logger::DEBUG);
			// logger().setPrintToStdoutFlag(true);
		}

		~VarTypeNot()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_exec(void);
};

/*
 * This function sets up an implication link, and some data.
 */
#define an as->addNode
#define al as->addLink
void VarTypeNot::setUp(void)
{
	CogServer& cogserver = static_cast<CogServer&>(server());
	as = cogserver.getAtomSpace();
	pm.set_atomspace(as);

	// Load the required data
	config().set("SCM_PRELOAD",
		"opencog/scm/type_constructors.scm, "
		"tests/query/vartype-bug.scm");

	// Blindly search a bunch of paths hoping to find the files
	// in one of them ...
	const char * paths[] = 
	{
		"./",
		"../",
		"../../",
		"../../../",
		NULL
	};
	cogserver.loadSCMModules(paths);

#ifdef HAVE_GUILE
	// Create an implication link that will be tested.
	vscope_good = SchemeEval::instance().apply("rule-good", Handle::UNDEFINED);
	vscope_bad = SchemeEval::instance().apply("rule-bad", Handle::UNDEFINED);
#endif /* HAVE_GUILE */
}

/*
 * Basic implication link test.
 */
#define getlink(hand,pos) \
	dynamic_cast<Link *>(TLB::getAtom(hand))->getOutgoingHandle(pos)

#define getarity(hand) \
	dynamic_cast<Link *>(TLB::getAtom(hand))->getArity()

void VarTypeNot::test_exec(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Result should be a ListLink w/ zero solutions
	Handle result_good = pm.varscope(vscope_good);
#ifdef HAVE_GUILE
	logger().debug("result-good is %s\n", SchemeSmob::to_string(result_good).c_str());
#endif
	TSM_ASSERT_EQUALS("wrong number of solutions found", 0, getarity(result_good));

	Handle result_bad = pm.varscope(vscope_bad);
#ifdef HAVE_GUILE
	logger().debug("result-bad is %s\n", SchemeSmob::to_string(result_bad).c_str());
#endif
	TSM_ASSERT_EQUALS("expecting undefined value", Handle::UNDEFINED, result_bad);

	logger().debug("END TEST: %s", __FUNCTION__);
}
