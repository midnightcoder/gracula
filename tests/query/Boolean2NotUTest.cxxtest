/*
 * tests/query/Boolean2NotUTest.cxxtest
 *
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/query/DefaultPatternMatchCB.h>
#include <opencog/query/PatternMatch.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

#include <cstdio>

using namespace opencog;

class Boolean2NotUTest :  public CxxTest::TestSuite
{
	private:
		PatternMatch pm;
		AtomSpace *as;

		Handle implication, his_a, hberlin, hcity;

	public:

		Boolean2NotUTest(void)
		{
			try
			{
				config().load("opencog-test.conf");
			}
			catch (RuntimeException &e)
			{
				std::cerr << e.getMessage() << std::endl;
			}
			logger().setFilename(config()["LOG_FILE"]);
			logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
			logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

			// logger().setLevel(Logger::DEBUG);
			// logger().setPrintToStdoutFlag(true);
		}

		~Boolean2NotUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_isa(void);
};

/*
 * Unlike the BooleanUTest, this test has two NOT statements in it.
 * This function sets up the following structures:
 *  # IF _subj(be, $var1) ^ 
 *       _obj(be, $var2) ^
 *        !DEFINITE-FLAG($var2) ^
 *        !HYP-FLAG(be)
 *      THEN ^3_isa($var1, $var2)
 * i.e. want to assure the *absence* of DEFINITE_FLAG, and of HYP.
 */
#define an as->addNode
#define al as->addLink
void Boolean2NotUTest::setUp(void)
{
	CogServer& cogserver = static_cast<CogServer&>(server());
	as = cogserver.getAtomSpace();
	pm.set_atomspace(as);

	// Create an implication link that will be tested.
	implication = 
	al(IMPLICATION_LINK,
		al(AND_LINK,
			al(EVALUATION_LINK,
				an(PREDICATE_NODE, "_subj"),
				al(LIST_LINK,
					an(VARIABLE_NODE, "$winst"),
					an(VARIABLE_NODE, "$var1")
				)
			),
			al(EVALUATION_LINK,
				an(PREDICATE_NODE, "_obj"),
				al(LIST_LINK,
					an(VARIABLE_NODE, "$winst"),
					an(VARIABLE_NODE, "$var2")
				)
			),
			// used to gaurentee that both are in the same "sentence"
			al(MEMBER_LINK,
				an(VARIABLE_NODE, "$var1"),
				an(VARIABLE_NODE, "$sent")
			),
			al(MEMBER_LINK,
				an(VARIABLE_NODE, "$var2"),
				an(VARIABLE_NODE, "$sent")
			),
			al(MEMBER_LINK,
				an(VARIABLE_NODE, "$winst"),
				an(VARIABLE_NODE, "$sent")
			),
			al(CONTEXT_LINK,
				an(VARIABLE_NODE, "$winst"),
				an(CONCEPT_NODE, "be")
			),
			al(NOT_LINK,
				al(INHERITANCE_LINK,
					an(VARIABLE_NODE, "$var2"),
					an(CONCEPT_NODE, "definite")
				)
			),
			al(NOT_LINK,
				al(INHERITANCE_LINK,
					an(VARIABLE_NODE, "$winst"),
					an(CONCEPT_NODE, "hyp")
				)
			)
		),
		al(EVALUATION_LINK,
			his_a = an(PREDICATE_NODE, "is_a"),
			al(LIST_LINK,
				an(VARIABLE_NODE, "$var1"),
				an(VARIABLE_NODE, "$var2")
			)
		)
	);

	// Create data on which the above pattern should match
	// This is an assertion "Berlin is a city"
	al(INHERITANCE_LINK,
		an(CONCEPT_NODE, "Berlin"),
		an(CONCEPT_NODE, "definite"),
		TruthValue::TRUE_TV()
	);
	al(EVALUATION_LINK,
		an(PREDICATE_NODE, "_subj"),
		al(LIST_LINK,
			an(CONCEPT_NODE, "be@1111"),
			hberlin = an(CONCEPT_NODE, "Berlin")
		),
		TruthValue::TRUE_TV()
	);
	al(EVALUATION_LINK,
		an(PREDICATE_NODE, "_obj"),
		al(LIST_LINK,
			an(CONCEPT_NODE, "be@1111"),
			hcity = an(CONCEPT_NODE, "city")
		),
		TruthValue::TRUE_TV()
	);
	al(MEMBER_LINK,
		an(CONCEPT_NODE, "Berlin"),
		an(CONCEPT_NODE, "sentence-AAA"),
		TruthValue::TRUE_TV()
	);
	al(MEMBER_LINK,
		an(CONCEPT_NODE, "city"),
		an(CONCEPT_NODE, "sentence-AAA"),
		TruthValue::TRUE_TV()
	);
	al(MEMBER_LINK,
		an(CONCEPT_NODE, "be@1111"),
		an(CONCEPT_NODE, "sentence-AAA"),
		TruthValue::TRUE_TV()
	);
	al(CONTEXT_LINK,
		an(CONCEPT_NODE, "be@1111"),
		an(CONCEPT_NODE, "be"),
		TruthValue::TRUE_TV()
	);

	// Create data on which the above pattern should fail
	// This is a question: "Is Madrid a city?", and thus the copula "be"
	// is labelled as "hyp". The pattern match should rehject the presence
	// of this "hyp" clause.
	al(INHERITANCE_LINK,
		an(CONCEPT_NODE, "Madrid"),
		an(CONCEPT_NODE, "definite"),
		TruthValue::TRUE_TV()
	);
	al(INHERITANCE_LINK,
		an(CONCEPT_NODE, "be@2222"),
		an(CONCEPT_NODE, "hyp"),
		TruthValue::TRUE_TV()
	);
	al(INHERITANCE_LINK,
		an(CONCEPT_NODE, "be@2222"),
		an(CONCEPT_NODE, "truth-query"),
		TruthValue::TRUE_TV()
	);
	al(EVALUATION_LINK,
		an(PREDICATE_NODE, "_subj"),
		al(LIST_LINK,
			an(CONCEPT_NODE, "be@2222"),
			an(CONCEPT_NODE, "Madrid")
		),
		TruthValue::TRUE_TV()
	);
	al(EVALUATION_LINK,
		an(PREDICATE_NODE, "_obj"),
		al(LIST_LINK,
			an(CONCEPT_NODE, "be@2222"),
			an(CONCEPT_NODE, "city")
		),
		TruthValue::TRUE_TV()
	);
	al(MEMBER_LINK,
		an(CONCEPT_NODE, "Madrid"),
		an(CONCEPT_NODE, "sentence-BBB"),
		TruthValue::TRUE_TV()
	);
	al(MEMBER_LINK,
		an(CONCEPT_NODE, "city"),
		an(CONCEPT_NODE, "sentence-BBB"),
		TruthValue::TRUE_TV()
	);
	al(MEMBER_LINK,
		an(CONCEPT_NODE, "be@2222"),
		an(CONCEPT_NODE, "sentence-BBB"),
		TruthValue::TRUE_TV()
	);
	al(CONTEXT_LINK,
		an(CONCEPT_NODE, "be@2222"),
		an(CONCEPT_NODE, "be"),
		TruthValue::TRUE_TV()
	);
}

/*
 * preposition reasoning test.
 *
 * Expect to get the following result, given the above data:
 *
 *    EvaluationLink
 *       PredicateNode "is_a"
 *       ListLink
 *          ConceptNode "Berlin"
 *          ConceptNode "city"
 */
#define getlink(hand,pos) \
	dynamic_cast<Link *>(TLB::getAtom(hand))->getOutgoingHandle(pos)

#define getarity(hand) \
	dynamic_cast<Link *>(TLB::getAtom(hand))->getArity()

void Boolean2NotUTest::test_isa(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Result should be a ListLink
	Handle result = pm.crisp_logic_imply(implication);

	// There should be only one solution: the Berlin one.
	// The Madrid graph should be rejected because of the 
	// NOT definite link.
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	// Then, evaluationLink, as above.
	Handle heval = getlink(result, 0);
	Handle vis_a = getlink(heval, 0);
	Handle hlist = getlink(heval, 1);
	Handle vberlin = getlink(hlist, 0);
	Handle vcity = getlink(hlist, 1);

	TSM_ASSERT_EQUALS("incorrect is_a", his_a, vis_a);
	TSM_ASSERT_EQUALS("incorrect berlin", hberlin, vberlin);
	TSM_ASSERT_EQUALS("incorrect city", hcity, vcity);

	logger().debug("END TEST: %s", __FUNCTION__);
}
