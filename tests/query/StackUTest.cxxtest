/*
 * tests/query/StackUTest.cxxtest
 *
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/query/DefaultPatternMatchCB.h>
#include <opencog/query/PatternMatch.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Logger.h>

#include <cstdio>

using namespace opencog;

class StackUTest :  public CxxTest::TestSuite
{
	private:
		PatternMatchEngine pme;
		AtomSpace *as;
		Handle svar, wvar;
		Handle p1, p2;
		Handle anch;

	public:

		StackUTest(void)
		{
			logger().setLevel(Logger::DEBUG);
			logger().setPrintToStdoutFlag(true);
		}

		~StackUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_stack(void);
};

class TestPMCB :
	public virtual DefaultPatternMatchCB
{
	public:
	int lcnt;
	int scnt;
	Handle anch;
	TestPMCB(void) { lcnt = 0; scnt = 0; }

	virtual bool clause_match(Link *pattrn, Link *grnd)
	{
		lcnt ++;
		// match the initial anchor clause, but reject the rest.
		if (anch == TLB::getHandle(grnd)) return false;
		return true;
	}

	virtual bool solution(std::map<Handle, Handle> &pred_soln,
	                      std::map<Handle, Handle> &var_soln)
	{
		scnt ++;
		return false;
	}
};

/*
 * This function sets up the following structures:
 *
 * OrderedLink
 *     ConceptNode "# DOSTUFF"
 *     VariableNode "$sent"
 * ListLink
 *     VariableNode "$sent"
 *     VariableNode "$var"
 * 
 * The pattern matcher should be called seven times, once
 * for the ordered link, and 6 more times for the 6 list links.
 * One recent bug was triggered by the clause-matcher returning
 * "true", which resulted in it being invoked only half the time.
 */
#define an as->addNode
#define al as->addLink
void StackUTest::setUp(void)
{
	CogServer& cogserver = static_cast<CogServer&>(server());
	as = cogserver.getAtomSpace();
	pme.set_atomspace(as);

	// Create an implication link that will be tested.
	p1 = al(ORDERED_LINK,
		an(CONCEPT_NODE, "# DOSTUFF"),
		an(VARIABLE_NODE, "$sent")
	);
	p2 = al(LIST_LINK,
		svar = an(VARIABLE_NODE, "$sent"),
		wvar = an(VARIABLE_NODE, "$var")
	);

	// Create data on which the above pattern should match
	anch = al(ORDERED_LINK,
		an(CONCEPT_NODE, "# DOSTUFF"),
		an(CONCEPT_NODE, "my sentence")
	);
	al(LIST_LINK,
		an(CONCEPT_NODE, "my sentence"),
		an(CONCEPT_NODE, "thing A")
	);
	al(LIST_LINK,
		an(CONCEPT_NODE, "my sentence"),
		an(CONCEPT_NODE, "thing B")
	);
	al(LIST_LINK,
		an(CONCEPT_NODE, "my sentence"),
		an(CONCEPT_NODE, "thing C")
	);
	al(LIST_LINK,
		an(CONCEPT_NODE, "my sentence"),
		an(CONCEPT_NODE, "thing D")
	);
	al(LIST_LINK,
		an(CONCEPT_NODE, "my sentence"),
		an(CONCEPT_NODE, "thing E")
	);
	al(LIST_LINK,
		an(CONCEPT_NODE, "my sentence"),
		an(CONCEPT_NODE, "thing F")
	);
}

/*
 * stack-usage/bound-variable test.
 * Expect the user callback to be called for each match.
 * i.e. it should be called three times.
 *
 */
void StackUTest::test_stack(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	std::vector<Handle> vars;
	vars.push_back(svar);
	vars.push_back(wvar);

	std::vector<Handle> preds;
	preds.push_back(p1);
	preds.push_back(p2);

	std::vector<Handle> negs;

	TestPMCB pmcb;
	pmcb.anch = anch;
	pme.match(&pmcb, vars, preds, negs);

	TSM_ASSERT_EQUALS("bad link-test call count", 7, pmcb.lcnt);
	TSM_ASSERT_EQUALS("bad solution call count", 0, pmcb.scnt);

	logger().debug("END TEST: %s", __FUNCTION__);
}
