/*
 * tests/learning/moses/representationUTest.cxxtest
 *
 * Copyright (C) 2010 Novamente LLC
 * All Rights Reserved
 *
 * Written by Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>
#include <sstream>
#include <string>
#include <boost/assign/list_of.hpp>
#include <opencog/learning/moses/moses/representation.h>
#include <opencog/comboreduct/reduct/reduct.h>
#include <opencog/util/mt19937ar.h>
#include <opencog/util/Logger.h>

using namespace moses;
using namespace reduct;
using namespace combo;
using namespace opencog;
using namespace std;
using boost::assign::list_of;

class representationUTest : public CxxTest::TestSuite {
private:
    combo_tree totree(string str) {
        stringstream ss(str);
        combo_tree tr;
        ss >> tr;
        return tr;
    }

    MT19937RandGen rng;
public:
    representationUTest() : rng(1) {
        logger().setPrintToStdoutFlag(true);
        logger().setLevel(Logger::DEBUG);
    }

    // these tests are just here to check that the representation
    // building does not crash, for now at least

    void test_contin_rep() {
        string tr_str = "+(*(+(*(+(*(+(*(#1 1.75) 1.875) #1) 0.75) 0.75) 1.375) 0.75) -1.25)";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);
        vertex_set ignore_ops = list_of(id::div)(id::exp)(id::log)(id::sin);
        representation rep(contin_reduction(ignore_ops, rng),
                           contin_reduction(ignore_ops, rng), tr, tt,
                           rng, ignore_ops);

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }

    void test_boolean_rep1() {
        string tr_str = "and";
        combo_tree tr = totree(tr_str);
        type_tree tt = declare_function(id::boolean_type, 3);
        representation rep(logical_reduction(2), logical_reduction(3),
                           tr, tt, rng, vertex_set());

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }

    void test_boolean_rep2() {
        string tr_str = "or(and(or(#1 #2) or(#1 #3) or(#2 #3)) and(#1 #3))";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);
        representation rep(logical_reduction(2), logical_reduction(2), 
                           tr, tt, rng, vertex_set());

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }

    void test_boolean_rep3() {
        string tr_str = "or(and(!#1 !#2 !#3) and(#1 #2) and(#1 #3) and(#2 #3))";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);
        representation rep(logical_reduction(2), logical_reduction(2), 
                           tr, tt, rng, vertex_set());

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }

    void test_boolean_rep4() {
        string tr_str = "or(and(or(and(or(!#1 #3) !#2) #3) or(and(!#2 #3) !#1) or(#2 !#3)) and(or(#1 #2) #3) and(or(#1 #3) #2))";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);
        representation rep(logical_reduction(2), logical_reduction(2), 
                           tr, tt, rng, vertex_set());

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }

    void test_boolean_rep5() {
        string tr_str = "or(and(!#2 !#3 or(#3 !#2) or(!#1 #3)) and(#3 #2) and(#3 #1) and(#1 #2 or(#3 #1)))";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);
        representation rep(logical_reduction(2), logical_reduction(0), 
                           tr, tt, rng, vertex_set());

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }
};
