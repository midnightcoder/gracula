/*
 * tests/util/lazy_selectorUTest.cxxtest
 *
 * Copyright (C) 2008 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * Written by Gustavo Gama <gama@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <stdio.h>

#include <opencog/util/lazy_selector.h>
#include <opencog/util/lazy_normal_selector.h>
#include <opencog/util/lazy_random_selector.h>

#include <opencog/util/mt19937ar.h>

#include <opencog/util/dorepeat.h>

using namespace opencog;

static const unsigned int n = 10; // selecting in [0,n) 
static const unsigned int s = 9; // what returns lazy_normal_selector::select

class lazy_selectorUTest : public CxxTest::TestSuite
{

public:

    void test_lazy_normal_selector() {

        std::cout << "test_lazy_normal_selector" << std::endl;

        lazy_normal_selector lns(n,s);

        std::set<unsigned int> nset;

        dorepeat(n) {
            unsigned int selected = lns();
            std::cout << "Selected number: " << selected << std::endl;
            //check that the selected number has not been previously selected
            TS_ASSERT(nset.find(selected) == nset.end());
            nset.insert(selected);
        }
        lns.reset_range(n*2);
        dorepeat(n) {
            unsigned int selected = lns();
            std::cout << "Selected number: " << selected << std::endl;
            //check that the selected number has not been previously selected
            TS_ASSERT(nset.find(selected) == nset.end());
            nset.insert(selected);
        }        
    }

    void test_lazy_random_selector() {
        std::cout << "test_lazy_random_selector" << std::endl;

        MT19937RandGen rnd(1);

        lazy_random_selector lrs(n, rnd);

        std::set<unsigned int> nset;

        dorepeat(n) {
            unsigned int selected = lrs();
            std::cout << "Selected number: " << selected << std::endl;
            //check that the selected number has not been previously selected
            TS_ASSERT(nset.find(selected) == nset.end());
            nset.insert(selected);
        }
        lrs.reset_range(n*2);
        dorepeat(n) {
            unsigned int selected = lrs();
            std::cout << "Selected number: " << selected << std::endl;
            //check that the selected number has not been previously selected
            TS_ASSERT(nset.find(selected) == nset.end());
            nset.insert(selected);
        }        
    }
};
