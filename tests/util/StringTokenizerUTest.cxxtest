/*
 * tests/util/StringTokenizerUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Carlos Lopes <dlopes@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <stdio.h>

#include <opencog/util/StringTokenizer.h>

using namespace opencog;

static const std::string toTokenizer = "this is a common phrase";
static const std::string delimiter = " ";
static const std::string words [] = {"this", "is", "a", "common", "phrase"};

class StringTokenizerUTest : public CxxTest::TestSuite
{

public:
    void setUp() {
        // TODO: Implement setUp() function.
    }

    void tearDown() {
        // TODO: Implement tearDown() function.
    }

    void testNextToken() {
        StringTokenizer st(toTokenizer, delimiter);
        std::string result = st.nextToken();
        int i = 0;

        while (result != "") {
            printf("word: %s, result: %s\n", words[i].c_str(), result.c_str());
            TS_ASSERT(words[i] == result);
            result = st.nextToken();
            i++;
        }

        printf("%d\n", i);
        TS_ASSERT(i == 5);
    }

    void testSetStringAndDelimiter() {
        StringTokenizer st;
        st.setString(toTokenizer);
        TS_ASSERT(st.getString() == toTokenizer);
        st.setDelimiter(delimiter);
        TS_ASSERT(st.getDelimiter() == delimiter);
        std::string result = st.nextToken();
        int i = 0;

        while (result != "") {
            printf("word: %s, result: %s\n", words[i].c_str(), result.c_str());
            TS_ASSERT(words[i] == result);
            result = st.nextToken();
            i++;
        }

        printf("%d\n", i);
        TS_ASSERT(i == 5);
    }

    void testOutOfRangeCase() {
        // This test is for a specific case that was causing std::out_of_range when delimiter was present at the end of the string.
        const std::string failingText = "this is a common ";
        StringTokenizer st(failingText, delimiter);
        st.nextToken();
        st.nextToken();
        st.nextToken();
        st.nextToken();
        TS_ASSERT(st.nextToken() == "");
        TS_ASSERT(st.nextToken() == "");
        const std::string failingText2 = "   ";
        StringTokenizer st2(failingText2, delimiter);
        TS_ASSERT(st2.nextToken() == "");
        TS_ASSERT(st2.nextToken() == "");
    }
};

