/*
 * tests/util/LoggerUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * Copyright (C) 2008 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * Written by Andre Senna <senna@vettalabs.com>
 *            Gustavo Gama <gama@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cstdio>
#include <cstring>
#include <fstream>

#include <opencog/util/Logger.h>

using namespace opencog;

class LoggerUTest : public CxxTest::TestSuite
{

private:

public:

    LoggerUTest() {

    }

    void setUp() {
    }

    void tearDown() {
    }

    void testLog() {
        char baselineFile[256];
        char logFile[256];

        strcpy(baselineFile, "/tmp/testLogBaseline.txt");
        strcpy(logFile, "/tmp/testLog.txt");

        Logger baseline("/tmp/testLogBaseline.txt", Logger::FINE, false);
        Logger _logger("/tmp/testLog.txt", Logger::DEBUG, false);

        _logger.fine("msg1");

        _logger.debug("msg2");
        baseline.debug("msg2");

        _logger.info("msg3");
        baseline.info("msg3");

        FILE *f1 = fopen(baselineFile, "r");
        FILE *f2 = fopen(logFile, "r");

        TS_ASSERT(f1 != NULL);
        TS_ASSERT(f2 != NULL);

        char c1 = fgetc(f1);
        while (c1 != EOF) {
            char c2 = fgetc(f2);
            TS_ASSERT(c1 == c2);
            c1 = fgetc(f1);
        }
        remove(baselineFile);
        remove(logFile);
    }

    void testDefaultLogger() {
        logger().info("Running LoggerUTest");
    }

    unsigned int countLines(const char *filename) {
        unsigned int nLines = 0;
        std::string line;

        std::ifstream fin(filename);
        while (fin.good() && std::getline(fin, line)) nLines++;
        fin.close();
        return nLines;
    }

    void logAllLevels(const char *filename, const Logger::Level level, const unsigned int nLines) {
        Logger _logger(filename, level);
        _logger.error("message");
        _logger.warn ("message");
        _logger.info ("message");
        _logger.debug("message");
        _logger.fine ("message");

        TS_ASSERT_LESS_THAN_EQUALS(nLines, countLines(filename));
        remove(filename);
    }

    void testLevels() {
        logAllLevels("LoggerUTest.none.log", Logger::NONE, 0);
        logAllLevels("LoggerUTest.error.log", Logger::ERROR, 1);
        logAllLevels("LoggerUTest.warn.log",  Logger::WARN,  2);
        logAllLevels("LoggerUTest.info.log",  Logger::INFO,  3);
        logAllLevels("LoggerUTest.debug.log", Logger::DEBUG, 4);
        logAllLevels("LoggerUTest.fine.log",  Logger::FINE,  5);
    }

}; // class
