/*
 * tests/persist/sql/BasicSaveUTest.cxxtest
 *
 * Most basic, simplest sniff test, saves and restores a few atoms.
 *
 * If this test is failing for you, then be sure to read
 * ../../opencong/persist/README, and create/configure the SQL database
 * as described there. Next, edit ../../lib/test-opencog.conf 
 * appropriately, so as to indicate the location of your database.
 * This test will then pass.
 *
 * Copyright (C) 2008, 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Atom.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/atomspace/TLB.h>
#include <opencog/persist/sql/AtomStorage.h>

#include <opencog/server/CogServer.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

#include <cstdio>

using namespace opencog;

class BasicSaveUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		const char * dbname;
		const char * username;
		const char * passwd;

		Node *n1[10];
		Node *n2[10];
		Node *n3[10];
		Link *l[10];
		Atom *a1[10];
		Atom *a2[10];
		Atom *a3[10];
		Atom *al[10];

	public:

		BasicSaveUTest(void)
		{
			try
			{
				config().load("opencog-test.conf");
			}
			catch (RuntimeException &e)
			{
				std::cerr << e.getMessage() << std::endl;
			}
			logger().setFilename(config()["LOG_FILE"]);
			logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
			logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

			try {
				// Get the database logins & etc from the config file.
				dbname = config()["TEST_DB_NAME"].c_str();
				username = config()["TEST_DB_USERNAME"].c_str();
				passwd = config()["TEST_DB_PASSWD"].c_str();
			}
			catch (InvalidParamException &e)
			{
				TS_FAIL("The BasicSaveUTest failed.\n"
					"Please be sure to read opencong/persist/README, and\n"
					"create/configure the SQL database as described there.\n"
					"Next, edit lib/test-opencog.conf appropriately, so as\n"
					"to indicate the location of your database. If this is\n"
					"done correctly, then this test will pass.\n");
				exit(1);
			}

		}

		~BasicSaveUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		AtomStorage *astore;
		void tearDown(void) { delete astore; }
		void single_atom_save_restore(std::string id);
		void add_to_table(int, AtomTable *, std::string id);
		void check_table(int, AtomTable *, std::string id);

		void test_single_atom(void);
		void test_table(void);
};

/*
 * This is called once before each test, for each test (!!)
 */
void BasicSaveUTest::setUp(void)
{
	CogServer& cogserver = static_cast<CogServer&>(server());
	as = cogserver.getAtomSpace();

	astore = new AtomStorage(dbname, username, passwd);
	TSM_ASSERT("Not connected to database", astore->connected());

	if (!astore->connected())
	{
		logger().debug("single_atom_save_restore: cannot connect to db");
		return;
	}

	// Trash the contents of the database.
	astore->kill_data();
}

// ============================================================

static void atomCompare(Atom *a, Atom *b)
{
	Link *la = dynamic_cast<Link *>(a);
	Link *lb = dynamic_cast<Link *>(b);

	TSM_ASSERT("No atom found", b != NULL);
	if (NULL == b) return;

	TSM_ASSERT_EQUALS("Type mistmatch", a->getType(), b->getType());

	// Only links can have arity
	if (la && lb)
	{
		TSM_ASSERT_EQUALS("Arity mistmatch", la->getArity(), lb->getArity());

		if (0 < la->getArity())
		{
			std::vector<Handle> outa = la->getOutgoingSet();
			std::vector<Handle> outb = lb->getOutgoingSet();
			for (int i=0; i< la->getArity(); i++)
			{
				if (outa[i] != outb[i])
				{
					TSM_ASSERT_EQUALS("outgoing set mis-match", 
						outa[i].value(), outb[i].value());
				}
			}
		}
	}

	const TruthValue &ta = a->getTruthValue();
	const TruthValue &tb = b->getTruthValue();
	TSM_ASSERT("Truth value miscompare", ta==tb);

	if (!(ta == tb))
	{
		fprintf(stderr, "Error, truth value miscompare, "
		        "ma=%f mb=%f ca=%f cb=%f\n",
		        ta.getMean(), tb.getMean(), ta.getCount(), tb.getCount());
	}
}

// ============================================================
/**
 * A simple test cases that tests the save and restore of 
 * a couple of nodes and a link. Does not test atomspaces at all.
 */
void BasicSaveUTest::single_atom_save_restore(std::string id)
{
	AtomStorage *store = new AtomStorage(dbname, username, passwd);
	if (!store->connected())
	{
		logger().debug("single_atom_save_restore: cannot connect to db");
		return;
	}

	// Create an atom ... 
	Atom *a = new Node(SCHEMA_NODE, id + "someNode");
	SimpleTruthValue stv(0.55, 0.6);
	a->setTruthValue(stv);
	TLB::addAtom(a);

	// Store the atom ... 
	store->storeAtom(a);

	// Fetch it back ...
	Handle h = TLB::getHandle(a);
	Atom *b = store->getAtom(h);

	// Are they equal ??
	atomCompare(a,b);

	// Create a second atom, connect it to the first
	// with a link. Save it, fetch it ... are they equal?
	Atom *a2 = new Node(SCHEMA_NODE, id + "otherNode");
	TLB::addAtom(a2);
	store->storeAtom(a2);

	std::vector<Handle> hvec;
	hvec.push_back(TLB::getHandle(a));
	hvec.push_back(TLB::getHandle(a2));


	Link *l = new Link(SET_LINK, hvec);
	TLB::addAtom(l);
	store->storeAtom(l);

	Atom *lb = store->getAtom(TLB::getHandle(l));
	atomCompare(l,lb);

	store->kill_data();
	delete store;

	TLB::removeAtom(a);
	TLB::removeAtom(a2);
	TLB::removeAtom(l);
	delete a;
	delete a2;
	delete l;	
}

// ============================================================

void BasicSaveUTest::add_to_table(int idx, AtomTable *table, std::string id)
{
	// Create an atom ... 
	n1[idx] = new Node(WORD_NODE, id + "fromNode");
	SimpleTruthValue stv(0.11, 100+idx);
	n1[idx]->setTruthValue(stv);
	a1[idx] = n1[idx];
	table->add(a1[idx]);

	n2[idx] = new Node(WORD_NODE, id + "toNode");
	SimpleTruthValue stv2(0.22, 200+idx);
	n2[idx]->setTruthValue(stv2);
	a2[idx] = n2[idx];
	table->add(a2[idx]);

	n3[idx] = new Node(WORD_NODE, id + "third wheel");
	SimpleTruthValue stv3(0.33, 300+idx);
	n3[idx]->setTruthValue(stv3);
	a3[idx] = n3[idx];
	table->add(a3[idx]);

	std::vector<Handle> hvec;
	hvec.push_back(TLB::getHandle(a1[idx]));
	hvec.push_back(TLB::getHandle(a2[idx]));
	hvec.push_back(TLB::getHandle(a3[idx]));

	l[idx] = new Link(PARSE_LINK, hvec);
	al[idx] = l[idx];
	table->add(l[idx]);
}

void BasicSaveUTest::check_table(int idx, AtomTable *table, std::string id)
{
	Handle hb1 = table->getHandle(n1[idx]);
	Atom *b1 = TLB::getAtom(hb1);
	atomCompare(a1[idx], b1);

	Handle hb2 = table->getHandle(n2[idx]);
	Atom *b2 = TLB::getAtom(hb2);
	atomCompare(a2[idx], b2);

	Handle hb3 = table->getHandle(n3[idx]);
	Atom *b3 = TLB::getAtom(hb3);
	atomCompare(a3[idx], b3);

	std::vector<Handle> hvec;
	hvec.push_back(hb1);
	hvec.push_back(hb2);
	hvec.push_back(hb3);

	Link lb(PARSE_LINK, hvec);
	Handle hlb = table->getHandle(&lb);
	Atom *bl = TLB::getAtom(hlb);
	atomCompare(al[idx], bl);
}

// ============================================================

void BasicSaveUTest::test_single_atom(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	single_atom_save_restore("aaa ");
	single_atom_save_restore("bbb ");
	single_atom_save_restore("ccc ");
	single_atom_save_restore("ddd ");
	single_atom_save_restore("eee ");

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BasicSaveUTest::test_table(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	AtomStorage *store = new AtomStorage(dbname, username, passwd);
	if (!store->connected())
	{
		logger().debug("test_table: cannot connect to db");
		return;
	}

	AtomTable *table1 = new AtomTable();
	int idx = 0;
	add_to_table(idx++, table1, "AA-aa-wow ");
	add_to_table(idx++, table1, "BB-bb-wow ");
	add_to_table(idx++, table1, "CC-cc-wow ");
	add_to_table(idx++, table1, "DD-dd-wow ");
	add_to_table(idx++, table1, "EE-ee-wow ");

	store->store(*table1);
	// table1->print();
	delete store;

	// Copy atoms; the original atoms will be blown away
	// when table1 is deleted. (they're also removed from
	// the TLB, so this indirectly tests the correctness
	// of the stored uuid's as well.)
	int mi = idx;
	for (idx=0; idx < mi; idx++)
	{
		n1[idx] = new Node(*n1[idx]); a1[idx] = n1[idx];
		n2[idx] = new Node(*n2[idx]); a2[idx] = n2[idx];
		n3[idx] = new Node(*n3[idx]); a3[idx] = n3[idx];
		l[idx]  = new Link(*l[idx]);  al[idx] = l[idx];
	}
	delete table1;

	// Reopen connection, and load the atom table.
	store = new AtomStorage(dbname, username, passwd);
	TSM_ASSERT("Not connected to database", store->connected());

	AtomTable *table2 = new AtomTable();

	store->load(*table2);
	// table2->print();

	idx = 0;
	check_table(idx++, table2, "aaa ");
	check_table(idx++, table2, "bbb ");
	check_table(idx++, table2, "ccc ");
	check_table(idx++, table2, "ddd ");
	check_table(idx++, table2, "eee ");

	store->kill_data();
	delete store;
	delete table2;
	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ============================= END OF FILE ================= */
