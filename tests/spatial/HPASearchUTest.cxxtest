/*
 * tests/spatial/HPASearchUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Samir Araujo
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <cxxtest/TestSuite.h>
#include <string>
#include <sstream>
#include <iostream>

#include <opencog/util/numeric.h>
#include <opencog/util/mt19937ar.h>

#include <opencog/atomspace/types.h>

#include <opencog/spatial/LocalSpaceMap2D.h>
#include <opencog/spatial/HPASearch.h>
#include <opencog/spatial/math/Dimension3.h>

using namespace std;

using namespace opencog;
using namespace opencog::spatial;
using namespace opencog::spatial::math;

static opencog::MT19937RandGen rng(0);


class MetaObject
{
public:
    MetaObject( const std::string& name, int type, const Vector2& position, const Dimension3& dimension, float yaw ) : name( name ), type( type ), position( position ), dimension( dimension ), yaw( yaw ) { }
    std::string name;
    int type;
    Vector2 position;
    Dimension3 dimension;
    float yaw;
};

float xMin = -64.0;
float yMin = -64.0;
float xMax = 64.0;
float yMax = 64.0;

unsigned int yDim = 512;
unsigned int xDim = 512;
float petRadius = 0.354f;

const unsigned int OBJECTS_COUNT = 20;
MetaObject* objects[OBJECTS_COUNT] = {
    new MetaObject( "structure", 1, Vector2( 57.000000, -54.000000), Dimension3( 0.250000, 2.000000, 10.000000 ), 0.000000 ),
    new MetaObject( "structure1", 1, Vector2( 52.000000, -59.000000), Dimension3( 6.000000, 2.000000, 0.250000 ), 0.000000 ),
    new MetaObject( "structure2", 1, Vector2( -9.000000, 19.000000), Dimension3( 0.250000, 2.000000, 30.000000 ), 0.000000 ),
    new MetaObject( "structure3", 1, Vector2( -22.000000, -6.000000), Dimension3( 50.000000, 2.000000, 0.250000 ), 0.000000 ),
    new MetaObject( "tree", 1, Vector2( 54.000000, -60.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree1", 1, Vector2( 26.000000, -51.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree10", 1, Vector2( -22.000000, 44.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree2", 1, Vector2( 6.000000, -36.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree3", 1, Vector2( 51.000000, -11.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree4", 1, Vector2( 26.000000, 4.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree5", 1, Vector2( 56.000000, 34.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree6", 1, Vector2( -14.000000, 4.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree7", 1, Vector2( -29.000000, -4.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree8", 1, Vector2( -42.000000, -51.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "tree9", 1, Vector2( -44.000000, 14.000000), Dimension3( 0.500000, 4.000000, 0.500000 ), 0.000000 ),
    new MetaObject( "water", 1, Vector2( 36.000000, -36.000000), Dimension3( 1.500000, 1.000000, 1.500000 ), 0.000000 ),
    new MetaObject( "water1", 1, Vector2( -14.000000, -11.000000), Dimension3( 2.500000, 2.500000, 12.000000 ), 0.000000 ),
    new MetaObject( "water2", 1, Vector2( 31.000000, 24.000000), Dimension3( 12.000000, 1.000000, 12.000000 ), 0.000000 ),
    new MetaObject( "water3", 1, Vector2( -54.000000, 54.000000), Dimension3( 12.000000, 1.000000, 12.000000 ), 0.000000 ),
    new MetaObject( "waterBowl", 0, Vector2( 56.000000, -52.000000), Dimension3( 0.200000, 0.150000, 0.200000 ), 0.000000 )
};

class LocalSpaceMapUTest : public CxxTest::TestSuite
{
public:

    std::vector<Point> randObj(LocalSpaceMap2D& m) {
        double xMin = rng.randdouble(), xMax = rng.randdouble();
        if (xMax < xMin)
            swap(xMin, xMax);
        double yMin = rng.randdouble(), yMax = rng.randdouble();
        if (yMax < yMin)
            swap(yMin, yMax);

        //make it smallish
        xMax = xMin + ((xMax - xMin) / 10);
        yMax = yMin + ((yMax - yMin) / 10);

        std::vector<Point> pts;
        for (unsigned int i = 0;i < xDim / 10;++i)
            for (unsigned int j = 0;j < yDim / 10;++j) {
                //if (chatty) cout << "adding " << (xMin+i*((xMax-xMin)/10.0)) << ","
                //    << (yMin+j*((yMax-yMin)/10.0)) << endl;
                pts.push_back(Point(xMin + i*((xMax - xMin) / 10.0),
                                    yMin + j*((yMax - yMin) / 10.0)));
            }
        return pts;
    }


    void test_findPaths( ) {

        LocalSpaceMap2D* map1 = 0;
        map1 = new LocalSpaceMap2D( xMin, xMax, xDim, yMin, yMax, yDim, petRadius );
        unsigned int i;
        for ( i = 0; i < OBJECTS_COUNT; i++ ) {
            ObjectMetaData metaData( objects[ i ]->position.x, objects[ i ]->position.y, 0,
                                     objects[ i ]->dimension.length,
                                     objects[ i ]->dimension.width,
                                     objects[ i ]->dimension.height,
                                     objects[ i ]->yaw );
            map1->addObject( objects[ i ]->name, metaData, true );
        } // for
        HPASearch* hpa = new HPASearch( map1, 1 );

        typedef std::pair<Vector2, Vector2 > StartEndPoints;
        std::vector< StartEndPoints > positions;
        positions.push_back( StartEndPoints( Vector2( -60, -60 ), Vector2( 60, 60 ) ) );
        positions.push_back( StartEndPoints( Vector2( -60, -60 ), Vector2( -60, -60 ) ) );
        positions.push_back( StartEndPoints( Vector2( -60, -60 ), Vector2( -59.05, -59.05 ) ) );

        for ( i = 0; i < positions.size( ); ++i ) {
            TS_ASSERT_THROWS_NOTHING(
                TS_ASSERT( hpa->processPath( positions[ i ].first, positions[ i ].second ) );
            );
        } // for

        delete map1;
        delete hpa;

    }


};
