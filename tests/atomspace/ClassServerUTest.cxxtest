/*
 * tests/atomspace/ClassServerUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <iostream>

#include <opencog/atomspace/atom_types.h>
#include <opencog/atomspace/ClassServer.h>

using namespace opencog;

class ClassServerUTest :  public CxxTest::TestSuite
{
private:

public:
    ClassServerUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testIsAssignableFrom() {
        int numClasses = classserver().getNumberOfClasses();
        for (Type t = 0; t < numClasses; t++) {
            TS_ASSERT(classserver().isA(t, t));
            if (t > 0) TS_ASSERT(classserver().isA(t, NODE) || classserver().isA(t, LINK));
        }

        TS_ASSERT( classserver().isA(NODE, ATOM));
        TS_ASSERT( classserver().isA(LINK, ATOM));
        TS_ASSERT( classserver().isA(NUMBER_NODE, NODE));
        TS_ASSERT(!classserver().isA(NODE, NUMBER_NODE));
        TS_ASSERT( classserver().isA(ORDERED_LINK, LINK));
        TS_ASSERT( classserver().isA(LIST_LINK, ORDERED_LINK));
        TS_ASSERT( classserver().isA(LIST_LINK, LINK));
        TS_ASSERT( classserver().isA(LIST_LINK, ATOM));
        TS_ASSERT(!classserver().isA(LIST_LINK, NODE));
        TS_ASSERT(!classserver().isA(NUMBER_NODE, LINK));
        TS_ASSERT(!classserver().isA(ATOM, LIST_LINK));
    }

    void testNames() {
        TS_ASSERT(classserver().getTypeName(ATOM)      == "Atom");
        TS_ASSERT(classserver().getTypeName(LINK)      == "Link");
        TS_ASSERT(classserver().getTypeName(NODE)      == "Node");
        TS_ASSERT(classserver().getTypeName(NUMBER_NODE) == "NumberNode");
        TS_ASSERT(classserver().getTypeName(LIST_LINK) == "ListLink");
    }

    void testCodes() {
        TS_ASSERT(classserver().getType("Atom") == 0);
        TS_ASSERT(classserver().getType("Node") <= 2);
        TS_ASSERT(classserver().getType("Link") <= 2);
    }

    void testCustomTypes() {
        Type ntypes = classserver().getNumberOfClasses();

        Type CS_UTEST_NODE   = classserver().addType(NODE, "CsUtestNode");
        TS_ASSERT(CS_UTEST_NODE   == ntypes);
        TS_ASSERT(classserver().getNumberOfClasses() == (unsigned int)(ntypes+1));
        TS_ASSERT( classserver().isA(CS_UTEST_NODE, NODE));
        TS_ASSERT(!classserver().isA(CS_UTEST_NODE, NUMBER_NODE));
        TS_ASSERT(!classserver().isA(CS_UTEST_NODE, LINK));

        Type CS_UTEST_LINK   = classserver().addType(LIST_LINK, "CsUtestLink");
        TS_ASSERT(CS_UTEST_LINK   == (ntypes + 1));
        TS_ASSERT(classserver().getNumberOfClasses() == (unsigned int)(ntypes+2));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK, LINK));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK, ORDERED_LINK));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK, LIST_LINK));
        TS_ASSERT(!classserver().isA(CS_UTEST_LINK, UNORDERED_LINK));
        TS_ASSERT(!classserver().isA(CS_UTEST_LINK, NODE));
        TS_ASSERT(!classserver().isA(CS_UTEST_LINK, NUMBER_NODE));

        Type CS_UTEST_NODE_2 = classserver().addType(NODE, "CsUtestNode");
        TS_ASSERT(CS_UTEST_NODE_2 == ntypes);
        TS_ASSERT(classserver().getNumberOfClasses() == (unsigned int)(ntypes+2));
        TS_ASSERT( classserver().isA(CS_UTEST_NODE_2, NODE));
        TS_ASSERT(!classserver().isA(CS_UTEST_NODE_2, NUMBER_NODE));
        TS_ASSERT(!classserver().isA(CS_UTEST_NODE_2, LINK));
        TS_ASSERT( classserver().isA(CS_UTEST_NODE, NODE));
        TS_ASSERT(!classserver().isA(CS_UTEST_NODE, NUMBER_NODE));
        TS_ASSERT(!classserver().isA(CS_UTEST_NODE, LINK));

        Type CS_UTEST_LINK_2 = classserver().addType(UNORDERED_LINK, "CsUtestLink");
        TS_ASSERT(CS_UTEST_LINK_2 == (ntypes + 1));
        TS_ASSERT(classserver().getNumberOfClasses() == (unsigned int)(ntypes+2));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK_2, LINK));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK_2, ORDERED_LINK));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK_2, LIST_LINK));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK_2, UNORDERED_LINK));
        TS_ASSERT(!classserver().isA(CS_UTEST_LINK_2, NODE));
        TS_ASSERT(!classserver().isA(CS_UTEST_LINK_2, NUMBER_NODE));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK,   LINK));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK,   ORDERED_LINK));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK,   LIST_LINK));
        TS_ASSERT( classserver().isA(CS_UTEST_LINK,   UNORDERED_LINK));
        TS_ASSERT(!classserver().isA(CS_UTEST_LINK,   NODE));
        TS_ASSERT(!classserver().isA(CS_UTEST_LINK,   NUMBER_NODE));
    }
};
