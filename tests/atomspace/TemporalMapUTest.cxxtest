/*
 * tests/atomspace/TemporalMapUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/TemporalEntry.h>
#include <opencog/atomspace/TemporalMap.h>
#include <opencog/util/exceptions.h>
#include <opencog/util/mt19937ar.h>
#include <opencog/util/numeric.h>

using namespace opencog;

#define N_TIMES 10

class TemporalMapUTest :  public CxxTest::TestSuite
{
private:
    Temporal* times[N_TIMES];
    char *content[N_TIMES];

    TemporalMap *temporalMap;
public:
    TemporalMapUTest() {
        for (int i = 0; i < N_TIMES; i++) {
            times[i] = new Temporal(i, i, true);
            content[i] = new char[1];
        }
    }

    void setUp() {
        temporalMap = new TemporalMap();
    }

    void tearDown() {
        delete(temporalMap);
    }

    void testAdd() {
        for (int i = 0; i < N_TIMES; i++) {
            TS_ASSERT(!temporalMap->contains(times[i]));
            TS_ASSERT(!temporalMap->get(times[i]));
        }
        for (int i = 0; i < N_TIMES; i++) {
            temporalMap->add(times[i], content[i]);
            TS_ASSERT(temporalMap->contains(times[i]));
            TS_ASSERT(temporalMap->get(times[i]) == content[i]);
            TS_ASSERT(temporalMap->getCount() == i + 1);
        }
    }

    void testRemove() {
        for (int i = 0; i < N_TIMES; i++) {
            temporalMap->add(times[i], content[i]);
        }
        for (int i = 0; i < N_TIMES; i++) {
            TS_ASSERT(temporalMap->contains(times[i]));
            TS_ASSERT(temporalMap->remove(times[i]) == content[i]);
            TS_ASSERT(!temporalMap->contains(times[i]));
        }
    }

    void testKeys() {
        bool iterated[N_TIMES];

        memset(iterated, 0, sizeof(bool)*N_TIMES);

        for (int i = 0; i < N_TIMES; i++) {
            temporalMap->add(times[i], content[i]);
        }
        TemporalMapIterator *it = temporalMap->keys();
        for (int i = 0; i < N_TIMES; i++) {
            TS_ASSERT(it->hasNext());
            Temporal* t = it->next();
            for (int j = 0; j < N_TIMES; j++) {
                if (!TemporalEntry::temporalCompare(&t, &times[j])) {
                    iterated[i] = true;
                }
            }
        }
        for (int i = 0; i < N_TIMES; i++) {
            TS_ASSERT(iterated[i]);
        }
        TS_ASSERT(!it->hasNext());
        TS_ASSERT_THROWS(it->next(), IndexErrorException&);
        delete(it);
    }

    void testSize() {
        opencog::MT19937RandGen rng(12345678);
        int size = rng.randint(N_TIMES);
        delete(temporalMap);
        temporalMap = new TemporalMap(size);
        TS_ASSERT(temporalMap->getSize() >= size);
    }
};
