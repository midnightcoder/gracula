/*
 * tests/atomspace/HandleSetUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Rodrigo Barra
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/HandleSet.h>
#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/TLB.h>
#include <opencog/util/platform.h>

using namespace opencog;

#define N_HANDLES 10

class HandleSetUTest :  public CxxTest::TestSuite
{

private:

    Handle handles[N_HANDLES];
    HandleSet *handleSet;

public:

    HandleSetUTest() {
        for (int i = 0; i < N_HANDLES; i++) {
            char name[16];
            sprintf(name, "%d", i);
            Node *n = new Node(NUMBER_NODE, name);
            handles[i] = TLB::addAtom(n);
        }
    }

    ~HandleSetUTest() {
    }

    void setUp() {
        handleSet = new HandleSet();
    }

    void tearDown() {
        delete(handleSet);
    }

    void testAdd1() {
        for (int i = 0; i < N_HANDLES; i++) {
            TS_ASSERT(!handleSet->contains(handles[i]));
        }
        for (int i = 0; i < N_HANDLES; i++) {
            handleSet->add(handles[i]);
            TS_ASSERT(handleSet->contains(handles[i]));
            TS_ASSERT(handleSet->getSize() == i + 1);
        }
    }

    void testAdd2() {

        for (int i = 0; i < N_HANDLES; i++) {
            handleSet->add(handles[i]);
        }
        HandleSet *handleSet1 = new HandleSet();
        handleSet1->add(handleSet);
        for (int i = 0; i < N_HANDLES; i++) {
            TS_ASSERT(handleSet->contains(handles[i]));
        }
        TS_ASSERT(handleSet1->getSize() == N_HANDLES);
        delete(handleSet1);
    }

    void testRemove() {
        for (int i = 0; i < N_HANDLES; i++) {
            handleSet->add(handles[i]);
        }
        for (int i = 0; i < N_HANDLES; i++) {
            TS_ASSERT(handleSet->contains(handles[i]));
            handleSet->remove(handles[i]);
            TS_ASSERT(!handleSet->contains(handles[i]));
            TS_ASSERT_THROWS(handleSet->remove(handles[i]), RuntimeException&);
        }
    }

    void testKeys() {
        bool iterated[N_HANDLES];

        memset(iterated, 0, sizeof(bool)*N_HANDLES);

        for (int i = 0; i < N_HANDLES; i++) {
            handleSet->add(handles[i]);
        }
        HandleSetIterator *it = handleSet->keys();
        for (int i = 0; i < N_HANDLES; i++) {
            TS_ASSERT(it->hasNext());
            Handle h = it->next();
            for (int j = 0; j < N_HANDLES; j++) {
                if (h == handles[j]) {
                    iterated[i] = true;
                }
            }
        }
        for (int i = 0; i < N_HANDLES; i++) {
            TS_ASSERT(iterated[i]);
        }
        TS_ASSERT(!it->hasNext());
        TS_ASSERT_THROWS(it->next(), IndexErrorException&);
        delete(it);
    }
};
